
vgrs-security-sysyem-stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080041a0  080041a0  000141a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b0  080041b0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b8  080041b8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080041c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          00000424  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000450  20000450  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010347  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000258b  00000000  00000000  000303a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  00032930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a50  00000000  00000000  00033478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e11  00000000  00000000  00033ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d568  00000000  00000000  00055cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9db6  00000000  00000000  00063241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012cff7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e34  00000000  00000000  0012d04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004188 	.word	0x08004188

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08004188 	.word	0x08004188

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fd36 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f888 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f926 	bl	800071c <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d0:	f000 f8ee 	bl	80006b0 <MX_SPI1_Init>
  MFRC522_Init();
 80004d4:	f000 fbf2 	bl	8000cbc <MFRC522_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80004d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004dc:	f000 fd9c 	bl	8001018 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	readRFIDLockState();
 80004e0:	f000 f818 	bl	8000514 <readRFIDLockState>

	if (rfidLockState == UNLOCKED)
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <main+0x4c>)
 80004e6:	f993 3000 	ldrsb.w	r3, [r3]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d106      	bne.n	80004fc <main+0x3c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80004ee:	2201      	movs	r2, #1
 80004f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <main+0x50>)
 80004f6:	f001 f835 	bl	8001564 <HAL_GPIO_WritePin>
 80004fa:	e7f1      	b.n	80004e0 <main+0x20>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <main+0x50>)
 8000504:	f001 f82e 	bl	8001564 <HAL_GPIO_WritePin>
  {
 8000508:	e7ea      	b.n	80004e0 <main+0x20>
 800050a:	bf00      	nop
 800050c:	20000048 	.word	0x20000048
 8000510:	40020c00 	.word	0x40020c00

08000514 <readRFIDLockState>:
	}
  /* USER CODE END 3 */
}

void readRFIDLockState()
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	af00      	add	r7, sp, #0
	if (rfidLastTimeValidated != -1 && HAL_GetTick() - rfidLastTimeValidated <= EXPIRE_LOCK_VALIDATION_TIME && rfidLockState == UNLOCKED)
 8000518:	4b2a      	ldr	r3, [pc, #168]	; (80005c4 <readRFIDLockState+0xb0>)
 800051a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800051e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000522:	bf08      	it	eq
 8000524:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8000528:	d017      	beq.n	800055a <readRFIDLockState+0x46>
 800052a:	f000 fd69 	bl	8001000 <HAL_GetTick>
 800052e:	4603      	mov	r3, r0
 8000530:	4618      	mov	r0, r3
 8000532:	f04f 0100 	mov.w	r1, #0
 8000536:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <readRFIDLockState+0xb0>)
 8000538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800053c:	1a84      	subs	r4, r0, r2
 800053e:	eb61 0503 	sbc.w	r5, r1, r3
 8000542:	f241 7270 	movw	r2, #6000	; 0x1770
 8000546:	f04f 0300 	mov.w	r3, #0
 800054a:	42a2      	cmp	r2, r4
 800054c:	41ab      	sbcs	r3, r5
 800054e:	db04      	blt.n	800055a <readRFIDLockState+0x46>
 8000550:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <readRFIDLockState+0xb4>)
 8000552:	f993 3000 	ldrsb.w	r3, [r3]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d031      	beq.n	80005be <readRFIDLockState+0xaa>
	{
		return;
	}
	rc522State = MFRC522_Check(cardID);
 800055a:	481c      	ldr	r0, [pc, #112]	; (80005cc <readRFIDLockState+0xb8>)
 800055c:	f000 f9c2 	bl	80008e4 <MFRC522_Check>
 8000560:	4603      	mov	r3, r0
 8000562:	b25a      	sxtb	r2, r3
 8000564:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <readRFIDLockState+0xbc>)
 8000566:	701a      	strb	r2, [r3, #0]
	if (rc522State == MI_OK)
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <readRFIDLockState+0xbc>)
 800056a:	f993 3000 	ldrsb.w	r3, [r3]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d11e      	bne.n	80005b0 <readRFIDLockState+0x9c>
	{
		if (MFRC522_Compare(cardID, validID_1) == MI_OK || MFRC522_Compare(cardID, validID_2) == MI_OK)
 8000572:	4918      	ldr	r1, [pc, #96]	; (80005d4 <readRFIDLockState+0xc0>)
 8000574:	4815      	ldr	r0, [pc, #84]	; (80005cc <readRFIDLockState+0xb8>)
 8000576:	f000 f9ce 	bl	8000916 <MFRC522_Compare>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d006      	beq.n	800058e <readRFIDLockState+0x7a>
 8000580:	4915      	ldr	r1, [pc, #84]	; (80005d8 <readRFIDLockState+0xc4>)
 8000582:	4812      	ldr	r0, [pc, #72]	; (80005cc <readRFIDLockState+0xb8>)
 8000584:	f000 f9c7 	bl	8000916 <MFRC522_Compare>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10c      	bne.n	80005a8 <readRFIDLockState+0x94>
		{
			rfidLockState = UNLOCKED;
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <readRFIDLockState+0xb4>)
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
			rfidLastTimeValidated = HAL_GetTick();
 8000594:	f000 fd34 	bl	8001000 <HAL_GetTick>
 8000598:	4603      	mov	r3, r0
 800059a:	461a      	mov	r2, r3
 800059c:	f04f 0300 	mov.w	r3, #0
 80005a0:	4908      	ldr	r1, [pc, #32]	; (80005c4 <readRFIDLockState+0xb0>)
 80005a2:	e9c1 2300 	strd	r2, r3, [r1]
 80005a6:	e006      	b.n	80005b6 <readRFIDLockState+0xa2>
		} else
		{
			rfidLockState = LOCKED;
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <readRFIDLockState+0xb4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e002      	b.n	80005b6 <readRFIDLockState+0xa2>
		}
	} else {
		// no card detected
		rfidLockState = LOCKED;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <readRFIDLockState+0xb4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(10);
 80005b6:	200a      	movs	r0, #10
 80005b8:	f000 fd2e 	bl	8001018 <HAL_Delay>
 80005bc:	e000      	b.n	80005c0 <readRFIDLockState+0xac>
		return;
 80005be:	bf00      	nop

}
 80005c0:	bdb0      	pop	{r4, r5, r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000018 	.word	0x20000018
 80005c8:	20000048 	.word	0x20000048
 80005cc:	200000a0 	.word	0x200000a0
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004
 80005d8:	2000000c 	.word	0x2000000c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fdc4 	bl	8004178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <SystemClock_Config+0xcc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <SystemClock_Config+0xd0>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000650:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065a:	2307      	movs	r3, #7
 800065c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fa28 	bl	8002ab8 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800066e:	f000 f8a9 	bl	80007c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2302      	movs	r3, #2
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2105      	movs	r1, #5
 8000690:	4618      	mov	r0, r3
 8000692:	f002 fc89 	bl	8002fa8 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800069c:	f000 f892 	bl	80007c4 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	; 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_SPI1_Init+0x64>)
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <MX_SPI1_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_SPI1_Init+0x64>)
 80006e4:	2218      	movs	r2, #24
 80006e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_SPI1_Init+0x64>)
 80006fc:	220a      	movs	r2, #10
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_SPI1_Init+0x64>)
 8000702:	f002 fe19 	bl	8003338 <HAL_SPI_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800070c:	f000 f85a 	bl	80007c4 <Error_Handler>
  }

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000a8 	.word	0x200000a8
 8000718:	40013000 	.word	0x40013000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <MX_GPIO_Init+0x9c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a23      	ldr	r2, [pc, #140]	; (80007b8 <MX_GPIO_Init+0x9c>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_GPIO_Init+0x9c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_GPIO_Init+0x9c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <MX_GPIO_Init+0x9c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_GPIO_Init+0x9c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_GPIO_Init+0x9c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <MX_GPIO_Init+0x9c>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_GPIO_Init+0x9c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA0 PA4 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000776:	2310      	movs	r3, #16
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077e:	2301      	movs	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <MX_GPIO_Init+0xa0>)
 800078e:	f000 fd4d 	bl	800122c <HAL_GPIO_Init>


  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000792:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079c:	2301      	movs	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a0:	2303      	movs	r3, #3
 80007a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4619      	mov	r1, r3
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_GPIO_Init+0xa4>)
 80007ac:	f000 fd3e 	bl	800122c <HAL_GPIO_Init>
  // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020000 	.word	0x40020000
 80007c0:	40020c00 	.word	0x40020c00

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 80007de:	f107 0208 	add.w	r2, r7, #8
 80007e2:	f107 010c 	add.w	r1, r7, #12
 80007e6:	230a      	movs	r3, #10
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2301      	movs	r3, #1
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <SPI1SendByte+0x2c>)
 80007ee:	f002 fe2c 	bl	800344a <HAL_SPI_TransmitReceive>
	return readValue[0];
 80007f2:	7a3b      	ldrb	r3, [r7, #8]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000a8 	.word	0x200000a8

08000800 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	460a      	mov	r2, r1
 800080a:	71fb      	strb	r3, [r7, #7]
 800080c:	4613      	mov	r3, r2
 800080e:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000810:	2200      	movs	r2, #0
 8000812:	2110      	movs	r1, #16
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <SPI1_WriteReg+0x3c>)
 8000816:	f000 fea5 	bl	8001564 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ffd7 	bl	80007d0 <SPI1SendByte>
	SPI1SendByte(value);
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ffd3 	bl	80007d0 <SPI1SendByte>
	cs_set();
 800082a:	2201      	movs	r2, #1
 800082c:	2110      	movs	r1, #16
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <SPI1_WriteReg+0x3c>)
 8000830:	f000 fe98 	bl	8001564 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40020000 	.word	0x40020000

08000840 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 800084a:	2200      	movs	r2, #0
 800084c:	2110      	movs	r1, #16
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <SPI1_ReadReg+0x3c>)
 8000850:	f000 fe88 	bl	8001564 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ffba 	bl	80007d0 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff ffb7 	bl	80007d0 <SPI1SendByte>
 8000862:	4603      	mov	r3, r0
 8000864:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000866:	2201      	movs	r2, #1
 8000868:	2110      	movs	r1, #16
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <SPI1_ReadReg+0x3c>)
 800086c:	f000 fe7a 	bl	8001564 <HAL_GPIO_WritePin>
	return val;
 8000870:	7bfb      	ldrb	r3, [r7, #15]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40020000 	.word	0x40020000

08000880 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	460a      	mov	r2, r1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	4613      	mov	r3, r2
 800088e:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	b2db      	uxtb	r3, r3
 8000896:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800089a:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 800089c:	79ba      	ldrb	r2, [r7, #6]
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ffac 	bl	8000800 <SPI1_WriteReg>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ffb5 	bl	8000840 <SPI1_ReadReg>
 80008d6:	4603      	mov	r3, r0
 80008d8:	73fb      	strb	r3, [r7, #15]
	return val;
 80008da:	7bfb      	ldrb	r3, [r7, #15]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	2026      	movs	r0, #38	; 0x26
 80008f0:	f000 f86a 	bl	80009c8 <MFRC522_Request>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d104      	bne.n	8000908 <MFRC522_Check+0x24>
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f000 f956 	bl	8000bb0 <MFRC522_Anticoll>
 8000904:	4603      	mov	r3, r0
 8000906:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation
 8000908:	f000 fa19 	bl	8000d3e <MFRC522_Halt>
	return status;
 800090c:	7bfb      	ldrb	r3, [r7, #15]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <MFRC522_Compare>:

uint8_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 8000916:	b480      	push	{r7}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]
 8000924:	e00e      	b.n	8000944 <MFRC522_Compare+0x2e>
		if (CardID[i] != CompareID[i]) return MI_ERR;
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	4413      	add	r3, r2
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	6839      	ldr	r1, [r7, #0]
 8000932:	440b      	add	r3, r1
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	429a      	cmp	r2, r3
 8000938:	d001      	beq.n	800093e <MFRC522_Compare+0x28>
 800093a:	2302      	movs	r3, #2
 800093c:	e006      	b.n	800094c <MFRC522_Compare+0x36>
	for (i = 0; i < 5; i++) {
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	3301      	adds	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	2b04      	cmp	r3, #4
 8000948:	d9ed      	bls.n	8000926 <MFRC522_Compare+0x10>
	}
	return MI_OK;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ffa0 	bl	80008b0 <MFRC522_ReadRegister>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	4313      	orrs	r3, r2
 8000978:	b2da      	uxtb	r2, r3
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff7e 	bl	8000880 <MFRC522_WriteRegister>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	460a      	mov	r2, r1
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	4613      	mov	r3, r2
 800099a:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff86 	bl	80008b0 <MFRC522_ReadRegister>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b25a      	sxtb	r2, r3
 80009a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009ac:	43db      	mvns	r3, r3
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	4013      	ands	r3, r2
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff60 	bl	8000880 <MFRC522_WriteRegister>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 80009d4:	2107      	movs	r1, #7
 80009d6:	200d      	movs	r0, #13
 80009d8:	f7ff ff52 	bl	8000880 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	2201      	movs	r2, #1
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	200c      	movs	r0, #12
 80009f0:	f000 f80f 	bl	8000a12 <MFRC522_ToCard>
 80009f4:	4603      	mov	r3, r0
 80009f6:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d102      	bne.n	8000a04 <MFRC522_Request+0x3c>
 80009fe:	89bb      	ldrh	r3, [r7, #12]
 8000a00:	2b10      	cmp	r3, #16
 8000a02:	d001      	beq.n	8000a08 <MFRC522_Request+0x40>
 8000a04:	2302      	movs	r3, #2
 8000a06:	73fb      	strb	r3, [r7, #15]
	return status;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000a12:	b590      	push	{r4, r7, lr}
 8000a14:	b087      	sub	sp, #28
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	73fb      	strb	r3, [r7, #15]
 8000a20:	4613      	mov	r3, r2
 8000a22:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8000a24:	2302      	movs	r3, #2
 8000a26:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	2b0c      	cmp	r3, #12
 8000a34:	d006      	beq.n	8000a44 <MFRC522_ToCard+0x32>
 8000a36:	2b0e      	cmp	r3, #14
 8000a38:	d109      	bne.n	8000a4e <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8000a3a:	2312      	movs	r3, #18
 8000a3c:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000a3e:	2310      	movs	r3, #16
 8000a40:	757b      	strb	r3, [r7, #21]
			break;
 8000a42:	e005      	b.n	8000a50 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8000a44:	2377      	movs	r3, #119	; 0x77
 8000a46:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000a48:	2330      	movs	r3, #48	; 0x30
 8000a4a:	757b      	strb	r3, [r7, #21]
			break;
 8000a4c:	e000      	b.n	8000a50 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 8000a4e:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000a50:	7dbb      	ldrb	r3, [r7, #22]
 8000a52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	4619      	mov	r1, r3
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f7ff ff10 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	2004      	movs	r0, #4
 8000a64:	f7ff ff92 	bl	800098c <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f7ff ff74 	bl	8000958 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000a70:	2100      	movs	r1, #0
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff ff04 	bl	8000880 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	827b      	strh	r3, [r7, #18]
 8000a7c:	e00a      	b.n	8000a94 <MFRC522_ToCard+0x82>
 8000a7e:	8a7b      	ldrh	r3, [r7, #18]
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	4413      	add	r3, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	4619      	mov	r1, r3
 8000a88:	2009      	movs	r0, #9
 8000a8a:	f7ff fef9 	bl	8000880 <MFRC522_WriteRegister>
 8000a8e:	8a7b      	ldrh	r3, [r7, #18]
 8000a90:	3301      	adds	r3, #1
 8000a92:	827b      	strh	r3, [r7, #18]
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	8a7a      	ldrh	r2, [r7, #18]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3ef      	bcc.n	8000a7e <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f7ff feec 	bl	8000880 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	2b0c      	cmp	r3, #12
 8000aac:	d103      	bne.n	8000ab6 <MFRC522_ToCard+0xa4>
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	200d      	movs	r0, #13
 8000ab2:	f7ff ff51 	bl	8000958 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000ab6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000aba:	827b      	strh	r3, [r7, #18]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000abc:	2004      	movs	r0, #4
 8000abe:	f7ff fef7 	bl	80008b0 <MFRC522_ReadRegister>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	753b      	strb	r3, [r7, #20]
		i--;
 8000ac6:	8a7b      	ldrh	r3, [r7, #18]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000acc:	8a7b      	ldrh	r3, [r7, #18]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d00a      	beq.n	8000ae8 <MFRC522_ToCard+0xd6>
 8000ad2:	7d3b      	ldrb	r3, [r7, #20]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d105      	bne.n	8000ae8 <MFRC522_ToCard+0xd6>
 8000adc:	7d3a      	ldrb	r2, [r7, #20]
 8000ade:	7d7b      	ldrb	r3, [r7, #21]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0e9      	beq.n	8000abc <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8000ae8:	2180      	movs	r1, #128	; 0x80
 8000aea:	200d      	movs	r0, #13
 8000aec:	f7ff ff4e 	bl	800098c <MFRC522_ClearBitMask>

	if (i != 0)  {
 8000af0:	8a7b      	ldrh	r3, [r7, #18]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d057      	beq.n	8000ba6 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000af6:	2006      	movs	r0, #6
 8000af8:	f7ff feda 	bl	80008b0 <MFRC522_ReadRegister>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f003 031b 	and.w	r3, r3, #27
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d14d      	bne.n	8000ba2 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8000b0a:	7d3a      	ldrb	r2, [r7, #20]
 8000b0c:	7dbb      	ldrb	r3, [r7, #22]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MFRC522_ToCard+0x10c>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	2b0c      	cmp	r3, #12
 8000b22:	d140      	bne.n	8000ba6 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000b24:	200a      	movs	r0, #10
 8000b26:	f7ff fec3 	bl	80008b0 <MFRC522_ReadRegister>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000b2e:	200c      	movs	r0, #12
 8000b30:	f7ff febe 	bl	80008b0 <MFRC522_ReadRegister>
 8000b34:	4603      	mov	r3, r0
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8000b3c:	7c7b      	ldrb	r3, [r7, #17]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d00b      	beq.n	8000b5a <MFRC522_ToCard+0x148>
 8000b42:	7d3b      	ldrb	r3, [r7, #20]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	7c7b      	ldrb	r3, [r7, #17]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	4413      	add	r3, r2
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b56:	801a      	strh	r2, [r3, #0]
 8000b58:	e005      	b.n	8000b66 <MFRC522_ToCard+0x154>
 8000b5a:	7d3b      	ldrb	r3, [r7, #20]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b64:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8000b66:	7d3b      	ldrb	r3, [r7, #20]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <MFRC522_ToCard+0x15e>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8000b70:	7d3b      	ldrb	r3, [r7, #20]
 8000b72:	2b10      	cmp	r3, #16
 8000b74:	d901      	bls.n	8000b7a <MFRC522_ToCard+0x168>
 8000b76:	2310      	movs	r3, #16
 8000b78:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	827b      	strh	r3, [r7, #18]
 8000b7e:	e00a      	b.n	8000b96 <MFRC522_ToCard+0x184>
 8000b80:	8a7b      	ldrh	r3, [r7, #18]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	18d4      	adds	r4, r2, r3
 8000b86:	2009      	movs	r0, #9
 8000b88:	f7ff fe92 	bl	80008b0 <MFRC522_ReadRegister>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	7023      	strb	r3, [r4, #0]
 8000b90:	8a7b      	ldrh	r3, [r7, #18]
 8000b92:	3301      	adds	r3, #1
 8000b94:	827b      	strh	r3, [r7, #18]
 8000b96:	7d3b      	ldrb	r3, [r7, #20]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	8a7a      	ldrh	r2, [r7, #18]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d3ef      	bcc.n	8000b80 <MFRC522_ToCard+0x16e>
 8000ba0:	e001      	b.n	8000ba6 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	371c      	adds	r7, #28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd90      	pop	{r4, r7, pc}

08000bb0 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af02      	add	r7, sp, #8
 8000bb6:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	200d      	movs	r0, #13
 8000bc0:	f7ff fe5e 	bl	8000880 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2293      	movs	r2, #147	; 0x93
 8000bc8:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	2220      	movs	r2, #32
 8000bd0:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000bd2:	f107 030a 	add.w	r3, r7, #10
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2202      	movs	r2, #2
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	200c      	movs	r0, #12
 8000be0:	f7ff ff17 	bl	8000a12 <MFRC522_ToCard>
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d118      	bne.n	8000c20 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73bb      	strb	r3, [r7, #14]
 8000bf2:	e009      	b.n	8000c08 <MFRC522_Anticoll+0x58>
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781a      	ldrb	r2, [r3, #0]
 8000bfc:	7b7b      	ldrb	r3, [r7, #13]
 8000bfe:	4053      	eors	r3, r2
 8000c00:	737b      	strb	r3, [r7, #13]
 8000c02:	7bbb      	ldrb	r3, [r7, #14]
 8000c04:	3301      	adds	r3, #1
 8000c06:	73bb      	strb	r3, [r7, #14]
 8000c08:	7bbb      	ldrb	r3, [r7, #14]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d9f2      	bls.n	8000bf4 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	4413      	add	r3, r2
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	7b7a      	ldrb	r2, [r7, #13]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d001      	beq.n	8000c20 <MFRC522_Anticoll+0x70>
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8000c2a:	b590      	push	{r4, r7, lr}
 8000c2c:	b087      	sub	sp, #28
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	460b      	mov	r3, r1
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8000c38:	2104      	movs	r1, #4
 8000c3a:	2005      	movs	r0, #5
 8000c3c:	f7ff fea6 	bl	800098c <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	200a      	movs	r0, #10
 8000c44:	f7ff fe88 	bl	8000958 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8000c48:	2300      	movs	r3, #0
 8000c4a:	75fb      	strb	r3, [r7, #23]
 8000c4c:	e00a      	b.n	8000c64 <MFRC522_CalculateCRC+0x3a>
 8000c4e:	7dfb      	ldrb	r3, [r7, #23]
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4619      	mov	r1, r3
 8000c58:	2009      	movs	r0, #9
 8000c5a:	f7ff fe11 	bl	8000880 <MFRC522_WriteRegister>
 8000c5e:	7dfb      	ldrb	r3, [r7, #23]
 8000c60:	3301      	adds	r3, #1
 8000c62:	75fb      	strb	r3, [r7, #23]
 8000c64:	7dfa      	ldrb	r2, [r7, #23]
 8000c66:	7afb      	ldrb	r3, [r7, #11]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d3f0      	bcc.n	8000c4e <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8000c6c:	2103      	movs	r1, #3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff fe06 	bl	8000880 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8000c74:	23ff      	movs	r3, #255	; 0xff
 8000c76:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8000c78:	2005      	movs	r0, #5
 8000c7a:	f7ff fe19 	bl	80008b0 <MFRC522_ReadRegister>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	75bb      	strb	r3, [r7, #22]
		i--;
 8000c82:	7dfb      	ldrb	r3, [r7, #23]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																		// CRCIrq = 1
 8000c88:	7dfb      	ldrb	r3, [r7, #23]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d004      	beq.n	8000c98 <MFRC522_CalculateCRC+0x6e>
 8000c8e:	7dbb      	ldrb	r3, [r7, #22]
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0ef      	beq.n	8000c78 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8000c98:	2022      	movs	r0, #34	; 0x22
 8000c9a:	f7ff fe09 	bl	80008b0 <MFRC522_ReadRegister>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	1c5c      	adds	r4, r3, #1
 8000caa:	2021      	movs	r0, #33	; 0x21
 8000cac:	f7ff fe00 	bl	80008b0 <MFRC522_ReadRegister>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	7023      	strb	r3, [r4, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	371c      	adds	r7, #28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd90      	pop	{r4, r7, pc}

08000cbc <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8000cc0:	f000 f820 	bl	8000d04 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000cc4:	218d      	movs	r1, #141	; 0x8d
 8000cc6:	202a      	movs	r0, #42	; 0x2a
 8000cc8:	f7ff fdda 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000ccc:	213e      	movs	r1, #62	; 0x3e
 8000cce:	202b      	movs	r0, #43	; 0x2b
 8000cd0:	f7ff fdd6 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8000cd4:	211e      	movs	r1, #30
 8000cd6:	202d      	movs	r0, #45	; 0x2d
 8000cd8:	f7ff fdd2 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	202c      	movs	r0, #44	; 0x2c
 8000ce0:	f7ff fdce 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain
 8000ce4:	2170      	movs	r1, #112	; 0x70
 8000ce6:	2026      	movs	r0, #38	; 0x26
 8000ce8:	f7ff fdca 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000cec:	2140      	movs	r1, #64	; 0x40
 8000cee:	2015      	movs	r0, #21
 8000cf0:	f7ff fdc6 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8000cf4:	213d      	movs	r1, #61	; 0x3d
 8000cf6:	2011      	movs	r0, #17
 8000cf8:	f7ff fdc2 	bl	8000880 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();											// Open the antenna
 8000cfc:	f000 f80a 	bl	8000d14 <MFRC522_AntennaOn>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000d08:	210f      	movs	r1, #15
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f7ff fdb8 	bl	8000880 <MFRC522_WriteRegister>
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000d1a:	2014      	movs	r0, #20
 8000d1c:	f7ff fdc8 	bl	80008b0 <MFRC522_ReadRegister>
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d103      	bne.n	8000d36 <MFRC522_AntennaOn+0x22>
 8000d2e:	2103      	movs	r1, #3
 8000d30:	2014      	movs	r0, #20
 8000d32:	f7ff fe11 	bl	8000958 <MFRC522_SetBitMask>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b084      	sub	sp, #16
 8000d42:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8000d44:	2350      	movs	r3, #80	; 0x50
 8000d46:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	1c9a      	adds	r2, r3, #2
 8000d50:	463b      	mov	r3, r7
 8000d52:	2102      	movs	r1, #2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff68 	bl	8000c2a <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000d5a:	463a      	mov	r2, r7
 8000d5c:	4639      	mov	r1, r7
 8000d5e:	1dbb      	adds	r3, r7, #6
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	4613      	mov	r3, r2
 8000d64:	2204      	movs	r2, #4
 8000d66:	200c      	movs	r0, #12
 8000d68:	f7ff fe53 	bl	8000a12 <MFRC522_ToCard>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000db2:	2007      	movs	r0, #7
 8000db4:	f000 fa06 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a19      	ldr	r2, [pc, #100]	; (8000e48 <HAL_SPI_MspInit+0x84>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d12b      	bne.n	8000e3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_SPI_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e1e:	23e0      	movs	r3, #224	; 0xe0
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e2e:	2305      	movs	r3, #5
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_SPI_MspInit+0x8c>)
 8000e3a:	f000 f9f7 	bl	800122c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40013000 	.word	0x40013000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f89a 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <OTG_FS_IRQHandler+0x10>)
 8000eae:	f000 fb72 	bl	8001596 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000014c 	.word	0x2000014c

08000ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <SystemInit+0x20>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <SystemInit+0x20>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ee6:	490e      	ldr	r1, [pc, #56]	; (8000f20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000efc:	4c0b      	ldr	r4, [pc, #44]	; (8000f2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f0a:	f7ff ffd7 	bl	8000ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f003 f90f 	bl	8004130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fad5 	bl	80004c0 <main>
  bx  lr    
 8000f16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000f24:	080041c0 	.word	0x080041c0
  ldr r2, =_sbss
 8000f28:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000f2c:	20000450 	.word	0x20000450

08000f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <HAL_Init+0x40>)
 8000f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_Init+0x40>)
 8000f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_Init+0x40>)
 8000f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f000 f931 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 f808 	bl	8000f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f68:	f7ff ff04 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023c00 	.word	0x40023c00

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x54>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x58>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f93b 	bl	8001212 <HAL_SYSTICK_Config>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00e      	b.n	8000fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d80a      	bhi.n	8000fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb4:	f000 f911 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb8:	4a06      	ldr	r2, [pc, #24]	; (8000fd4 <HAL_InitTick+0x5c>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e000      	b.n	8000fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000020 	.word	0x20000020
 8000fd0:	20000028 	.word	0x20000028
 8000fd4:	20000024 	.word	0x20000024

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000028 	.word	0x20000028
 8000ffc:	20000148 	.word	0x20000148

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000148 	.word	0x20000148

08001018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff ffee 	bl	8001000 <HAL_GetTick>
 8001024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001030:	d005      	beq.n	800103e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_Delay+0x44>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103e:	bf00      	nop
 8001040:	f7ff ffde 	bl	8001000 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	429a      	cmp	r2, r3
 800104e:	d8f7      	bhi.n	8001040 <HAL_Delay+0x28>
  {
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000028 	.word	0x20000028

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff47 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff5c 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff8e 	bl	8001118 <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5d 	bl	80010c4 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffb0 	bl	8001180 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	e16b      	b.n	8001520 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001248:	2201      	movs	r2, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	429a      	cmp	r2, r3
 8001262:	f040 815a 	bne.w	800151a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b01      	cmp	r3, #1
 8001270:	d005      	beq.n	800127e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127a:	2b02      	cmp	r3, #2
 800127c:	d130      	bne.n	80012e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b4:	2201      	movs	r2, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	f003 0201 	and.w	r2, r3, #1
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d017      	beq.n	800131c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d123      	bne.n	8001370 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3208      	adds	r2, #8
 8001330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	220f      	movs	r2, #15
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	691a      	ldr	r2, [r3, #16]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	08da      	lsrs	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3208      	adds	r2, #8
 800136a:	69b9      	ldr	r1, [r7, #24]
 800136c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0203 	and.w	r2, r3, #3
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80b4 	beq.w	800151a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b60      	ldr	r3, [pc, #384]	; (8001538 <HAL_GPIO_Init+0x30c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a5f      	ldr	r2, [pc, #380]	; (8001538 <HAL_GPIO_Init+0x30c>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b5d      	ldr	r3, [pc, #372]	; (8001538 <HAL_GPIO_Init+0x30c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ce:	4a5b      	ldr	r2, [pc, #364]	; (800153c <HAL_GPIO_Init+0x310>)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	3302      	adds	r3, #2
 80013d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	220f      	movs	r2, #15
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a52      	ldr	r2, [pc, #328]	; (8001540 <HAL_GPIO_Init+0x314>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d02b      	beq.n	8001452 <HAL_GPIO_Init+0x226>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a51      	ldr	r2, [pc, #324]	; (8001544 <HAL_GPIO_Init+0x318>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d025      	beq.n	800144e <HAL_GPIO_Init+0x222>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a50      	ldr	r2, [pc, #320]	; (8001548 <HAL_GPIO_Init+0x31c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d01f      	beq.n	800144a <HAL_GPIO_Init+0x21e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4f      	ldr	r2, [pc, #316]	; (800154c <HAL_GPIO_Init+0x320>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d019      	beq.n	8001446 <HAL_GPIO_Init+0x21a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4e      	ldr	r2, [pc, #312]	; (8001550 <HAL_GPIO_Init+0x324>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0x216>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4d      	ldr	r2, [pc, #308]	; (8001554 <HAL_GPIO_Init+0x328>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00d      	beq.n	800143e <HAL_GPIO_Init+0x212>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <HAL_GPIO_Init+0x32c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d007      	beq.n	800143a <HAL_GPIO_Init+0x20e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4b      	ldr	r2, [pc, #300]	; (800155c <HAL_GPIO_Init+0x330>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d101      	bne.n	8001436 <HAL_GPIO_Init+0x20a>
 8001432:	2307      	movs	r3, #7
 8001434:	e00e      	b.n	8001454 <HAL_GPIO_Init+0x228>
 8001436:	2308      	movs	r3, #8
 8001438:	e00c      	b.n	8001454 <HAL_GPIO_Init+0x228>
 800143a:	2306      	movs	r3, #6
 800143c:	e00a      	b.n	8001454 <HAL_GPIO_Init+0x228>
 800143e:	2305      	movs	r3, #5
 8001440:	e008      	b.n	8001454 <HAL_GPIO_Init+0x228>
 8001442:	2304      	movs	r3, #4
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x228>
 8001446:	2303      	movs	r3, #3
 8001448:	e004      	b.n	8001454 <HAL_GPIO_Init+0x228>
 800144a:	2302      	movs	r3, #2
 800144c:	e002      	b.n	8001454 <HAL_GPIO_Init+0x228>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <HAL_GPIO_Init+0x228>
 8001452:	2300      	movs	r3, #0
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	f002 0203 	and.w	r2, r2, #3
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	4093      	lsls	r3, r2
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001464:	4935      	ldr	r1, [pc, #212]	; (800153c <HAL_GPIO_Init+0x310>)
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	3302      	adds	r3, #2
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_GPIO_Init+0x334>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001496:	4a32      	ldr	r2, [pc, #200]	; (8001560 <HAL_GPIO_Init+0x334>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <HAL_GPIO_Init+0x334>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014c0:	4a27      	ldr	r2, [pc, #156]	; (8001560 <HAL_GPIO_Init+0x334>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_GPIO_Init+0x334>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ea:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_GPIO_Init+0x334>)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_GPIO_Init+0x334>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <HAL_GPIO_Init+0x334>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3301      	adds	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	2b0f      	cmp	r3, #15
 8001524:	f67f ae90 	bls.w	8001248 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	40013800 	.word	0x40013800
 8001540:	40020000 	.word	0x40020000
 8001544:	40020400 	.word	0x40020400
 8001548:	40020800 	.word	0x40020800
 800154c:	40020c00 	.word	0x40020c00
 8001550:	40021000 	.word	0x40021000
 8001554:	40021400 	.word	0x40021400
 8001558:	40021800 	.word	0x40021800
 800155c:	40021c00 	.word	0x40021c00
 8001560:	40013c00 	.word	0x40013c00

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001580:	e003      	b.n	800158a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	041a      	lsls	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fa8a 	bl	8003ac6 <USB_GetMode>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	f040 80f6 	bne.w	80017a6 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 fa6e 	bl	8003aa0 <USB_ReadInterrupts>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80ec 	beq.w	80017a4 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fa65 	bl	8003aa0 <USB_ReadInterrupts>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015e0:	d104      	bne.n	80015ec <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015ea:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f002 fa55 	bl	8003aa0 <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001600:	d104      	bne.n	800160c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800160a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f002 fa45 	bl	8003aa0 <USB_ReadInterrupts>
 8001616:	4603      	mov	r3, r0
 8001618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800161c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001620:	d104      	bne.n	800162c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800162a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fa35 	bl	8003aa0 <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b02      	cmp	r3, #2
 800163e:	d103      	bne.n	8001648 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2202      	movs	r2, #2
 8001646:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f002 fa27 	bl	8003aa0 <USB_ReadInterrupts>
 8001652:	4603      	mov	r3, r0
 8001654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800165c:	d11c      	bne.n	8001698 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001666:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10f      	bne.n	8001698 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001678:	2110      	movs	r1, #16
 800167a:	6938      	ldr	r0, [r7, #16]
 800167c:	f002 f974 	bl	8003968 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001680:	6938      	ldr	r0, [r7, #16]
 8001682:	f002 f995 	bl	80039b0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2101      	movs	r1, #1
 800168c:	4618      	mov	r0, r3
 800168e:	f002 fa28 	bl	8003ae2 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f002 fccd 	bl	8004032 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f002 f9ff 	bl	8003aa0 <USB_ReadInterrupts>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ac:	d102      	bne.n	80016b4 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f001 f98e 	bl	80029d0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 f9f1 	bl	8003aa0 <USB_ReadInterrupts>
 80016be:	4603      	mov	r3, r0
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d106      	bne.n	80016d6 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f002 fc96 	bl	8003ffa <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2208      	movs	r2, #8
 80016d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 f9e0 	bl	8003aa0 <USB_ReadInterrupts>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	d101      	bne.n	80016ee <HAL_HCD_IRQHandler+0x158>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_HCD_IRQHandler+0x15a>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d012      	beq.n	800171a <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699a      	ldr	r2, [r3, #24]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0210 	bic.w	r2, r2, #16
 8001702:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f001 f891 	bl	800282c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699a      	ldr	r2, [r3, #24]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0210 	orr.w	r2, r2, #16
 8001718:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f002 f9be 	bl	8003aa0 <USB_ReadInterrupts>
 8001724:	4603      	mov	r3, r0
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800172e:	d13a      	bne.n	80017a6 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f002 fa0e 	bl	8003b56 <USB_HC_ReadInterrupt>
 800173a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e025      	b.n	800178e <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	fa22 f303 	lsr.w	r3, r2, r3
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d018      	beq.n	8001788 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4413      	add	r3, r2
 800175e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800176c:	d106      	bne.n	800177c <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	4619      	mov	r1, r3
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f836 	bl	80017e6 <HCD_HC_IN_IRQHandler>
 800177a:	e005      	b.n	8001788 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4619      	mov	r1, r3
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 fc51 	bl	800202a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	d3d4      	bcc.n	8001742 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	e000      	b.n	80017a6 <HAL_HCD_IRQHandler+0x210>
      return;
 80017a4:	bf00      	nop
    }
  }
}
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_HCD_Stop+0x16>
 80017be:	2302      	movs	r3, #2
 80017c0:	e00d      	b.n	80017de <HAL_HCD_Stop+0x32>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 faee 	bl	8003db0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	460b      	mov	r3, r1
 80017f0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	015a      	lsls	r2, r3, #5
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4413      	add	r3, r2
 8001808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b04      	cmp	r3, #4
 8001814:	d119      	bne.n	800184a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	015a      	lsls	r2, r3, #5
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4413      	add	r3, r2
 800181e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001822:	461a      	mov	r2, r3
 8001824:	2304      	movs	r3, #4
 8001826:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	015a      	lsls	r2, r3, #5
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4413      	add	r3, r2
 8001830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	0151      	lsls	r1, r2, #5
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	440a      	add	r2, r1
 800183e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	60d3      	str	r3, [r2, #12]
 8001848:	e101      	b.n	8001a4e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	015a      	lsls	r2, r3, #5
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4413      	add	r3, r2
 8001852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001860:	d12b      	bne.n	80018ba <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	015a      	lsls	r2, r3, #5
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4413      	add	r3, r2
 800186a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800186e:	461a      	mov	r2, r3
 8001870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001874:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	3361      	adds	r3, #97	; 0x61
 8001884:	2207      	movs	r2, #7
 8001886:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	015a      	lsls	r2, r3, #5
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4413      	add	r3, r2
 8001890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	0151      	lsls	r1, r2, #5
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	440a      	add	r2, r1
 800189e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f002 f960 	bl	8003b78 <USB_HC_Halt>
 80018b8:	e0c9      	b.n	8001a4e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	015a      	lsls	r2, r3, #5
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4413      	add	r3, r2
 80018c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d109      	bne.n	80018e4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	015a      	lsls	r2, r3, #5
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4413      	add	r3, r2
 80018d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018dc:	461a      	mov	r2, r3
 80018de:	2320      	movs	r3, #32
 80018e0:	6093      	str	r3, [r2, #8]
 80018e2:	e0b4      	b.n	8001a4e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	015a      	lsls	r2, r3, #5
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d133      	bne.n	8001962 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4413      	add	r3, r2
 8001902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	0151      	lsls	r1, r2, #5
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	440a      	add	r2, r1
 8001910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	212c      	movs	r1, #44	; 0x2c
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	4413      	add	r3, r2
 8001926:	3361      	adds	r3, #97	; 0x61
 8001928:	2205      	movs	r2, #5
 800192a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	015a      	lsls	r2, r3, #5
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4413      	add	r3, r2
 8001934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001938:	461a      	mov	r2, r3
 800193a:	2310      	movs	r3, #16
 800193c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4413      	add	r3, r2
 8001946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194a:	461a      	mov	r2, r3
 800194c:	2308      	movs	r3, #8
 800194e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f002 f90c 	bl	8003b78 <USB_HC_Halt>
 8001960:	e075      	b.n	8001a4e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	015a      	lsls	r2, r3, #5
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4413      	add	r3, r2
 800196a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001978:	d134      	bne.n	80019e4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4413      	add	r3, r2
 8001982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	0151      	lsls	r1, r2, #5
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	440a      	add	r2, r1
 8001990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	212c      	movs	r1, #44	; 0x2c
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	3361      	adds	r3, #97	; 0x61
 80019a8:	2208      	movs	r2, #8
 80019aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	015a      	lsls	r2, r3, #5
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4413      	add	r3, r2
 80019b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b8:	461a      	mov	r2, r3
 80019ba:	2310      	movs	r3, #16
 80019bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	015a      	lsls	r2, r3, #5
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4413      	add	r3, r2
 80019c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ca:	461a      	mov	r2, r3
 80019cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 f8cb 	bl	8003b78 <USB_HC_Halt>
 80019e2:	e034      	b.n	8001a4e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	015a      	lsls	r2, r3, #5
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f6:	2b80      	cmp	r3, #128	; 0x80
 80019f8:	d129      	bne.n	8001a4e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	0151      	lsls	r1, r2, #5
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	440a      	add	r2, r1
 8001a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3361      	adds	r3, #97	; 0x61
 8001a28:	2206      	movs	r2, #6
 8001a2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 f89e 	bl	8003b78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	015a      	lsls	r2, r3, #5
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a64:	d122      	bne.n	8001aac <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	015a      	lsls	r2, r3, #5
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	0151      	lsls	r1, r2, #5
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	440a      	add	r2, r1
 8001a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 f871 	bl	8003b78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	015a      	lsls	r2, r3, #5
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001aaa:	e2ba      	b.n	8002022 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	015a      	lsls	r2, r3, #5
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	f040 811b 	bne.w	8001cfa <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d019      	beq.n	8001b00 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	212c      	movs	r1, #44	; 0x2c
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3348      	adds	r3, #72	; 0x48
 8001ada:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	0159      	lsls	r1, r3, #5
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001aee:	1ad2      	subs	r2, r2, r3
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	202c      	movs	r0, #44	; 0x2c
 8001af6:	fb00 f303 	mul.w	r3, r0, r3
 8001afa:	440b      	add	r3, r1
 8001afc:	3350      	adds	r3, #80	; 0x50
 8001afe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3361      	adds	r3, #97	; 0x61
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	212c      	movs	r1, #44	; 0x2c
 8001b18:	fb01 f303 	mul.w	r3, r1, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	335c      	adds	r3, #92	; 0x5c
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	015a      	lsls	r2, r3, #5
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b30:	461a      	mov	r2, r3
 8001b32:	2301      	movs	r3, #1
 8001b34:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	212c      	movs	r1, #44	; 0x2c
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	333f      	adds	r3, #63	; 0x3f
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d009      	beq.n	8001b5e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	212c      	movs	r1, #44	; 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	333f      	adds	r3, #63	; 0x3f
 8001b58:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d121      	bne.n	8001ba2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	015a      	lsls	r2, r3, #5
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4413      	add	r3, r2
 8001b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	0151      	lsls	r1, r2, #5
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	440a      	add	r2, r1
 8001b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 fff5 	bl	8003b78 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	015a      	lsls	r2, r3, #5
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	6093      	str	r3, [r2, #8]
 8001ba0:	e066      	b.n	8001c70 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	212c      	movs	r1, #44	; 0x2c
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	333f      	adds	r3, #63	; 0x3f
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d127      	bne.n	8001c06 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	015a      	lsls	r2, r3, #5
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	0151      	lsls	r1, r2, #5
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	440a      	add	r2, r1
 8001bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bd4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	212c      	movs	r1, #44	; 0x2c
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	3360      	adds	r3, #96	; 0x60
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	b2d9      	uxtb	r1, r3
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	202c      	movs	r0, #44	; 0x2c
 8001bf2:	fb00 f303 	mul.w	r3, r0, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3360      	adds	r3, #96	; 0x60
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f002 fa25 	bl	800404e <HAL_HCD_HC_NotifyURBChange_Callback>
 8001c04:	e034      	b.n	8001c70 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	212c      	movs	r1, #44	; 0x2c
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	333f      	adds	r3, #63	; 0x3f
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d12a      	bne.n	8001c70 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	212c      	movs	r1, #44	; 0x2c
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	3360      	adds	r3, #96	; 0x60
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	212c      	movs	r1, #44	; 0x2c
 8001c32:	fb01 f303 	mul.w	r3, r1, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	3354      	adds	r3, #84	; 0x54
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	f083 0301 	eor.w	r3, r3, #1
 8001c40:	b2d8      	uxtb	r0, r3
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	212c      	movs	r1, #44	; 0x2c
 8001c48:	fb01 f303 	mul.w	r3, r1, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3354      	adds	r3, #84	; 0x54
 8001c50:	4602      	mov	r2, r0
 8001c52:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	b2d9      	uxtb	r1, r3
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	202c      	movs	r0, #44	; 0x2c
 8001c5e:	fb00 f303 	mul.w	r3, r0, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3360      	adds	r3, #96	; 0x60
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f002 f9ef 	bl	800404e <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d12b      	bne.n	8001cd0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	3348      	adds	r3, #72	; 0x48
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	202c      	movs	r0, #44	; 0x2c
 8001c8e:	fb00 f202 	mul.w	r2, r0, r2
 8001c92:	440a      	add	r2, r1
 8001c94:	3240      	adds	r2, #64	; 0x40
 8001c96:	8812      	ldrh	r2, [r2, #0]
 8001c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 81be 	beq.w	8002022 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	212c      	movs	r1, #44	; 0x2c
 8001cac:	fb01 f303 	mul.w	r3, r1, r3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3354      	adds	r3, #84	; 0x54
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	f083 0301 	eor.w	r3, r3, #1
 8001cba:	b2d8      	uxtb	r0, r3
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3354      	adds	r3, #84	; 0x54
 8001cca:	4602      	mov	r2, r0
 8001ccc:	701a      	strb	r2, [r3, #0]
}
 8001cce:	e1a8      	b.n	8002022 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3354      	adds	r3, #84	; 0x54
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	f083 0301 	eor.w	r3, r3, #1
 8001ce4:	b2d8      	uxtb	r0, r3
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	212c      	movs	r1, #44	; 0x2c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3354      	adds	r3, #84	; 0x54
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	701a      	strb	r2, [r3, #0]
}
 8001cf8:	e193      	b.n	8002022 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	f040 8106 	bne.w	8001f1e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	0151      	lsls	r1, r2, #5
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	440a      	add	r2, r1
 8001d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d2c:	f023 0302 	bic.w	r3, r3, #2
 8001d30:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3361      	adds	r3, #97	; 0x61
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d109      	bne.n	8001d5a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	212c      	movs	r1, #44	; 0x2c
 8001d4c:	fb01 f303 	mul.w	r3, r1, r3
 8001d50:	4413      	add	r3, r2
 8001d52:	3360      	adds	r3, #96	; 0x60
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
 8001d58:	e0c9      	b.n	8001eee <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	212c      	movs	r1, #44	; 0x2c
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	3361      	adds	r3, #97	; 0x61
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	d109      	bne.n	8001d82 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	212c      	movs	r1, #44	; 0x2c
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	3360      	adds	r3, #96	; 0x60
 8001d7c:	2205      	movs	r2, #5
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	e0b5      	b.n	8001eee <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3361      	adds	r3, #97	; 0x61
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d009      	beq.n	8001daa <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	3361      	adds	r3, #97	; 0x61
 8001da4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d150      	bne.n	8001e4c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	212c      	movs	r1, #44	; 0x2c
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	335c      	adds	r3, #92	; 0x5c
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	202c      	movs	r0, #44	; 0x2c
 8001dc2:	fb00 f303 	mul.w	r3, r0, r3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	335c      	adds	r3, #92	; 0x5c
 8001dca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	212c      	movs	r1, #44	; 0x2c
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	335c      	adds	r3, #92	; 0x5c
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d912      	bls.n	8001e06 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	212c      	movs	r1, #44	; 0x2c
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	335c      	adds	r3, #92	; 0x5c
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3360      	adds	r3, #96	; 0x60
 8001e00:	2204      	movs	r2, #4
 8001e02:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e04:	e073      	b.n	8001eee <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	212c      	movs	r1, #44	; 0x2c
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	3360      	adds	r3, #96	; 0x60
 8001e14:	2202      	movs	r2, #2
 8001e16:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e2e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e36:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e44:	461a      	mov	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e4a:	e050      	b.n	8001eee <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	3361      	adds	r3, #97	; 0x61
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d122      	bne.n	8001ea6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	212c      	movs	r1, #44	; 0x2c
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3360      	adds	r3, #96	; 0x60
 8001e6e:	2202      	movs	r2, #2
 8001e70:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e88:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e90:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	e023      	b.n	8001eee <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3361      	adds	r3, #97	; 0x61
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b07      	cmp	r3, #7
 8001eb8:	d119      	bne.n	8001eee <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	212c      	movs	r1, #44	; 0x2c
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	335c      	adds	r3, #92	; 0x5c
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	202c      	movs	r0, #44	; 0x2c
 8001ed2:	fb00 f303 	mul.w	r3, r0, r3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	335c      	adds	r3, #92	; 0x5c
 8001eda:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	212c      	movs	r1, #44	; 0x2c
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3360      	adds	r3, #96	; 0x60
 8001eea:	2204      	movs	r2, #4
 8001eec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efa:	461a      	mov	r2, r3
 8001efc:	2302      	movs	r3, #2
 8001efe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	b2d9      	uxtb	r1, r3
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	202c      	movs	r0, #44	; 0x2c
 8001f0a:	fb00 f303 	mul.w	r3, r0, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	3360      	adds	r3, #96	; 0x60
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f002 f899 	bl	800404e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001f1c:	e081      	b.n	8002022 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d176      	bne.n	8002022 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	212c      	movs	r1, #44	; 0x2c
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	333f      	adds	r3, #63	; 0x3f
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d121      	bne.n	8001f8c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	212c      	movs	r1, #44	; 0x2c
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	335c      	adds	r3, #92	; 0x5c
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	0151      	lsls	r1, r2, #5
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	440a      	add	r2, r1
 8001f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fdf7 	bl	8003b78 <USB_HC_Halt>
 8001f8a:	e041      	b.n	8002010 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	212c      	movs	r1, #44	; 0x2c
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	333f      	adds	r3, #63	; 0x3f
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d009      	beq.n	8001fb4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	212c      	movs	r1, #44	; 0x2c
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	333f      	adds	r3, #63	; 0x3f
 8001fae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d12d      	bne.n	8002010 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	335c      	adds	r3, #92	; 0x5c
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d120      	bne.n	8002010 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	212c      	movs	r1, #44	; 0x2c
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	3361      	adds	r3, #97	; 0x61
 8001fdc:	2203      	movs	r2, #3
 8001fde:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	0151      	lsls	r1, r2, #5
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	440a      	add	r2, r1
 8001ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f001 fdb4 	bl	8003b78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201c:	461a      	mov	r2, r3
 800201e:	2310      	movs	r3, #16
 8002020:	6093      	str	r3, [r2, #8]
}
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b088      	sub	sp, #32
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b04      	cmp	r3, #4
 8002058:	d119      	bne.n	800208e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4413      	add	r3, r2
 8002062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002066:	461a      	mov	r2, r3
 8002068:	2304      	movs	r3, #4
 800206a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	0151      	lsls	r1, r2, #5
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	440a      	add	r2, r1
 8002082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002086:	f043 0302 	orr.w	r3, r3, #2
 800208a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800208c:	e3ca      	b.n	8002824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d13e      	bne.n	8002122 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	461a      	mov	r2, r3
 80020b2:	2320      	movs	r3, #32
 80020b4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	333d      	adds	r3, #61	; 0x3d
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	f040 83ac 	bne.w	8002824 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	212c      	movs	r1, #44	; 0x2c
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	333d      	adds	r3, #61	; 0x3d
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	212c      	movs	r1, #44	; 0x2c
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	3360      	adds	r3, #96	; 0x60
 80020ec:	2202      	movs	r2, #2
 80020ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	0151      	lsls	r1, r2, #5
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	440a      	add	r2, r1
 8002106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f001 fd2c 	bl	8003b78 <USB_HC_Halt>
}
 8002120:	e380      	b.n	8002824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	4413      	add	r3, r2
 800212a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002138:	d122      	bne.n	8002180 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4413      	add	r3, r2
 8002142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	0151      	lsls	r1, r2, #5
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	440a      	add	r2, r1
 8002150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f001 fd07 	bl	8003b78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4413      	add	r3, r2
 8002172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002176:	461a      	mov	r2, r3
 8002178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217c:	6093      	str	r3, [r2, #8]
}
 800217e:	e351      	b.n	8002824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d150      	bne.n	8002238 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	212c      	movs	r1, #44	; 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	335c      	adds	r3, #92	; 0x5c
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ba:	2b40      	cmp	r3, #64	; 0x40
 80021bc:	d111      	bne.n	80021e2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	333d      	adds	r3, #61	; 0x3d
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021dc:	461a      	mov	r2, r3
 80021de:	2340      	movs	r3, #64	; 0x40
 80021e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	0151      	lsls	r1, r2, #5
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	440a      	add	r2, r1
 80021f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f001 fcb3 	bl	8003b78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	4413      	add	r3, r2
 800221a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221e:	461a      	mov	r2, r3
 8002220:	2301      	movs	r3, #1
 8002222:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	212c      	movs	r1, #44	; 0x2c
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	4413      	add	r3, r2
 8002230:	3361      	adds	r3, #97	; 0x61
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
}
 8002236:	e2f5      	b.n	8002824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224a:	2b40      	cmp	r3, #64	; 0x40
 800224c:	d13c      	bne.n	80022c8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	3361      	adds	r3, #97	; 0x61
 800225c:	2204      	movs	r2, #4
 800225e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	212c      	movs	r1, #44	; 0x2c
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	333d      	adds	r3, #61	; 0x3d
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	335c      	adds	r3, #92	; 0x5c
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	0151      	lsls	r1, r2, #5
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	440a      	add	r2, r1
 800229a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800229e:	f043 0302 	orr.w	r3, r3, #2
 80022a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f001 fc62 	bl	8003b78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	461a      	mov	r2, r3
 80022c2:	2340      	movs	r3, #64	; 0x40
 80022c4:	6093      	str	r3, [r2, #8]
}
 80022c6:	e2ad      	b.n	8002824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d12a      	bne.n	8002334 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ea:	461a      	mov	r2, r3
 80022ec:	2308      	movs	r3, #8
 80022ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	0151      	lsls	r1, r2, #5
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	440a      	add	r2, r1
 8002306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800230a:	f043 0302 	orr.w	r3, r3, #2
 800230e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f001 fc2c 	bl	8003b78 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	3361      	adds	r3, #97	; 0x61
 800232e:	2205      	movs	r2, #5
 8002330:	701a      	strb	r2, [r3, #0]
}
 8002332:	e277      	b.n	8002824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b10      	cmp	r3, #16
 8002348:	d150      	bne.n	80023ec <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	335c      	adds	r3, #92	; 0x5c
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	3361      	adds	r3, #97	; 0x61
 800236a:	2203      	movs	r2, #3
 800236c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	333d      	adds	r3, #61	; 0x3d
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d112      	bne.n	80023a8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	333c      	adds	r3, #60	; 0x3c
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d108      	bne.n	80023a8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	333d      	adds	r3, #61	; 0x3d
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	0151      	lsls	r1, r2, #5
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	440a      	add	r2, r1
 80023be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 fbd0 	bl	8003b78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	461a      	mov	r2, r3
 80023e6:	2310      	movs	r3, #16
 80023e8:	6093      	str	r3, [r2, #8]
}
 80023ea:	e21b      	b.n	8002824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fe:	2b80      	cmp	r3, #128	; 0x80
 8002400:	d174      	bne.n	80024ec <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d121      	bne.n	800244e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	3361      	adds	r3, #97	; 0x61
 8002418:	2206      	movs	r2, #6
 800241a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	0151      	lsls	r1, r2, #5
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	440a      	add	r2, r1
 8002432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f001 fb96 	bl	8003b78 <USB_HC_Halt>
 800244c:	e044      	b.n	80024d8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	335c      	adds	r3, #92	; 0x5c
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	202c      	movs	r0, #44	; 0x2c
 8002466:	fb00 f303 	mul.w	r3, r0, r3
 800246a:	440b      	add	r3, r1
 800246c:	335c      	adds	r3, #92	; 0x5c
 800246e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	335c      	adds	r3, #92	; 0x5c
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d920      	bls.n	80024c6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	335c      	adds	r3, #92	; 0x5c
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3360      	adds	r3, #96	; 0x60
 80024a4:	2204      	movs	r2, #4
 80024a6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	b2d9      	uxtb	r1, r3
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	202c      	movs	r0, #44	; 0x2c
 80024b2:	fb00 f303 	mul.w	r3, r0, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	3360      	adds	r3, #96	; 0x60
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f001 fdc5 	bl	800404e <HAL_HCD_HC_NotifyURBChange_Callback>
 80024c4:	e008      	b.n	80024d8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3360      	adds	r3, #96	; 0x60
 80024d4:	2202      	movs	r2, #2
 80024d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	461a      	mov	r2, r3
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	6093      	str	r3, [r2, #8]
}
 80024ea:	e19b      	b.n	8002824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002502:	d134      	bne.n	800256e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	0151      	lsls	r1, r2, #5
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	440a      	add	r2, r1
 800251a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800251e:	f043 0302 	orr.w	r3, r3, #2
 8002522:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fb22 	bl	8003b78 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	461a      	mov	r2, r3
 8002542:	2310      	movs	r3, #16
 8002544:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	461a      	mov	r2, r3
 8002554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002558:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	3361      	adds	r3, #97	; 0x61
 8002568:	2208      	movs	r2, #8
 800256a:	701a      	strb	r2, [r3, #0]
}
 800256c:	e15a      	b.n	8002824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b02      	cmp	r3, #2
 8002582:	f040 814f 	bne.w	8002824 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	0151      	lsls	r1, r2, #5
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	440a      	add	r2, r1
 800259c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a0:	f023 0302 	bic.w	r3, r3, #2
 80025a4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3361      	adds	r3, #97	; 0x61
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d17d      	bne.n	80026b6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	3360      	adds	r3, #96	; 0x60
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	333f      	adds	r3, #63	; 0x3f
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d00a      	beq.n	80025f6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	333f      	adds	r3, #63	; 0x3f
 80025ee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	f040 8100 	bne.w	80027f6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d113      	bne.n	8002626 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	3355      	adds	r3, #85	; 0x55
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2d8      	uxtb	r0, r3
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	212c      	movs	r1, #44	; 0x2c
 800261a:	fb01 f303 	mul.w	r3, r1, r3
 800261e:	4413      	add	r3, r2
 8002620:	3355      	adds	r3, #85	; 0x55
 8002622:	4602      	mov	r2, r0
 8002624:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b01      	cmp	r3, #1
 800262c:	f040 80e3 	bne.w	80027f6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	212c      	movs	r1, #44	; 0x2c
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4413      	add	r3, r2
 800263c:	334c      	adds	r3, #76	; 0x4c
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80d8 	beq.w	80027f6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	334c      	adds	r3, #76	; 0x4c
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	202c      	movs	r0, #44	; 0x2c
 800265c:	fb00 f202 	mul.w	r2, r0, r2
 8002660:	440a      	add	r2, r1
 8002662:	3240      	adds	r2, #64	; 0x40
 8002664:	8812      	ldrh	r2, [r2, #0]
 8002666:	4413      	add	r3, r2
 8002668:	3b01      	subs	r3, #1
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	202c      	movs	r0, #44	; 0x2c
 8002670:	fb00 f202 	mul.w	r2, r0, r2
 8002674:	440a      	add	r2, r1
 8002676:	3240      	adds	r2, #64	; 0x40
 8002678:	8812      	ldrh	r2, [r2, #0]
 800267a:	fbb3 f3f2 	udiv	r3, r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80b5 	beq.w	80027f6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	3355      	adds	r3, #85	; 0x55
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f083 0301 	eor.w	r3, r3, #1
 80026a0:	b2d8      	uxtb	r0, r3
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	3355      	adds	r3, #85	; 0x55
 80026b0:	4602      	mov	r2, r0
 80026b2:	701a      	strb	r2, [r3, #0]
 80026b4:	e09f      	b.n	80027f6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	3361      	adds	r3, #97	; 0x61
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d109      	bne.n	80026de <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	3360      	adds	r3, #96	; 0x60
 80026d8:	2202      	movs	r2, #2
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	e08b      	b.n	80027f6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	3361      	adds	r3, #97	; 0x61
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d109      	bne.n	8002706 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	3360      	adds	r3, #96	; 0x60
 8002700:	2202      	movs	r2, #2
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e077      	b.n	80027f6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	3361      	adds	r3, #97	; 0x61
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b05      	cmp	r3, #5
 8002718:	d109      	bne.n	800272e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	212c      	movs	r1, #44	; 0x2c
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	4413      	add	r3, r2
 8002726:	3360      	adds	r3, #96	; 0x60
 8002728:	2205      	movs	r2, #5
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e063      	b.n	80027f6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	212c      	movs	r1, #44	; 0x2c
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	4413      	add	r3, r2
 800273a:	3361      	adds	r3, #97	; 0x61
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b06      	cmp	r3, #6
 8002740:	d009      	beq.n	8002756 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3361      	adds	r3, #97	; 0x61
 8002750:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002752:	2b08      	cmp	r3, #8
 8002754:	d14f      	bne.n	80027f6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	335c      	adds	r3, #92	; 0x5c
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	202c      	movs	r0, #44	; 0x2c
 800276e:	fb00 f303 	mul.w	r3, r0, r3
 8002772:	440b      	add	r3, r1
 8002774:	335c      	adds	r3, #92	; 0x5c
 8002776:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	335c      	adds	r3, #92	; 0x5c
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d912      	bls.n	80027b2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	335c      	adds	r3, #92	; 0x5c
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	3360      	adds	r3, #96	; 0x60
 80027ac:	2204      	movs	r2, #4
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	e021      	b.n	80027f6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	3360      	adds	r3, #96	; 0x60
 80027c0:	2202      	movs	r2, #2
 80027c2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027da:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027e2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	461a      	mov	r2, r3
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	461a      	mov	r2, r3
 8002804:	2302      	movs	r3, #2
 8002806:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	b2d9      	uxtb	r1, r3
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	202c      	movs	r0, #44	; 0x2c
 8002812:	fb00 f303 	mul.w	r3, r0, r3
 8002816:	4413      	add	r3, r2
 8002818:	3360      	adds	r3, #96	; 0x60
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f001 fc15 	bl	800404e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002824:	bf00      	nop
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	0c5b      	lsrs	r3, r3, #17
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002860:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d004      	beq.n	8002872 <HCD_RXQLVL_IRQHandler+0x46>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b05      	cmp	r3, #5
 800286c:	f000 80a9 	beq.w	80029c2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002870:	e0aa      	b.n	80029c8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80a6 	beq.w	80029c6 <HCD_RXQLVL_IRQHandler+0x19a>
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	3344      	adds	r3, #68	; 0x44
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 809b 	beq.w	80029c6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	3350      	adds	r3, #80	; 0x50
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	441a      	add	r2, r3
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	202c      	movs	r0, #44	; 0x2c
 80028aa:	fb00 f303 	mul.w	r3, r0, r3
 80028ae:	440b      	add	r3, r1
 80028b0:	334c      	adds	r3, #76	; 0x4c
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d87a      	bhi.n	80029ae <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3344      	adds	r3, #68	; 0x44
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	b292      	uxth	r2, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	f001 f88d 	bl	80039f0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	3344      	adds	r3, #68	; 0x44
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	441a      	add	r2, r3
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	202c      	movs	r0, #44	; 0x2c
 80028f0:	fb00 f303 	mul.w	r3, r0, r3
 80028f4:	440b      	add	r3, r1
 80028f6:	3344      	adds	r3, #68	; 0x44
 80028f8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	212c      	movs	r1, #44	; 0x2c
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	3350      	adds	r3, #80	; 0x50
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	441a      	add	r2, r3
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	202c      	movs	r0, #44	; 0x2c
 8002914:	fb00 f303 	mul.w	r3, r0, r3
 8002918:	440b      	add	r3, r1
 800291a:	3350      	adds	r3, #80	; 0x50
 800291c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	4413      	add	r3, r2
 8002926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	0cdb      	lsrs	r3, r3, #19
 800292e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002932:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	212c      	movs	r1, #44	; 0x2c
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	4413      	add	r3, r2
 8002940:	3340      	adds	r3, #64	; 0x40
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4293      	cmp	r3, r2
 800294a:	d13c      	bne.n	80029c6 <HCD_RXQLVL_IRQHandler+0x19a>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d039      	beq.n	80029c6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002968:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002970:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	461a      	mov	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3354      	adds	r3, #84	; 0x54
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	f083 0301 	eor.w	r3, r3, #1
 8002998:	b2d8      	uxtb	r0, r3
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3354      	adds	r3, #84	; 0x54
 80029a8:	4602      	mov	r2, r0
 80029aa:	701a      	strb	r2, [r3, #0]
      break;
 80029ac:	e00b      	b.n	80029c6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3360      	adds	r3, #96	; 0x60
 80029bc:	2204      	movs	r2, #4
 80029be:	701a      	strb	r2, [r3, #0]
      break;
 80029c0:	e001      	b.n	80029c6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80029c6:	bf00      	nop
  }
}
 80029c8:	bf00      	nop
 80029ca:	3728      	adds	r7, #40	; 0x28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80029fc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d10b      	bne.n	8002a20 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d102      	bne.n	8002a18 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f001 faff 	bl	8004016 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f043 0302 	orr.w	r3, r3, #2
 8002a1e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d132      	bne.n	8002a90 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f043 0308 	orr.w	r3, r3, #8
 8002a30:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d126      	bne.n	8002a8a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d113      	bne.n	8002a6c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002a4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a4e:	d106      	bne.n	8002a5e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2102      	movs	r1, #2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f001 f843 	bl	8003ae2 <USB_InitFSLSPClkSel>
 8002a5c:	e011      	b.n	8002a82 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2101      	movs	r1, #1
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 f83c 	bl	8003ae2 <USB_InitFSLSPClkSel>
 8002a6a:	e00a      	b.n	8002a82 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d106      	bne.n	8002a82 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002a80:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f001 faf1 	bl	800406a <HAL_HCD_PortEnabled_Callback>
 8002a88:	e002      	b.n	8002a90 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f001 fafb 	bl	8004086 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d103      	bne.n	8002aa2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f043 0320 	orr.w	r3, r3, #32
 8002aa0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	6013      	str	r3, [r2, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e264      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d075      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ad6:	4ba3      	ldr	r3, [pc, #652]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d00c      	beq.n	8002afc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae2:	4ba0      	ldr	r3, [pc, #640]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d112      	bne.n	8002b14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aee:	4b9d      	ldr	r3, [pc, #628]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afa:	d10b      	bne.n	8002b14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	4b99      	ldr	r3, [pc, #612]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d05b      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x108>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d157      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e23f      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1c:	d106      	bne.n	8002b2c <HAL_RCC_OscConfig+0x74>
 8002b1e:	4b91      	ldr	r3, [pc, #580]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a90      	ldr	r2, [pc, #576]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e01d      	b.n	8002b68 <HAL_RCC_OscConfig+0xb0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x98>
 8002b36:	4b8b      	ldr	r3, [pc, #556]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a8a      	ldr	r2, [pc, #552]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b88      	ldr	r3, [pc, #544]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a87      	ldr	r2, [pc, #540]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_OscConfig+0xb0>
 8002b50:	4b84      	ldr	r3, [pc, #528]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a83      	ldr	r2, [pc, #524]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b81      	ldr	r3, [pc, #516]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a80      	ldr	r2, [pc, #512]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fa46 	bl	8001000 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe fa42 	bl	8001000 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e204      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b76      	ldr	r3, [pc, #472]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0xc0>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fe fa32 	bl	8001000 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7fe fa2e 	bl	8001000 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e1f0      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb2:	4b6c      	ldr	r3, [pc, #432]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0xe8>
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d063      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bce:	4b65      	ldr	r3, [pc, #404]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bda:	4b62      	ldr	r3, [pc, #392]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d11c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be6:	4b5f      	ldr	r3, [pc, #380]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d116      	bne.n	8002c20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf2:	4b5c      	ldr	r3, [pc, #368]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_RCC_OscConfig+0x152>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e1c4      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0a:	4b56      	ldr	r3, [pc, #344]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4952      	ldr	r1, [pc, #328]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	e03a      	b.n	8002c96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d020      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c28:	4b4f      	ldr	r3, [pc, #316]	; (8002d68 <HAL_RCC_OscConfig+0x2b0>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2e:	f7fe f9e7 	bl	8001000 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c36:	f7fe f9e3 	bl	8001000 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e1a5      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c48:	4b46      	ldr	r3, [pc, #280]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c54:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4940      	ldr	r1, [pc, #256]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]
 8002c68:	e015      	b.n	8002c96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c6a:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <HAL_RCC_OscConfig+0x2b0>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe f9c6 	bl	8001000 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c78:	f7fe f9c2 	bl	8001000 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e184      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8a:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d030      	beq.n	8002d04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002caa:	4b30      	ldr	r3, [pc, #192]	; (8002d6c <HAL_RCC_OscConfig+0x2b4>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fe f9a6 	bl	8001000 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7fe f9a2 	bl	8001000 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e164      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cca:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x200>
 8002cd6:	e015      	b.n	8002d04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_RCC_OscConfig+0x2b4>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cde:	f7fe f98f 	bl	8001000 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce6:	f7fe f98b 	bl	8001000 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e14d      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80a0 	beq.w	8002e52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d12:	2300      	movs	r3, #0
 8002d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d16:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10f      	bne.n	8002d42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	6413      	str	r3, [r2, #64]	; 0x40
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_OscConfig+0x2b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d121      	bne.n	8002d92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <HAL_RCC_OscConfig+0x2b8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <HAL_RCC_OscConfig+0x2b8>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5a:	f7fe f951 	bl	8001000 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	e011      	b.n	8002d86 <HAL_RCC_OscConfig+0x2ce>
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
 8002d68:	42470000 	.word	0x42470000
 8002d6c:	42470e80 	.word	0x42470e80
 8002d70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d74:	f7fe f944 	bl	8001000 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e106      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d86:	4b85      	ldr	r3, [pc, #532]	; (8002f9c <HAL_RCC_OscConfig+0x4e4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d106      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2f0>
 8002d9a:	4b81      	ldr	r3, [pc, #516]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	4a80      	ldr	r2, [pc, #512]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6713      	str	r3, [r2, #112]	; 0x70
 8002da6:	e01c      	b.n	8002de2 <HAL_RCC_OscConfig+0x32a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d10c      	bne.n	8002dca <HAL_RCC_OscConfig+0x312>
 8002db0:	4b7b      	ldr	r3, [pc, #492]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	4a7a      	ldr	r2, [pc, #488]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002db6:	f043 0304 	orr.w	r3, r3, #4
 8002dba:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbc:	4b78      	ldr	r3, [pc, #480]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc0:	4a77      	ldr	r2, [pc, #476]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc8:	e00b      	b.n	8002de2 <HAL_RCC_OscConfig+0x32a>
 8002dca:	4b75      	ldr	r3, [pc, #468]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4a74      	ldr	r2, [pc, #464]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd6:	4b72      	ldr	r3, [pc, #456]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	4a71      	ldr	r2, [pc, #452]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d015      	beq.n	8002e16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7fe f909 	bl	8001000 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7fe f905 	bl	8001000 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e0c5      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e08:	4b65      	ldr	r3, [pc, #404]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0ee      	beq.n	8002df2 <HAL_RCC_OscConfig+0x33a>
 8002e14:	e014      	b.n	8002e40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e16:	f7fe f8f3 	bl	8001000 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe f8ef 	bl	8001000 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0af      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e34:	4b5a      	ldr	r3, [pc, #360]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ee      	bne.n	8002e1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e40:	7dfb      	ldrb	r3, [r7, #23]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d105      	bne.n	8002e52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e46:	4b56      	ldr	r3, [pc, #344]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a55      	ldr	r2, [pc, #340]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 809b 	beq.w	8002f92 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e5c:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d05c      	beq.n	8002f22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d141      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e70:	4b4c      	ldr	r3, [pc, #304]	; (8002fa4 <HAL_RCC_OscConfig+0x4ec>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fe f8c3 	bl	8001000 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fe f8bf 	bl	8001000 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e081      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e90:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	019b      	lsls	r3, r3, #6
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	085b      	lsrs	r3, r3, #1
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	061b      	lsls	r3, r3, #24
 8002ec0:	4937      	ldr	r1, [pc, #220]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec6:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_RCC_OscConfig+0x4ec>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe f898 	bl	8001000 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed4:	f7fe f894 	bl	8001000 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e056      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee6:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x41c>
 8002ef2:	e04e      	b.n	8002f92 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef4:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_RCC_OscConfig+0x4ec>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7fe f881 	bl	8001000 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fe f87d 	bl	8001000 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e03f      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f14:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x44a>
 8002f20:	e037      	b.n	8002f92 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e032      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <HAL_RCC_OscConfig+0x4e8>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d028      	beq.n	8002f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d121      	bne.n	8002f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d11a      	bne.n	8002f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f5e:	4013      	ands	r3, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f64:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d111      	bne.n	8002f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40007000 	.word	0x40007000
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	42470060 	.word	0x42470060

08002fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0cc      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b68      	ldr	r3, [pc, #416]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d90c      	bls.n	8002fe4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b65      	ldr	r3, [pc, #404]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	4b63      	ldr	r3, [pc, #396]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0b8      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ffc:	4b59      	ldr	r3, [pc, #356]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a58      	ldr	r2, [pc, #352]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003006:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003014:	4b53      	ldr	r3, [pc, #332]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4a52      	ldr	r2, [pc, #328]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800301e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003020:	4b50      	ldr	r3, [pc, #320]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	494d      	ldr	r1, [pc, #308]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d044      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d119      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e07f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d003      	beq.n	8003066 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003062:	2b03      	cmp	r3, #3
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b3f      	ldr	r3, [pc, #252]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e06f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003076:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e067      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003086:	4b37      	ldr	r3, [pc, #220]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f023 0203 	bic.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4934      	ldr	r1, [pc, #208]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003098:	f7fd ffb2 	bl	8001000 <HAL_GetTick>
 800309c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a0:	f7fd ffae 	bl	8001000 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e04f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b6:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 020c 	and.w	r2, r3, #12
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d1eb      	bne.n	80030a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c8:	4b25      	ldr	r3, [pc, #148]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d20c      	bcs.n	80030f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e032      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4916      	ldr	r1, [pc, #88]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	490e      	ldr	r1, [pc, #56]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800312e:	f000 f821 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8003132:	4602      	mov	r2, r0
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	490a      	ldr	r1, [pc, #40]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	5ccb      	ldrb	r3, [r1, r3]
 8003142:	fa22 f303 	lsr.w	r3, r2, r3
 8003146:	4a09      	ldr	r2, [pc, #36]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_ClockConfig+0x1c8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd ff12 	bl	8000f78 <HAL_InitTick>

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023c00 	.word	0x40023c00
 8003164:	40023800 	.word	0x40023800
 8003168:	080041a0 	.word	0x080041a0
 800316c:	20000020 	.word	0x20000020
 8003170:	20000024 	.word	0x20000024

08003174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003174:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	2300      	movs	r3, #0
 8003186:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800318c:	4b67      	ldr	r3, [pc, #412]	; (800332c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b08      	cmp	r3, #8
 8003196:	d00d      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003198:	2b08      	cmp	r3, #8
 800319a:	f200 80bd 	bhi.w	8003318 <HAL_RCC_GetSysClockFreq+0x1a4>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x34>
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_GetSysClockFreq+0x3a>
 80031a6:	e0b7      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a8:	4b61      	ldr	r3, [pc, #388]	; (8003330 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031aa:	60bb      	str	r3, [r7, #8]
       break;
 80031ac:	e0b7      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ae:	4b61      	ldr	r3, [pc, #388]	; (8003334 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80031b0:	60bb      	str	r3, [r7, #8]
      break;
 80031b2:	e0b4      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031b4:	4b5d      	ldr	r3, [pc, #372]	; (800332c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031be:	4b5b      	ldr	r3, [pc, #364]	; (800332c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d04d      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ca:	4b58      	ldr	r3, [pc, #352]	; (800332c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	099b      	lsrs	r3, r3, #6
 80031d0:	461a      	mov	r2, r3
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031da:	f04f 0100 	mov.w	r1, #0
 80031de:	ea02 0800 	and.w	r8, r2, r0
 80031e2:	ea03 0901 	and.w	r9, r3, r1
 80031e6:	4640      	mov	r0, r8
 80031e8:	4649      	mov	r1, r9
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	014b      	lsls	r3, r1, #5
 80031f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031f8:	0142      	lsls	r2, r0, #5
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	ebb0 0008 	subs.w	r0, r0, r8
 8003202:	eb61 0109 	sbc.w	r1, r1, r9
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	018b      	lsls	r3, r1, #6
 8003210:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003214:	0182      	lsls	r2, r0, #6
 8003216:	1a12      	subs	r2, r2, r0
 8003218:	eb63 0301 	sbc.w	r3, r3, r1
 800321c:	f04f 0000 	mov.w	r0, #0
 8003220:	f04f 0100 	mov.w	r1, #0
 8003224:	00d9      	lsls	r1, r3, #3
 8003226:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800322a:	00d0      	lsls	r0, r2, #3
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	eb12 0208 	adds.w	r2, r2, r8
 8003234:	eb43 0309 	adc.w	r3, r3, r9
 8003238:	f04f 0000 	mov.w	r0, #0
 800323c:	f04f 0100 	mov.w	r1, #0
 8003240:	0259      	lsls	r1, r3, #9
 8003242:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003246:	0250      	lsls	r0, r2, #9
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	461a      	mov	r2, r3
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	f7fc ffb6 	bl	80001c8 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4613      	mov	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e04a      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003266:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	099b      	lsrs	r3, r3, #6
 800326c:	461a      	mov	r2, r3
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003276:	f04f 0100 	mov.w	r1, #0
 800327a:	ea02 0400 	and.w	r4, r2, r0
 800327e:	ea03 0501 	and.w	r5, r3, r1
 8003282:	4620      	mov	r0, r4
 8003284:	4629      	mov	r1, r5
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	014b      	lsls	r3, r1, #5
 8003290:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003294:	0142      	lsls	r2, r0, #5
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	1b00      	subs	r0, r0, r4
 800329c:	eb61 0105 	sbc.w	r1, r1, r5
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	018b      	lsls	r3, r1, #6
 80032aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032ae:	0182      	lsls	r2, r0, #6
 80032b0:	1a12      	subs	r2, r2, r0
 80032b2:	eb63 0301 	sbc.w	r3, r3, r1
 80032b6:	f04f 0000 	mov.w	r0, #0
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	00d9      	lsls	r1, r3, #3
 80032c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032c4:	00d0      	lsls	r0, r2, #3
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	1912      	adds	r2, r2, r4
 80032cc:	eb45 0303 	adc.w	r3, r5, r3
 80032d0:	f04f 0000 	mov.w	r0, #0
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	0299      	lsls	r1, r3, #10
 80032da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032de:	0290      	lsls	r0, r2, #10
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	f7fc ff6a 	bl	80001c8 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4613      	mov	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	0c1b      	lsrs	r3, r3, #16
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	3301      	adds	r3, #1
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	60bb      	str	r3, [r7, #8]
      break;
 8003316:	e002      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800331a:	60bb      	str	r3, [r7, #8]
      break;
 800331c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331e:	68bb      	ldr	r3, [r7, #8]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	00f42400 	.word	0x00f42400
 8003334:	007a1200 	.word	0x007a1200

08003338 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e07b      	b.n	8003442 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b00      	cmp	r3, #0
 8003350:	d108      	bne.n	8003364 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800335a:	d009      	beq.n	8003370 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	61da      	str	r2, [r3, #28]
 8003362:	e005      	b.n	8003370 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd fd1a 	bl	8000dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f4:	ea42 0103 	orr.w	r1, r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	0c1b      	lsrs	r3, r3, #16
 800340e:	f003 0104 	and.w	r1, r3, #4
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f003 0210 	and.w	r2, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003430:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b08c      	sub	sp, #48	; 0x30
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003458:	2301      	movs	r3, #1
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x26>
 800346c:	2302      	movs	r3, #2
 800346e:	e18a      	b.n	8003786 <HAL_SPI_TransmitReceive+0x33c>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003478:	f7fd fdc2 	bl	8001000 <HAL_GetTick>
 800347c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800348e:	887b      	ldrh	r3, [r7, #2]
 8003490:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003496:	2b01      	cmp	r3, #1
 8003498:	d00f      	beq.n	80034ba <HAL_SPI_TransmitReceive+0x70>
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a0:	d107      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x68>
 80034aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d003      	beq.n	80034ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
 80034b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034b8:	e15b      	b.n	8003772 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_SPI_TransmitReceive+0x82>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_SPI_TransmitReceive+0x82>
 80034c6:	887b      	ldrh	r3, [r7, #2]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034d2:	e14e      	b.n	8003772 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d003      	beq.n	80034e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2205      	movs	r2, #5
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	887a      	ldrh	r2, [r7, #2]
 80034fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	887a      	ldrh	r2, [r7, #2]
 800350a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d007      	beq.n	800353c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003544:	d178      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_TransmitReceive+0x10a>
 800354e:	8b7b      	ldrh	r3, [r7, #26]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d166      	bne.n	8003622 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	1c9a      	adds	r2, r3, #2
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003578:	e053      	b.n	8003622 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d11b      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x176>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <HAL_SPI_TransmitReceive+0x176>
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	2b01      	cmp	r3, #1
 8003596:	d113      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	881a      	ldrh	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	1c9a      	adds	r2, r3, #2
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d119      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x1b8>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d014      	beq.n	8003602 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	b292      	uxth	r2, r2
 80035e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	1c9a      	adds	r2, r3, #2
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035fe:	2301      	movs	r3, #1
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003602:	f7fd fcfd 	bl	8001000 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800360e:	429a      	cmp	r2, r3
 8003610:	d807      	bhi.n	8003622 <HAL_SPI_TransmitReceive+0x1d8>
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003618:	d003      	beq.n	8003622 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003620:	e0a7      	b.n	8003772 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1a6      	bne.n	800357a <HAL_SPI_TransmitReceive+0x130>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1a1      	bne.n	800357a <HAL_SPI_TransmitReceive+0x130>
 8003636:	e07c      	b.n	8003732 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_SPI_TransmitReceive+0x1fc>
 8003640:	8b7b      	ldrh	r3, [r7, #26]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d16b      	bne.n	800371e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	330c      	adds	r3, #12
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800366c:	e057      	b.n	800371e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	d11c      	bne.n	80036b6 <HAL_SPI_TransmitReceive+0x26c>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d017      	beq.n	80036b6 <HAL_SPI_TransmitReceive+0x26c>
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d114      	bne.n	80036b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	330c      	adds	r3, #12
 8003696:	7812      	ldrb	r2, [r2, #0]
 8003698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d119      	bne.n	80036f8 <HAL_SPI_TransmitReceive+0x2ae>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d014      	beq.n	80036f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036f4:	2301      	movs	r3, #1
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036f8:	f7fd fc82 	bl	8001000 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003704:	429a      	cmp	r2, r3
 8003706:	d803      	bhi.n	8003710 <HAL_SPI_TransmitReceive+0x2c6>
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800370e:	d102      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x2cc>
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800371c:	e029      	b.n	8003772 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1a2      	bne.n	800366e <HAL_SPI_TransmitReceive+0x224>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d19d      	bne.n	800366e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f8b2 	bl	80038a0 <SPI_EndRxTxTransaction>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d006      	beq.n	8003750 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800374e:	e010      	b.n	8003772 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	e000      	b.n	8003772 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003770:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003782:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003786:	4618      	mov	r0, r3
 8003788:	3730      	adds	r7, #48	; 0x30
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037a0:	f7fd fc2e 	bl	8001000 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	4413      	add	r3, r2
 80037ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037b0:	f7fd fc26 	bl	8001000 <HAL_GetTick>
 80037b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037b6:	4b39      	ldr	r3, [pc, #228]	; (800389c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	015b      	lsls	r3, r3, #5
 80037bc:	0d1b      	lsrs	r3, r3, #20
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	fb02 f303 	mul.w	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037c6:	e054      	b.n	8003872 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ce:	d050      	beq.n	8003872 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037d0:	f7fd fc16 	bl	8001000 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d902      	bls.n	80037e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d13d      	bne.n	8003862 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037fe:	d111      	bne.n	8003824 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003808:	d004      	beq.n	8003814 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003812:	d107      	bne.n	8003824 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003822:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382c:	d10f      	bne.n	800384e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800384c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e017      	b.n	8003892 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	3b01      	subs	r3, #1
 8003870:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4013      	ands	r3, r2
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	bf0c      	ite	eq
 8003882:	2301      	moveq	r3, #1
 8003884:	2300      	movne	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	429a      	cmp	r2, r3
 800388e:	d19b      	bne.n	80037c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000020 	.word	0x20000020

080038a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <SPI_EndRxTxTransaction+0x7c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <SPI_EndRxTxTransaction+0x80>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	0d5b      	lsrs	r3, r3, #21
 80038b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038bc:	fb02 f303 	mul.w	r3, r2, r3
 80038c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ca:	d112      	bne.n	80038f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2200      	movs	r2, #0
 80038d4:	2180      	movs	r1, #128	; 0x80
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff ff5a 	bl	8003790 <SPI_WaitFlagStateUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d016      	beq.n	8003910 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	f043 0220 	orr.w	r2, r3, #32
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e00f      	b.n	8003912 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	2b80      	cmp	r3, #128	; 0x80
 800390a:	d0f2      	beq.n	80038f2 <SPI_EndRxTxTransaction+0x52>
 800390c:	e000      	b.n	8003910 <SPI_EndRxTxTransaction+0x70>
        break;
 800390e:	bf00      	nop
  }

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000020 	.word	0x20000020
 8003920:	165e9f81 	.word	0x165e9f81

08003924 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f043 0201 	orr.w	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f023 0201 	bic.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	019b      	lsls	r3, r3, #6
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3301      	adds	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	4a08      	ldr	r2, [pc, #32]	; (80039ac <USB_FlushTxFifo+0x44>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e006      	b.n	80039a0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b20      	cmp	r3, #32
 800399c:	d0f1      	beq.n	8003982 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	00030d40 	.word	0x00030d40

080039b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2210      	movs	r2, #16
 80039c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3301      	adds	r3, #1
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	4a08      	ldr	r2, [pc, #32]	; (80039ec <USB_FlushRxFifo+0x3c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e006      	b.n	80039e0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d0f1      	beq.n	80039c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	00030d40 	.word	0x00030d40

080039f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b08b      	sub	sp, #44	; 0x2c
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	4613      	mov	r3, r2
 80039fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	e014      	b.n	8003a46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	601a      	str	r2, [r3, #0]
    pDest++;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	3301      	adds	r3, #1
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	3301      	adds	r3, #1
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	3301      	adds	r3, #1
 8003a44:	623b      	str	r3, [r7, #32]
 8003a46:	6a3a      	ldr	r2, [r7, #32]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d3e6      	bcc.n	8003a1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003a4e:	8bfb      	ldrh	r3, [r7, #30]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01e      	beq.n	8003a92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f107 0310 	add.w	r3, r7, #16
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	701a      	strb	r2, [r3, #0]
      i++;
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	3301      	adds	r3, #1
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003a86:	8bfb      	ldrh	r3, [r7, #30]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003a8c:	8bfb      	ldrh	r3, [r7, #30]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1ea      	bne.n	8003a68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	372c      	adds	r7, #44	; 0x2c
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	460b      	mov	r3, r1
 8003aec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b00:	f023 0303 	bic.w	r3, r3, #3
 8003b04:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	68f9      	ldr	r1, [r7, #12]
 8003b16:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003b30:	6053      	str	r3, [r2, #4]
 8003b32:	e009      	b.n	8003b48 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d106      	bne.n	8003b48 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b40:	461a      	mov	r2, r3
 8003b42:	f241 7370 	movw	r3, #6000	; 0x1770
 8003b46:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	b29b      	uxth	r3, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b089      	sub	sp, #36	; 0x24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	0c9b      	lsrs	r3, r3, #18
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	0fdb      	lsrs	r3, r3, #31
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d104      	bne.n	8003bd2 <USB_HC_Halt+0x5a>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e0e8      	b.n	8003da4 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <USB_HC_Halt+0x66>
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d173      	bne.n	8003cc6 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	0151      	lsls	r1, r2, #5
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	440a      	add	r2, r1
 8003bf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bfc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f040 80cb 	bne.w	8003da2 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d143      	bne.n	8003ca0 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	0151      	lsls	r1, r2, #5
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c36:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	0151      	lsls	r1, r2, #5
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c56:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	0151      	lsls	r1, r2, #5
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c76:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c84:	d81d      	bhi.n	8003cc2 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c9c:	d0ec      	beq.n	8003c78 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003c9e:	e080      	b.n	8003da2 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	0151      	lsls	r1, r2, #5
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	440a      	add	r2, r1
 8003cb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cbe:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003cc0:	e06f      	b.n	8003da2 <USB_HC_Halt+0x22a>
            break;
 8003cc2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003cc4:	e06d      	b.n	8003da2 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	0151      	lsls	r1, r2, #5
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	440a      	add	r2, r1
 8003cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ce0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ce4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d143      	bne.n	8003d7e <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	0151      	lsls	r1, r2, #5
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	440a      	add	r2, r1
 8003d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d14:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	0151      	lsls	r1, r2, #5
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	440a      	add	r2, r1
 8003d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d34:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	0151      	lsls	r1, r2, #5
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	440a      	add	r2, r1
 8003d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d54:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d62:	d81d      	bhi.n	8003da0 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d7a:	d0ec      	beq.n	8003d56 <USB_HC_Halt+0x1de>
 8003d7c:	e011      	b.n	8003da2 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	0151      	lsls	r1, r2, #5
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	440a      	add	r2, r1
 8003d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e000      	b.n	8003da2 <USB_HC_Halt+0x22a>
          break;
 8003da0:	bf00      	nop
    }
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3724      	adds	r7, #36	; 0x24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fdc0 	bl	8003946 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8003dc6:	2110      	movs	r1, #16
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff fdcd 	bl	8003968 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff fdee 	bl	80039b0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	e01f      	b.n	8003e1a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003df0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003df8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e00:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	3301      	adds	r3, #1
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b0f      	cmp	r3, #15
 8003e1e:	d9dc      	bls.n	8003dda <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8003e20:	2300      	movs	r3, #0
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	e034      	b.n	8003e90 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e3c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e44:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e4c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3301      	adds	r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e6c:	d80c      	bhi.n	8003e88 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e84:	d0ec      	beq.n	8003e60 <USB_StopHost+0xb0>
 8003e86:	e000      	b.n	8003e8a <USB_StopHost+0xda>
        break;
 8003e88:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b0f      	cmp	r3, #15
 8003e94:	d9c7      	bls.n	8003e26 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ea2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eaa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff fd39 	bl	8003924 <USB_EnableGlobalInt>

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f804 	bl	8003ee0 <USBH_HandleSof>
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b0b      	cmp	r3, #11
 8003ef0:	d10a      	bne.n	8003f08 <USBH_HandleSof+0x28>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	4798      	blx	r3
  }
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8003f20:	bf00      	nop
}
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8003f3c:	bf00      	nop
}
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f883 	bl	80040a2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	791b      	ldrb	r3, [r3, #4]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f80b 	bl	8003fbe <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	795b      	ldrb	r3, [r3, #5]
 8003fac:	4619      	mov	r1, r3
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f805 	bl	8003fbe <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	2b0a      	cmp	r3, #10
 8003fce:	d80d      	bhi.n	8003fec <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	33e0      	adds	r3, #224	; 0xe0
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	33e0      	adds	r3, #224	; 0xe0
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff57 	bl	8003ebc <USBH_LL_IncTimer>
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff ff8f 	bl	8003f48 <USBH_LL_Connect>
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff ff98 	bl	8003f76 <USBH_LL_Disconnect>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	460b      	mov	r3, r1
 8004058:	70fb      	strb	r3, [r7, #3]
 800405a:	4613      	mov	r3, r2
 800405c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff49 	bl	8003f10 <USBH_LL_PortEnabled>
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff49 	bl	8003f2c <USBH_LL_PortDisabled>
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fd fb77 	bl	80017ac <HAL_HCD_Stop>
 80040be:	4603      	mov	r3, r0
 80040c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 f807 	bl	80040d8 <USBH_Get_USB_Status>
 80040ca:	4603      	mov	r3, r0
 80040cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80040ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d817      	bhi.n	800411c <USBH_Get_USB_Status+0x44>
 80040ec:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <USBH_Get_USB_Status+0x1c>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004105 	.word	0x08004105
 80040f8:	0800410b 	.word	0x0800410b
 80040fc:	08004111 	.word	0x08004111
 8004100:	08004117 	.word	0x08004117
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	73fb      	strb	r3, [r7, #15]
    break;
 8004108:	e00b      	b.n	8004122 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800410a:	2302      	movs	r3, #2
 800410c:	73fb      	strb	r3, [r7, #15]
    break;
 800410e:	e008      	b.n	8004122 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
    break;
 8004114:	e005      	b.n	8004122 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004116:	2302      	movs	r3, #2
 8004118:	73fb      	strb	r3, [r7, #15]
    break;
 800411a:	e002      	b.n	8004122 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800411c:	2302      	movs	r3, #2
 800411e:	73fb      	strb	r3, [r7, #15]
    break;
 8004120:	bf00      	nop
  }
  return usb_status;
 8004122:	7bfb      	ldrb	r3, [r7, #15]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <__libc_init_array>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	4d0d      	ldr	r5, [pc, #52]	; (8004168 <__libc_init_array+0x38>)
 8004134:	4c0d      	ldr	r4, [pc, #52]	; (800416c <__libc_init_array+0x3c>)
 8004136:	1b64      	subs	r4, r4, r5
 8004138:	10a4      	asrs	r4, r4, #2
 800413a:	2600      	movs	r6, #0
 800413c:	42a6      	cmp	r6, r4
 800413e:	d109      	bne.n	8004154 <__libc_init_array+0x24>
 8004140:	4d0b      	ldr	r5, [pc, #44]	; (8004170 <__libc_init_array+0x40>)
 8004142:	4c0c      	ldr	r4, [pc, #48]	; (8004174 <__libc_init_array+0x44>)
 8004144:	f000 f820 	bl	8004188 <_init>
 8004148:	1b64      	subs	r4, r4, r5
 800414a:	10a4      	asrs	r4, r4, #2
 800414c:	2600      	movs	r6, #0
 800414e:	42a6      	cmp	r6, r4
 8004150:	d105      	bne.n	800415e <__libc_init_array+0x2e>
 8004152:	bd70      	pop	{r4, r5, r6, pc}
 8004154:	f855 3b04 	ldr.w	r3, [r5], #4
 8004158:	4798      	blx	r3
 800415a:	3601      	adds	r6, #1
 800415c:	e7ee      	b.n	800413c <__libc_init_array+0xc>
 800415e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004162:	4798      	blx	r3
 8004164:	3601      	adds	r6, #1
 8004166:	e7f2      	b.n	800414e <__libc_init_array+0x1e>
 8004168:	080041b8 	.word	0x080041b8
 800416c:	080041b8 	.word	0x080041b8
 8004170:	080041b8 	.word	0x080041b8
 8004174:	080041bc 	.word	0x080041bc

08004178 <memset>:
 8004178:	4402      	add	r2, r0
 800417a:	4603      	mov	r3, r0
 800417c:	4293      	cmp	r3, r2
 800417e:	d100      	bne.n	8004182 <memset+0xa>
 8004180:	4770      	bx	lr
 8004182:	f803 1b01 	strb.w	r1, [r3], #1
 8004186:	e7f9      	b.n	800417c <memset+0x4>

08004188 <_init>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	bf00      	nop
 800418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418e:	bc08      	pop	{r3}
 8004190:	469e      	mov	lr, r3
 8004192:	4770      	bx	lr

08004194 <_fini>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr
