
vgrs-security-sysyem-stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000469c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08004824  08004824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004840  08004840  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004848  08004848  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08004850  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020050  2**0
                  CONTENTS
 10 .bss          00000430  20000050  20000050  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000480  20000480  00020050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   000109f1  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027ea  00000000  00000000  00030a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  00033260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a80  00000000  00000000  00033df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002235d  00000000  00000000  00034878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e736  00000000  00000000  00056bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca08d  00000000  00000000  0006530b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012f398  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f24  00000000  00000000  0012f3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000050 	.word	0x20000050
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800480c 	.word	0x0800480c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000054 	.word	0x20000054
 80001c4:	0800480c 	.word	0x0800480c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <readKeypad>:
#include "stm32f4xx_hal.h"
#include "keypad.h"


char readKeypad (void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	48b4      	ldr	r0, [pc, #720]	; (80007c0 <readKeypad+0x2dc>)
 80004ee:	f001 fb67 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2140      	movs	r1, #64	; 0x40
 80004f6:	48b2      	ldr	r0, [pc, #712]	; (80007c0 <readKeypad+0x2dc>)
 80004f8:	f001 fb62 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2120      	movs	r1, #32
 8000500:	48af      	ldr	r0, [pc, #700]	; (80007c0 <readKeypad+0x2dc>)
 8000502:	f001 fb5d 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2110      	movs	r1, #16
 800050a:	48ad      	ldr	r0, [pc, #692]	; (80007c0 <readKeypad+0x2dc>)
 800050c:	f001 fb58 	bl	8001bc0 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 8000510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000514:	48aa      	ldr	r0, [pc, #680]	; (80007c0 <readKeypad+0x2dc>)
 8000516:	f001 fb3b 	bl	8001b90 <HAL_GPIO_ReadPin>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d00a      	beq.n	8000536 <readKeypad+0x52>
	{
		while (HAL_GPIO_ReadPin (C1_PORT, C1_PIN));
 8000520:	bf00      	nop
 8000522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000526:	48a6      	ldr	r0, [pc, #664]	; (80007c0 <readKeypad+0x2dc>)
 8000528:	f001 fb32 	bl	8001b90 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1f7      	bne.n	8000522 <readKeypad+0x3e>
		return '1';
 8000532:	2331      	movs	r3, #49	; 0x31
 8000534:	e141      	b.n	80007ba <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 8000536:	2104      	movs	r1, #4
 8000538:	48a1      	ldr	r0, [pc, #644]	; (80007c0 <readKeypad+0x2dc>)
 800053a:	f001 fb29 	bl	8001b90 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d009      	beq.n	8000558 <readKeypad+0x74>
	{
		while (HAL_GPIO_ReadPin (C2_PORT, C2_PIN));
 8000544:	bf00      	nop
 8000546:	2104      	movs	r1, #4
 8000548:	489d      	ldr	r0, [pc, #628]	; (80007c0 <readKeypad+0x2dc>)
 800054a:	f001 fb21 	bl	8001b90 <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1f8      	bne.n	8000546 <readKeypad+0x62>
		return '2';
 8000554:	2332      	movs	r3, #50	; 0x32
 8000556:	e130      	b.n	80007ba <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 8000558:	2102      	movs	r1, #2
 800055a:	4899      	ldr	r0, [pc, #612]	; (80007c0 <readKeypad+0x2dc>)
 800055c:	f001 fb18 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d009      	beq.n	800057a <readKeypad+0x96>
	{
		while (HAL_GPIO_ReadPin (C3_PORT, C3_PIN));
 8000566:	bf00      	nop
 8000568:	2102      	movs	r1, #2
 800056a:	4895      	ldr	r0, [pc, #596]	; (80007c0 <readKeypad+0x2dc>)
 800056c:	f001 fb10 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d1f8      	bne.n	8000568 <readKeypad+0x84>
		return '3';
 8000576:	2333      	movs	r3, #51	; 0x33
 8000578:	e11f      	b.n	80007ba <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 800057a:	2101      	movs	r1, #1
 800057c:	4890      	ldr	r0, [pc, #576]	; (80007c0 <readKeypad+0x2dc>)
 800057e:	f001 fb07 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d009      	beq.n	800059c <readKeypad+0xb8>
	{
		while (HAL_GPIO_ReadPin (C4_PORT, C4_PIN));
 8000588:	bf00      	nop
 800058a:	2101      	movs	r1, #1
 800058c:	488c      	ldr	r0, [pc, #560]	; (80007c0 <readKeypad+0x2dc>)
 800058e:	f001 faff 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1f8      	bne.n	800058a <readKeypad+0xa6>
		return 'A';
 8000598:	2341      	movs	r3, #65	; 0x41
 800059a:	e10e      	b.n	80007ba <readKeypad+0x2d6>
	}

	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	4887      	ldr	r0, [pc, #540]	; (80007c0 <readKeypad+0x2dc>)
 80005a2:	f001 fb0d 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2140      	movs	r1, #64	; 0x40
 80005aa:	4885      	ldr	r0, [pc, #532]	; (80007c0 <readKeypad+0x2dc>)
 80005ac:	f001 fb08 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	4882      	ldr	r0, [pc, #520]	; (80007c0 <readKeypad+0x2dc>)
 80005b6:	f001 fb03 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2110      	movs	r1, #16
 80005be:	4880      	ldr	r0, [pc, #512]	; (80007c0 <readKeypad+0x2dc>)
 80005c0:	f001 fafe 	bl	8001bc0 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 80005c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c8:	487d      	ldr	r0, [pc, #500]	; (80007c0 <readKeypad+0x2dc>)
 80005ca:	f001 fae1 	bl	8001b90 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00a      	beq.n	80005ea <readKeypad+0x106>
	{
		while (HAL_GPIO_ReadPin (C1_PORT, C1_PIN));
 80005d4:	bf00      	nop
 80005d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005da:	4879      	ldr	r0, [pc, #484]	; (80007c0 <readKeypad+0x2dc>)
 80005dc:	f001 fad8 	bl	8001b90 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1f7      	bne.n	80005d6 <readKeypad+0xf2>
		return '4';
 80005e6:	2334      	movs	r3, #52	; 0x34
 80005e8:	e0e7      	b.n	80007ba <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 80005ea:	2104      	movs	r1, #4
 80005ec:	4874      	ldr	r0, [pc, #464]	; (80007c0 <readKeypad+0x2dc>)
 80005ee:	f001 facf 	bl	8001b90 <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d009      	beq.n	800060c <readKeypad+0x128>
	{
		while (HAL_GPIO_ReadPin (C2_PORT, C2_PIN));
 80005f8:	bf00      	nop
 80005fa:	2104      	movs	r1, #4
 80005fc:	4870      	ldr	r0, [pc, #448]	; (80007c0 <readKeypad+0x2dc>)
 80005fe:	f001 fac7 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d1f8      	bne.n	80005fa <readKeypad+0x116>
		return '5';
 8000608:	2335      	movs	r3, #53	; 0x35
 800060a:	e0d6      	b.n	80007ba <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 800060c:	2102      	movs	r1, #2
 800060e:	486c      	ldr	r0, [pc, #432]	; (80007c0 <readKeypad+0x2dc>)
 8000610:	f001 fabe 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d009      	beq.n	800062e <readKeypad+0x14a>
	{
		while (HAL_GPIO_ReadPin (C3_PORT, C3_PIN));
 800061a:	bf00      	nop
 800061c:	2102      	movs	r1, #2
 800061e:	4868      	ldr	r0, [pc, #416]	; (80007c0 <readKeypad+0x2dc>)
 8000620:	f001 fab6 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1f8      	bne.n	800061c <readKeypad+0x138>
		return '6';
 800062a:	2336      	movs	r3, #54	; 0x36
 800062c:	e0c5      	b.n	80007ba <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 800062e:	2101      	movs	r1, #1
 8000630:	4863      	ldr	r0, [pc, #396]	; (80007c0 <readKeypad+0x2dc>)
 8000632:	f001 faad 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d009      	beq.n	8000650 <readKeypad+0x16c>
	{
		while (HAL_GPIO_ReadPin (C4_PORT, C4_PIN));
 800063c:	bf00      	nop
 800063e:	2101      	movs	r1, #1
 8000640:	485f      	ldr	r0, [pc, #380]	; (80007c0 <readKeypad+0x2dc>)
 8000642:	f001 faa5 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1f8      	bne.n	800063e <readKeypad+0x15a>
		return 'B';
 800064c:	2342      	movs	r3, #66	; 0x42
 800064e:	e0b4      	b.n	80007ba <readKeypad+0x2d6>
	}

	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	485a      	ldr	r0, [pc, #360]	; (80007c0 <readKeypad+0x2dc>)
 8000656:	f001 fab3 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2140      	movs	r1, #64	; 0x40
 800065e:	4858      	ldr	r0, [pc, #352]	; (80007c0 <readKeypad+0x2dc>)
 8000660:	f001 faae 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2120      	movs	r1, #32
 8000668:	4855      	ldr	r0, [pc, #340]	; (80007c0 <readKeypad+0x2dc>)
 800066a:	f001 faa9 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2110      	movs	r1, #16
 8000672:	4853      	ldr	r0, [pc, #332]	; (80007c0 <readKeypad+0x2dc>)
 8000674:	f001 faa4 	bl	8001bc0 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 8000678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067c:	4850      	ldr	r0, [pc, #320]	; (80007c0 <readKeypad+0x2dc>)
 800067e:	f001 fa87 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00a      	beq.n	800069e <readKeypad+0x1ba>
	{
		while (HAL_GPIO_ReadPin (C1_PORT, C1_PIN));
 8000688:	bf00      	nop
 800068a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068e:	484c      	ldr	r0, [pc, #304]	; (80007c0 <readKeypad+0x2dc>)
 8000690:	f001 fa7e 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d1f7      	bne.n	800068a <readKeypad+0x1a6>
		return '7';
 800069a:	2337      	movs	r3, #55	; 0x37
 800069c:	e08d      	b.n	80007ba <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 800069e:	2104      	movs	r1, #4
 80006a0:	4847      	ldr	r0, [pc, #284]	; (80007c0 <readKeypad+0x2dc>)
 80006a2:	f001 fa75 	bl	8001b90 <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d009      	beq.n	80006c0 <readKeypad+0x1dc>
	{
		while (HAL_GPIO_ReadPin (C2_PORT, C2_PIN));
 80006ac:	bf00      	nop
 80006ae:	2104      	movs	r1, #4
 80006b0:	4843      	ldr	r0, [pc, #268]	; (80007c0 <readKeypad+0x2dc>)
 80006b2:	f001 fa6d 	bl	8001b90 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f8      	bne.n	80006ae <readKeypad+0x1ca>
		return '8';
 80006bc:	2338      	movs	r3, #56	; 0x38
 80006be:	e07c      	b.n	80007ba <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 80006c0:	2102      	movs	r1, #2
 80006c2:	483f      	ldr	r0, [pc, #252]	; (80007c0 <readKeypad+0x2dc>)
 80006c4:	f001 fa64 	bl	8001b90 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d009      	beq.n	80006e2 <readKeypad+0x1fe>
	{
		while (HAL_GPIO_ReadPin (C3_PORT, C3_PIN));
 80006ce:	bf00      	nop
 80006d0:	2102      	movs	r1, #2
 80006d2:	483b      	ldr	r0, [pc, #236]	; (80007c0 <readKeypad+0x2dc>)
 80006d4:	f001 fa5c 	bl	8001b90 <HAL_GPIO_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f8      	bne.n	80006d0 <readKeypad+0x1ec>
		return '9';
 80006de:	2339      	movs	r3, #57	; 0x39
 80006e0:	e06b      	b.n	80007ba <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 80006e2:	2101      	movs	r1, #1
 80006e4:	4836      	ldr	r0, [pc, #216]	; (80007c0 <readKeypad+0x2dc>)
 80006e6:	f001 fa53 	bl	8001b90 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d009      	beq.n	8000704 <readKeypad+0x220>
	{
		while (HAL_GPIO_ReadPin (C4_PORT, C4_PIN));
 80006f0:	bf00      	nop
 80006f2:	2101      	movs	r1, #1
 80006f4:	4832      	ldr	r0, [pc, #200]	; (80007c0 <readKeypad+0x2dc>)
 80006f6:	f001 fa4b 	bl	8001b90 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f8      	bne.n	80006f2 <readKeypad+0x20e>
		return 'C';
 8000700:	2343      	movs	r3, #67	; 0x43
 8000702:	e05a      	b.n	80007ba <readKeypad+0x2d6>
	}

	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	482d      	ldr	r0, [pc, #180]	; (80007c0 <readKeypad+0x2dc>)
 800070a:	f001 fa59 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2140      	movs	r1, #64	; 0x40
 8000712:	482b      	ldr	r0, [pc, #172]	; (80007c0 <readKeypad+0x2dc>)
 8000714:	f001 fa54 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2120      	movs	r1, #32
 800071c:	4828      	ldr	r0, [pc, #160]	; (80007c0 <readKeypad+0x2dc>)
 800071e:	f001 fa4f 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2110      	movs	r1, #16
 8000726:	4826      	ldr	r0, [pc, #152]	; (80007c0 <readKeypad+0x2dc>)
 8000728:	f001 fa4a 	bl	8001bc0 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	4823      	ldr	r0, [pc, #140]	; (80007c0 <readKeypad+0x2dc>)
 8000732:	f001 fa2d 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00a      	beq.n	8000752 <readKeypad+0x26e>
	{
		while (HAL_GPIO_ReadPin (C1_PORT, C1_PIN));
 800073c:	bf00      	nop
 800073e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000742:	481f      	ldr	r0, [pc, #124]	; (80007c0 <readKeypad+0x2dc>)
 8000744:	f001 fa24 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1f7      	bne.n	800073e <readKeypad+0x25a>
		return '*';
 800074e:	232a      	movs	r3, #42	; 0x2a
 8000750:	e033      	b.n	80007ba <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 8000752:	2104      	movs	r1, #4
 8000754:	481a      	ldr	r0, [pc, #104]	; (80007c0 <readKeypad+0x2dc>)
 8000756:	f001 fa1b 	bl	8001b90 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d009      	beq.n	8000774 <readKeypad+0x290>
	{
		while (HAL_GPIO_ReadPin (C2_PORT, C2_PIN));
 8000760:	bf00      	nop
 8000762:	2104      	movs	r1, #4
 8000764:	4816      	ldr	r0, [pc, #88]	; (80007c0 <readKeypad+0x2dc>)
 8000766:	f001 fa13 	bl	8001b90 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1f8      	bne.n	8000762 <readKeypad+0x27e>
		return '0';
 8000770:	2330      	movs	r3, #48	; 0x30
 8000772:	e022      	b.n	80007ba <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 8000774:	2102      	movs	r1, #2
 8000776:	4812      	ldr	r0, [pc, #72]	; (80007c0 <readKeypad+0x2dc>)
 8000778:	f001 fa0a 	bl	8001b90 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d009      	beq.n	8000796 <readKeypad+0x2b2>
	{
		while (HAL_GPIO_ReadPin (C3_PORT, C3_PIN));
 8000782:	bf00      	nop
 8000784:	2102      	movs	r1, #2
 8000786:	480e      	ldr	r0, [pc, #56]	; (80007c0 <readKeypad+0x2dc>)
 8000788:	f001 fa02 	bl	8001b90 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f8      	bne.n	8000784 <readKeypad+0x2a0>
		return '#';
 8000792:	2323      	movs	r3, #35	; 0x23
 8000794:	e011      	b.n	80007ba <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 8000796:	2101      	movs	r1, #1
 8000798:	4809      	ldr	r0, [pc, #36]	; (80007c0 <readKeypad+0x2dc>)
 800079a:	f001 f9f9 	bl	8001b90 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d009      	beq.n	80007b8 <readKeypad+0x2d4>
	{
		while (HAL_GPIO_ReadPin (C4_PORT, C4_PIN));
 80007a4:	bf00      	nop
 80007a6:	2101      	movs	r1, #1
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <readKeypad+0x2dc>)
 80007aa:	f001 f9f1 	bl	8001b90 <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1f8      	bne.n	80007a6 <readKeypad+0x2c2>
		return 'D';
 80007b4:	2344      	movs	r3, #68	; 0x44
 80007b6:	e000      	b.n	80007ba <readKeypad+0x2d6>
	}

	return '-';
 80007b8:	232d      	movs	r3, #45	; 0x2d
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40020400 	.word	0x40020400

080007c4 <setLedbar>:

#include "stm32f4xx_hal.h"
#include "ledbar.h"

void setLedbar(uint8_t conf[])
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin (LEDBAR_PORT, L1_PIN, conf[0] != 0);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf14      	ite	ne
 80007d4:	2301      	movne	r3, #1
 80007d6:	2300      	moveq	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	461a      	mov	r2, r3
 80007dc:	2101      	movs	r1, #1
 80007de:	483f      	ldr	r0, [pc, #252]	; (80008dc <setLedbar+0x118>)
 80007e0:	f001 f9ee 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L2_PIN, conf[1] != 0);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3301      	adds	r3, #1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	bf14      	ite	ne
 80007ee:	2301      	movne	r3, #1
 80007f0:	2300      	moveq	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	2102      	movs	r1, #2
 80007f8:	4838      	ldr	r0, [pc, #224]	; (80008dc <setLedbar+0x118>)
 80007fa:	f001 f9e1 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L3_PIN, conf[2] != 0);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3302      	adds	r3, #2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	bf14      	ite	ne
 8000808:	2301      	movne	r3, #1
 800080a:	2300      	moveq	r3, #0
 800080c:	b2db      	uxtb	r3, r3
 800080e:	461a      	mov	r2, r3
 8000810:	2104      	movs	r1, #4
 8000812:	4832      	ldr	r0, [pc, #200]	; (80008dc <setLedbar+0x118>)
 8000814:	f001 f9d4 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L4_PIN, conf[3] != 0);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3303      	adds	r3, #3
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	bf14      	ite	ne
 8000822:	2301      	movne	r3, #1
 8000824:	2300      	moveq	r3, #0
 8000826:	b2db      	uxtb	r3, r3
 8000828:	461a      	mov	r2, r3
 800082a:	2108      	movs	r1, #8
 800082c:	482b      	ldr	r0, [pc, #172]	; (80008dc <setLedbar+0x118>)
 800082e:	f001 f9c7 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L5_PIN, conf[4] != 0);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3304      	adds	r3, #4
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	bf14      	ite	ne
 800083c:	2301      	movne	r3, #1
 800083e:	2300      	moveq	r3, #0
 8000840:	b2db      	uxtb	r3, r3
 8000842:	461a      	mov	r2, r3
 8000844:	2110      	movs	r1, #16
 8000846:	4825      	ldr	r0, [pc, #148]	; (80008dc <setLedbar+0x118>)
 8000848:	f001 f9ba 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L6_PIN, conf[5] != 0);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3305      	adds	r3, #5
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	bf14      	ite	ne
 8000856:	2301      	movne	r3, #1
 8000858:	2300      	moveq	r3, #0
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	2120      	movs	r1, #32
 8000860:	481e      	ldr	r0, [pc, #120]	; (80008dc <setLedbar+0x118>)
 8000862:	f001 f9ad 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L7_PIN, conf[6] != 0);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3306      	adds	r3, #6
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	bf14      	ite	ne
 8000870:	2301      	movne	r3, #1
 8000872:	2300      	moveq	r3, #0
 8000874:	b2db      	uxtb	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	2140      	movs	r1, #64	; 0x40
 800087a:	4818      	ldr	r0, [pc, #96]	; (80008dc <setLedbar+0x118>)
 800087c:	f001 f9a0 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L8_PIN, conf[7] != 0);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3307      	adds	r3, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	bf14      	ite	ne
 800088a:	2301      	movne	r3, #1
 800088c:	2300      	moveq	r3, #0
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	4811      	ldr	r0, [pc, #68]	; (80008dc <setLedbar+0x118>)
 8000896:	f001 f993 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L9_PIN, conf[8] != 0);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3308      	adds	r3, #8
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	bf14      	ite	ne
 80008a4:	2301      	movne	r3, #1
 80008a6:	2300      	moveq	r3, #0
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	461a      	mov	r2, r3
 80008ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <setLedbar+0x118>)
 80008b2:	f001 f985 	bl	8001bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L10_PIN, conf[9] != 0);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3309      	adds	r3, #9
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	bf14      	ite	ne
 80008c0:	2301      	movne	r3, #1
 80008c2:	2300      	moveq	r3, #0
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	461a      	mov	r2, r3
 80008c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <setLedbar+0x118>)
 80008ce:	f001 f977 	bl	8001bc0 <HAL_GPIO_WritePin>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40020800 	.word	0x40020800

080008e0 <setLedbarTo>:

void setLedbarTo(int8_t to) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	uint8_t conf[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <setLedbarTo+0x4c>)
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80008f2:	c303      	stmia	r3!, {r0, r1}
 80008f4:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < to; i++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	e008      	b.n	800090e <setLedbarTo+0x2e>
	{
		conf[i] = 1;
 80008fc:	f107 0208 	add.w	r2, r7, #8
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	4413      	add	r3, r2
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < to; i++)
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3301      	adds	r3, #1
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	429a      	cmp	r2, r3
 8000916:	dbf1      	blt.n	80008fc <setLedbarTo+0x1c>
	}
	setLedbar(conf);
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff51 	bl	80007c4 <setLedbar>
}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	08004824 	.word	0x08004824

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f000 fe14 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f92a 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 f9c8 	bl	8000cd0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000940:	f000 f990 	bl	8000c64 <MX_SPI1_Init>
  MFRC522_Init();
 8000944:	f000 fcd0 	bl	80012e8 <MFRC522_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800094c:	f000 fe7a 	bl	8001644 <HAL_Delay>
  /* USER CODE END 2 */

  setLedbarTo(0);
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff ffc5 	bl	80008e0 <setLedbarTo>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	readKeypadLockState();
 8000956:	f000 f82d 	bl	80009b4 <readKeypadLockState>
	readRFIDLockState();
 800095a:	f000 f8b5 	bl	8000ac8 <readRFIDLockState>

	if (rfidLockState == UNLOCKED)
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <main+0x78>)
 8000960:	f993 3000 	ldrsb.w	r3, [r3]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d106      	bne.n	8000976 <main+0x46>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800096e:	480f      	ldr	r0, [pc, #60]	; (80009ac <main+0x7c>)
 8000970:	f001 f926 	bl	8001bc0 <HAL_GPIO_WritePin>
 8000974:	e005      	b.n	8000982 <main+0x52>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <main+0x7c>)
 800097e:	f001 f91f 	bl	8001bc0 <HAL_GPIO_WritePin>
	}

	if (keypadLockState == UNLOCKED)
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <main+0x80>)
 8000984:	f993 3000 	ldrsb.w	r3, [r3]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d106      	bne.n	800099a <main+0x6a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <main+0x7c>)
 8000994:	f001 f914 	bl	8001bc0 <HAL_GPIO_WritePin>
 8000998:	e7dd      	b.n	8000956 <main+0x26>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <main+0x7c>)
 80009a2:	f001 f90d 	bl	8001bc0 <HAL_GPIO_WritePin>
  {
 80009a6:	e7d6      	b.n	8000956 <main+0x26>
 80009a8:	2000006c 	.word	0x2000006c
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	2000006d 	.word	0x2000006d

080009b4 <readKeypadLockState>:
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

void readKeypadLockState()
{
 80009b4:	b5b0      	push	{r4, r5, r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	if (keypadLastTimeValidated != -1 && HAL_GetTick() - keypadLastTimeValidated <= EXPIRE_KEYPAD_LOCK_VALIDATION_TIME && keypadLockState == UNLOCKED)
 80009b8:	4b3d      	ldr	r3, [pc, #244]	; (8000ab0 <readKeypadLockState+0xfc>)
 80009ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009c2:	bf08      	it	eq
 80009c4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80009c8:	d017      	beq.n	80009fa <readKeypadLockState+0x46>
 80009ca:	f000 fe2f 	bl	800162c <HAL_GetTick>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f04f 0100 	mov.w	r1, #0
 80009d6:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <readKeypadLockState+0xfc>)
 80009d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009dc:	1a84      	subs	r4, r0, r2
 80009de:	eb61 0503 	sbc.w	r5, r1, r3
 80009e2:	f241 7270 	movw	r2, #6000	; 0x1770
 80009e6:	f04f 0300 	mov.w	r3, #0
 80009ea:	42a2      	cmp	r2, r4
 80009ec:	41ab      	sbcs	r3, r5
 80009ee:	db04      	blt.n	80009fa <readKeypadLockState+0x46>
 80009f0:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <readKeypadLockState+0x100>)
 80009f2:	f993 3000 	ldrsb.w	r3, [r3]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d053      	beq.n	8000aa2 <readKeypadLockState+0xee>
	{
		return;
	} else {
		keypadLockState = LOCKED;
 80009fa:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <readKeypadLockState+0x100>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
	}

	c = readKeypad();
 8000a00:	f7ff fd70 	bl	80004e4 <readKeypad>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <readKeypadLockState+0x104>)
 8000a0a:	701a      	strb	r2, [r3, #0]

	if (c == '#') {
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <readKeypadLockState+0x104>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b23      	cmp	r3, #35	; 0x23
 8000a12:	d124      	bne.n	8000a5e <readKeypadLockState+0xaa>
		if (strcmp(passwordInput, validPassword_1) == 0 || strcmp(passwordInput, validPassword_2) == 0)
 8000a14:	4929      	ldr	r1, [pc, #164]	; (8000abc <readKeypadLockState+0x108>)
 8000a16:	482a      	ldr	r0, [pc, #168]	; (8000ac0 <readKeypadLockState+0x10c>)
 8000a18:	f7ff fbd6 	bl	80001c8 <strcmp>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d006      	beq.n	8000a30 <readKeypadLockState+0x7c>
 8000a22:	4928      	ldr	r1, [pc, #160]	; (8000ac4 <readKeypadLockState+0x110>)
 8000a24:	4826      	ldr	r0, [pc, #152]	; (8000ac0 <readKeypadLockState+0x10c>)
 8000a26:	f7ff fbcf 	bl	80001c8 <strcmp>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10c      	bne.n	8000a4a <readKeypadLockState+0x96>
		{
			keypadLockState = UNLOCKED;
 8000a30:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <readKeypadLockState+0x100>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
			keypadLastTimeValidated = HAL_GetTick();
 8000a36:	f000 fdf9 	bl	800162c <HAL_GetTick>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	f04f 0300 	mov.w	r3, #0
 8000a42:	491b      	ldr	r1, [pc, #108]	; (8000ab0 <readKeypadLockState+0xfc>)
 8000a44:	e9c1 2300 	strd	r2, r3, [r1]
 8000a48:	e002      	b.n	8000a50 <readKeypadLockState+0x9c>
		} else {
			keypadLockState = LOCKED;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <readKeypadLockState+0x100>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
		}
		passwordInput[0] = '\0';
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <readKeypadLockState+0x10c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
		setLedbarTo(0);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff ff42 	bl	80008e0 <setLedbarTo>
		return;
 8000a5c:	e026      	b.n	8000aac <readKeypadLockState+0xf8>
	}

	if (c == 'C') {
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <readKeypadLockState+0x104>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b43      	cmp	r3, #67	; 0x43
 8000a64:	d106      	bne.n	8000a74 <readKeypadLockState+0xc0>
		// clear password
		passwordInput[0] = '\0';
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <readKeypadLockState+0x10c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
		setLedbarTo(0);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff ff37 	bl	80008e0 <setLedbarTo>
		return;
 8000a72:	e01b      	b.n	8000aac <readKeypadLockState+0xf8>
	}

	if (strlen(passwordInput) == KEYPAD_PASSWORD_LENGTH)
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <readKeypadLockState+0x10c>)
 8000a76:	f7ff fbb1 	bl	80001dc <strlen>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b09      	cmp	r3, #9
 8000a7e:	d012      	beq.n	8000aa6 <readKeypadLockState+0xf2>
	{
		return;
	}

	// nothing clicked
	if (c == '-') {
 8000a80:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <readKeypadLockState+0x104>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b2d      	cmp	r3, #45	; 0x2d
 8000a86:	d010      	beq.n	8000aaa <readKeypadLockState+0xf6>
		return;
	}

	strncat(passwordInput, &c, 1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	490b      	ldr	r1, [pc, #44]	; (8000ab8 <readKeypadLockState+0x104>)
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <readKeypadLockState+0x10c>)
 8000a8e:	f003 fea9 	bl	80047e4 <strncat>
	setLedbarTo(strlen(passwordInput));
 8000a92:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <readKeypadLockState+0x10c>)
 8000a94:	f7ff fba2 	bl	80001dc <strlen>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff20 	bl	80008e0 <setLedbarTo>
 8000aa0:	e004      	b.n	8000aac <readKeypadLockState+0xf8>
		return;
 8000aa2:	bf00      	nop
 8000aa4:	e002      	b.n	8000aac <readKeypadLockState+0xf8>
		return;
 8000aa6:	bf00      	nop
 8000aa8:	e000      	b.n	8000aac <readKeypadLockState+0xf8>
		return;
 8000aaa:	bf00      	nop

}
 8000aac:	bdb0      	pop	{r4, r5, r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000038 	.word	0x20000038
 8000ab4:	2000006d 	.word	0x2000006d
 8000ab8:	20000040 	.word	0x20000040
 8000abc:	20000020 	.word	0x20000020
 8000ac0:	200000c4 	.word	0x200000c4
 8000ac4:	2000002c 	.word	0x2000002c

08000ac8 <readRFIDLockState>:

void readRFIDLockState()
{
 8000ac8:	b5b0      	push	{r4, r5, r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	if (rfidLastTimeValidated != -1 && HAL_GetTick() - rfidLastTimeValidated <= EXPIRE_RFID_LOCK_VALIDATION_TIME && rfidLockState == UNLOCKED)
 8000acc:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <readRFIDLockState+0xb0>)
 8000ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ad6:	bf08      	it	eq
 8000ad8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8000adc:	d017      	beq.n	8000b0e <readRFIDLockState+0x46>
 8000ade:	f000 fda5 	bl	800162c <HAL_GetTick>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f04f 0100 	mov.w	r1, #0
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <readRFIDLockState+0xb0>)
 8000aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af0:	1a84      	subs	r4, r0, r2
 8000af2:	eb61 0503 	sbc.w	r5, r1, r3
 8000af6:	f241 7270 	movw	r2, #6000	; 0x1770
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	42a2      	cmp	r2, r4
 8000b00:	41ab      	sbcs	r3, r5
 8000b02:	db04      	blt.n	8000b0e <readRFIDLockState+0x46>
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <readRFIDLockState+0xb4>)
 8000b06:	f993 3000 	ldrsb.w	r3, [r3]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d031      	beq.n	8000b72 <readRFIDLockState+0xaa>
	{
		return;
	}
	rc522State = MFRC522_Check(cardID);
 8000b0e:	481c      	ldr	r0, [pc, #112]	; (8000b80 <readRFIDLockState+0xb8>)
 8000b10:	f000 f9fe 	bl	8000f10 <MFRC522_Check>
 8000b14:	4603      	mov	r3, r0
 8000b16:	b25a      	sxtb	r2, r3
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <readRFIDLockState+0xbc>)
 8000b1a:	701a      	strb	r2, [r3, #0]
	if (rc522State == MI_OK)
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <readRFIDLockState+0xbc>)
 8000b1e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d11e      	bne.n	8000b64 <readRFIDLockState+0x9c>
	{
		if (MFRC522_Compare(cardID, validID_1) == MI_OK || MFRC522_Compare(cardID, validID_2) == MI_OK)
 8000b26:	4918      	ldr	r1, [pc, #96]	; (8000b88 <readRFIDLockState+0xc0>)
 8000b28:	4815      	ldr	r0, [pc, #84]	; (8000b80 <readRFIDLockState+0xb8>)
 8000b2a:	f000 fa0a 	bl	8000f42 <MFRC522_Compare>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d006      	beq.n	8000b42 <readRFIDLockState+0x7a>
 8000b34:	4915      	ldr	r1, [pc, #84]	; (8000b8c <readRFIDLockState+0xc4>)
 8000b36:	4812      	ldr	r0, [pc, #72]	; (8000b80 <readRFIDLockState+0xb8>)
 8000b38:	f000 fa03 	bl	8000f42 <MFRC522_Compare>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d10c      	bne.n	8000b5c <readRFIDLockState+0x94>
		{
			rfidLockState = UNLOCKED;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <readRFIDLockState+0xb4>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
			rfidLastTimeValidated = HAL_GetTick();
 8000b48:	f000 fd70 	bl	800162c <HAL_GetTick>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f04f 0300 	mov.w	r3, #0
 8000b54:	4908      	ldr	r1, [pc, #32]	; (8000b78 <readRFIDLockState+0xb0>)
 8000b56:	e9c1 2300 	strd	r2, r3, [r1]
 8000b5a:	e006      	b.n	8000b6a <readRFIDLockState+0xa2>
		} else
		{
			rfidLockState = LOCKED;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <readRFIDLockState+0xb4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e002      	b.n	8000b6a <readRFIDLockState+0xa2>
		}
	} else {
		// no card detected
		rfidLockState = LOCKED;
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <readRFIDLockState+0xb4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(10);
 8000b6a:	200a      	movs	r0, #10
 8000b6c:	f000 fd6a 	bl	8001644 <HAL_Delay>
 8000b70:	e000      	b.n	8000b74 <readRFIDLockState+0xac>
		return;
 8000b72:	bf00      	nop

}
 8000b74:	bdb0      	pop	{r4, r5, r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000018 	.word	0x20000018
 8000b7c:	2000006c 	.word	0x2000006c
 8000b80:	200000d0 	.word	0x200000d0
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000004 	.word	0x20000004
 8000b8c:	2000000c 	.word	0x2000000c

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b094      	sub	sp, #80	; 0x50
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0320 	add.w	r3, r7, #32
 8000b9a:	2230      	movs	r2, #48	; 0x30
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f003 fe18 	bl	80047d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <SystemClock_Config+0xcc>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	4a27      	ldr	r2, [pc, #156]	; (8000c5c <SystemClock_Config+0xcc>)
 8000bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <SystemClock_Config+0xcc>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <SystemClock_Config+0xd0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <SystemClock_Config+0xd0>)
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <SystemClock_Config+0xd0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bec:	2301      	movs	r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c00:	2308      	movs	r3, #8
 8000c02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c04:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 fa7c 	bl	8003114 <HAL_RCC_OscConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c22:	f000 f8e5 	bl	8000df0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	230f      	movs	r3, #15
 8000c28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2105      	movs	r1, #5
 8000c44:	4618      	mov	r0, r3
 8000c46:	f002 fcdd 	bl	8003604 <HAL_RCC_ClockConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c50:	f000 f8ce 	bl	8000df0 <Error_Handler>
  }
}
 8000c54:	bf00      	nop
 8000c56:	3750      	adds	r7, #80	; 0x50
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c6a:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <MX_SPI1_Init+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c98:	2218      	movs	r2, #24
 8000c9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000cb0:	220a      	movs	r2, #10
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_SPI1_Init+0x64>)
 8000cb6:	f002 fe6d 	bl	8003994 <HAL_SPI_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cc0:	f000 f896 	bl	8000df0 <Error_Handler>
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200000d8 	.word	0x200000d8
 8000ccc:	40013000 	.word	0x40013000

08000cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b098      	sub	sp, #96	; 0x60
 8000cd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b40      	ldr	r3, [pc, #256]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a3f      	ldr	r2, [pc, #252]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b39      	ldr	r3, [pc, #228]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a38      	ldr	r2, [pc, #224]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b32      	ldr	r3, [pc, #200]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_GPIO_Init+0x10c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 - CS PIN for RC522(SPI1)*/
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d46:	2310      	movs	r3, #16
 8000d48:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	653b      	str	r3, [r7, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	657b      	str	r3, [r7, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	65bb      	str	r3, [r7, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4820      	ldr	r0, [pc, #128]	; (8000de0 <MX_GPIO_Init+0x110>)
 8000d5e:	f000 fd7b 	bl	8001858 <HAL_GPIO_Init>


  /*Configure GPIO pins : PD12 PD13 PD14 PD15 - BOARD LEDs*/
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000d62:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	653b      	str	r3, [r7, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	657b      	str	r3, [r7, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	65bb      	str	r3, [r7, #88]	; 0x58
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d78:	4619      	mov	r1, r3
 8000d7a:	481a      	ldr	r0, [pc, #104]	; (8000de4 <MX_GPIO_Init+0x114>)
 8000d7c:	f000 fd6c 	bl	8001858 <HAL_GPIO_Init>


  /*Configure GPIO pins for keypad  */
  GPIO_InitTypeDef keypadRows;
  keypadRows.Pin =  R1_PIN | R2_PIN | R3_PIN | R4_PIN;
 8000d80:	23f0      	movs	r3, #240	; 0xf0
 8000d82:	63bb      	str	r3, [r7, #56]	; 0x38
  keypadRows.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  keypadRows.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	643b      	str	r3, [r7, #64]	; 0x40
  keypadRows.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	647b      	str	r3, [r7, #68]	; 0x44

  HAL_GPIO_Init(R1_PORT, &keypadRows);
 8000d90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d94:	4619      	mov	r1, r3
 8000d96:	4814      	ldr	r0, [pc, #80]	; (8000de8 <MX_GPIO_Init+0x118>)
 8000d98:	f000 fd5e 	bl	8001858 <HAL_GPIO_Init>

  GPIO_InitTypeDef keypadColumns;
  keypadColumns.Pin =  C1_PIN | C2_PIN | C3_PIN | C4_PIN;
 8000d9c:	f240 1307 	movw	r3, #263	; 0x107
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  keypadColumns.Mode = GPIO_MODE_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  keypadColumns.Pull = GPIO_PULLDOWN;
 8000da6:	2302      	movs	r3, #2
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c

  HAL_GPIO_Init(C1_PORT,&keypadColumns);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <MX_GPIO_Init+0x118>)
 8000db2:	f000 fd51 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pins for ledbar  */
  GPIO_InitTypeDef ledbar;
  ledbar.Pin =  L1_PIN | L2_PIN | L3_PIN | L4_PIN | L5_PIN | L6_PIN | L7_PIN | L8_PIN | L9_PIN | L10_PIN;
 8000db6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000dba:	613b      	str	r3, [r7, #16]
  ledbar.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
  ledbar.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  ledbar.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LEDBAR_PORT, &ledbar);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4807      	ldr	r0, [pc, #28]	; (8000dec <MX_GPIO_Init+0x11c>)
 8000dd0:	f000 fd42 	bl	8001858 <HAL_GPIO_Init>

}
 8000dd4:	bf00      	nop
 8000dd6:	3760      	adds	r7, #96	; 0x60
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40020800 	.word	0x40020800

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <Error_Handler+0x8>
	...

08000dfc <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af02      	add	r7, sp, #8
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8000e0a:	f107 0208 	add.w	r2, r7, #8
 8000e0e:	f107 010c 	add.w	r1, r7, #12
 8000e12:	230a      	movs	r3, #10
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2301      	movs	r3, #1
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <SPI1SendByte+0x2c>)
 8000e1a:	f002 fe44 	bl	8003aa6 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8000e1e:	7a3b      	ldrb	r3, [r7, #8]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200000d8 	.word	0x200000d8

08000e2c <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	71fb      	strb	r3, [r7, #7]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2110      	movs	r1, #16
 8000e40:	4809      	ldr	r0, [pc, #36]	; (8000e68 <SPI1_WriteReg+0x3c>)
 8000e42:	f000 febd 	bl	8001bc0 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ffd7 	bl	8000dfc <SPI1SendByte>
	SPI1SendByte(value);
 8000e4e:	79bb      	ldrb	r3, [r7, #6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ffd3 	bl	8000dfc <SPI1SendByte>
	cs_set();
 8000e56:	2201      	movs	r2, #1
 8000e58:	2110      	movs	r1, #16
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <SPI1_WriteReg+0x3c>)
 8000e5c:	f000 feb0 	bl	8001bc0 <HAL_GPIO_WritePin>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40020000 	.word	0x40020000

08000e6c <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8000e76:	2200      	movs	r2, #0
 8000e78:	2110      	movs	r1, #16
 8000e7a:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <SPI1_ReadReg+0x3c>)
 8000e7c:	f000 fea0 	bl	8001bc0 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ffba 	bl	8000dfc <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff ffb7 	bl	8000dfc <SPI1SendByte>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000e92:	2201      	movs	r2, #1
 8000e94:	2110      	movs	r1, #16
 8000e96:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <SPI1_ReadReg+0x3c>)
 8000e98:	f000 fe92 	bl	8001bc0 <HAL_GPIO_WritePin>
	return val;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40020000 	.word	0x40020000

08000eac <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000ec6:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8000ec8:	79ba      	ldrb	r2, [r7, #6]
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ffac 	bl	8000e2c <SPI1_WriteReg>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000ef0:	b25b      	sxtb	r3, r3
 8000ef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ffb5 	bl	8000e6c <SPI1_ReadReg>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
	return val;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	2026      	movs	r0, #38	; 0x26
 8000f1c:	f000 f86a 	bl	8000ff4 <MFRC522_Request>
 8000f20:	4603      	mov	r3, r0
 8000f22:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d104      	bne.n	8000f34 <MFRC522_Check+0x24>
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f956 	bl	80011dc <MFRC522_Anticoll>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation
 8000f34:	f000 fa19 	bl	800136a <MFRC522_Halt>
	return status;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <MFRC522_Compare>:

uint8_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 8000f42:	b480      	push	{r7}
 8000f44:	b085      	sub	sp, #20
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	e00e      	b.n	8000f70 <MFRC522_Compare+0x2e>
		if (CardID[i] != CompareID[i]) return MI_ERR;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	4413      	add	r3, r2
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	6839      	ldr	r1, [r7, #0]
 8000f5e:	440b      	add	r3, r1
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d001      	beq.n	8000f6a <MFRC522_Compare+0x28>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e006      	b.n	8000f78 <MFRC522_Compare+0x36>
	for (i = 0; i < 5; i++) {
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d9ed      	bls.n	8000f52 <MFRC522_Compare+0x10>
	}
	return MI_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ffa0 	bl	8000edc <MFRC522_ReadRegister>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	79bb      	ldrb	r3, [r7, #6]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff7e 	bl	8000eac <MFRC522_WriteRegister>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff86 	bl	8000edc <MFRC522_ReadRegister>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	b25a      	sxtb	r2, r3
 8000fd4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	4013      	ands	r3, r2
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff60 	bl	8000eac <MFRC522_WriteRegister>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8001000:	2107      	movs	r1, #7
 8001002:	200d      	movs	r0, #13
 8001004:	f7ff ff52 	bl	8000eac <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	79fa      	ldrb	r2, [r7, #7]
 800100c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2201      	movs	r2, #1
 8001018:	6839      	ldr	r1, [r7, #0]
 800101a:	200c      	movs	r0, #12
 800101c:	f000 f80f 	bl	800103e <MFRC522_ToCard>
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <MFRC522_Request+0x3c>
 800102a:	89bb      	ldrh	r3, [r7, #12]
 800102c:	2b10      	cmp	r3, #16
 800102e:	d001      	beq.n	8001034 <MFRC522_Request+0x40>
 8001030:	2302      	movs	r3, #2
 8001032:	73fb      	strb	r3, [r7, #15]
	return status;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800103e:	b590      	push	{r4, r7, lr}
 8001040:	b087      	sub	sp, #28
 8001042:	af00      	add	r7, sp, #0
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	4613      	mov	r3, r2
 800104e:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8001050:	2302      	movs	r3, #2
 8001052:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001054:	2300      	movs	r3, #0
 8001056:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001058:	2300      	movs	r3, #0
 800105a:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b0c      	cmp	r3, #12
 8001060:	d006      	beq.n	8001070 <MFRC522_ToCard+0x32>
 8001062:	2b0e      	cmp	r3, #14
 8001064:	d109      	bne.n	800107a <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001066:	2312      	movs	r3, #18
 8001068:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800106a:	2310      	movs	r3, #16
 800106c:	757b      	strb	r3, [r7, #21]
			break;
 800106e:	e005      	b.n	800107c <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001070:	2377      	movs	r3, #119	; 0x77
 8001072:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001074:	2330      	movs	r3, #48	; 0x30
 8001076:	757b      	strb	r3, [r7, #21]
			break;
 8001078:	e000      	b.n	800107c <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800107a:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800107c:	7dbb      	ldrb	r3, [r7, #22]
 800107e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	2002      	movs	r0, #2
 8001088:	f7ff ff10 	bl	8000eac <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	2004      	movs	r0, #4
 8001090:	f7ff ff92 	bl	8000fb8 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	200a      	movs	r0, #10
 8001098:	f7ff ff74 	bl	8000f84 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800109c:	2100      	movs	r1, #0
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff ff04 	bl	8000eac <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80010a4:	2300      	movs	r3, #0
 80010a6:	827b      	strh	r3, [r7, #18]
 80010a8:	e00a      	b.n	80010c0 <MFRC522_ToCard+0x82>
 80010aa:	8a7b      	ldrh	r3, [r7, #18]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	4619      	mov	r1, r3
 80010b4:	2009      	movs	r0, #9
 80010b6:	f7ff fef9 	bl	8000eac <MFRC522_WriteRegister>
 80010ba:	8a7b      	ldrh	r3, [r7, #18]
 80010bc:	3301      	adds	r3, #1
 80010be:	827b      	strh	r3, [r7, #18]
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	8a7a      	ldrh	r2, [r7, #18]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3ef      	bcc.n	80010aa <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	4619      	mov	r1, r3
 80010ce:	2001      	movs	r0, #1
 80010d0:	f7ff feec 	bl	8000eac <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b0c      	cmp	r3, #12
 80010d8:	d103      	bne.n	80010e2 <MFRC522_ToCard+0xa4>
 80010da:	2180      	movs	r1, #128	; 0x80
 80010dc:	200d      	movs	r0, #13
 80010de:	f7ff ff51 	bl	8000f84 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80010e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010e6:	827b      	strh	r3, [r7, #18]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 80010e8:	2004      	movs	r0, #4
 80010ea:	f7ff fef7 	bl	8000edc <MFRC522_ReadRegister>
 80010ee:	4603      	mov	r3, r0
 80010f0:	753b      	strb	r3, [r7, #20]
		i--;
 80010f2:	8a7b      	ldrh	r3, [r7, #18]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80010f8:	8a7b      	ldrh	r3, [r7, #18]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00a      	beq.n	8001114 <MFRC522_ToCard+0xd6>
 80010fe:	7d3b      	ldrb	r3, [r7, #20]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d105      	bne.n	8001114 <MFRC522_ToCard+0xd6>
 8001108:	7d3a      	ldrb	r2, [r7, #20]
 800110a:	7d7b      	ldrb	r3, [r7, #21]
 800110c:	4013      	ands	r3, r2
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0e9      	beq.n	80010e8 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	200d      	movs	r0, #13
 8001118:	f7ff ff4e 	bl	8000fb8 <MFRC522_ClearBitMask>

	if (i != 0)  {
 800111c:	8a7b      	ldrh	r3, [r7, #18]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d057      	beq.n	80011d2 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001122:	2006      	movs	r0, #6
 8001124:	f7ff feda 	bl	8000edc <MFRC522_ReadRegister>
 8001128:	4603      	mov	r3, r0
 800112a:	f003 031b 	and.w	r3, r3, #27
 800112e:	2b00      	cmp	r3, #0
 8001130:	d14d      	bne.n	80011ce <MFRC522_ToCard+0x190>
			status = MI_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8001136:	7d3a      	ldrb	r2, [r7, #20]
 8001138:	7dbb      	ldrb	r3, [r7, #22]
 800113a:	4013      	ands	r3, r2
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MFRC522_ToCard+0x10c>
 8001146:	2301      	movs	r3, #1
 8001148:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	2b0c      	cmp	r3, #12
 800114e:	d140      	bne.n	80011d2 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001150:	200a      	movs	r0, #10
 8001152:	f7ff fec3 	bl	8000edc <MFRC522_ReadRegister>
 8001156:	4603      	mov	r3, r0
 8001158:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800115a:	200c      	movs	r0, #12
 800115c:	f7ff febe 	bl	8000edc <MFRC522_ReadRegister>
 8001160:	4603      	mov	r3, r0
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8001168:	7c7b      	ldrb	r3, [r7, #17]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00b      	beq.n	8001186 <MFRC522_ToCard+0x148>
 800116e:	7d3b      	ldrb	r3, [r7, #20]
 8001170:	3b01      	subs	r3, #1
 8001172:	b29b      	uxth	r3, r3
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	b29a      	uxth	r2, r3
 8001178:	7c7b      	ldrb	r3, [r7, #17]
 800117a:	b29b      	uxth	r3, r3
 800117c:	4413      	add	r3, r2
 800117e:	b29a      	uxth	r2, r3
 8001180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001182:	801a      	strh	r2, [r3, #0]
 8001184:	e005      	b.n	8001192 <MFRC522_ToCard+0x154>
 8001186:	7d3b      	ldrb	r3, [r7, #20]
 8001188:	b29b      	uxth	r3, r3
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	b29a      	uxth	r2, r3
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8001192:	7d3b      	ldrb	r3, [r7, #20]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <MFRC522_ToCard+0x15e>
 8001198:	2301      	movs	r3, #1
 800119a:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 800119c:	7d3b      	ldrb	r3, [r7, #20]
 800119e:	2b10      	cmp	r3, #16
 80011a0:	d901      	bls.n	80011a6 <MFRC522_ToCard+0x168>
 80011a2:	2310      	movs	r3, #16
 80011a4:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 80011a6:	2300      	movs	r3, #0
 80011a8:	827b      	strh	r3, [r7, #18]
 80011aa:	e00a      	b.n	80011c2 <MFRC522_ToCard+0x184>
 80011ac:	8a7b      	ldrh	r3, [r7, #18]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	18d4      	adds	r4, r2, r3
 80011b2:	2009      	movs	r0, #9
 80011b4:	f7ff fe92 	bl	8000edc <MFRC522_ReadRegister>
 80011b8:	4603      	mov	r3, r0
 80011ba:	7023      	strb	r3, [r4, #0]
 80011bc:	8a7b      	ldrh	r3, [r7, #18]
 80011be:	3301      	adds	r3, #1
 80011c0:	827b      	strh	r3, [r7, #18]
 80011c2:	7d3b      	ldrb	r3, [r7, #20]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	8a7a      	ldrh	r2, [r7, #18]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d3ef      	bcc.n	80011ac <MFRC522_ToCard+0x16e>
 80011cc:	e001      	b.n	80011d2 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 80011ce:	2302      	movs	r3, #2
 80011d0:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd90      	pop	{r4, r7, pc}

080011dc <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 80011e8:	2100      	movs	r1, #0
 80011ea:	200d      	movs	r0, #13
 80011ec:	f7ff fe5e 	bl	8000eac <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2293      	movs	r2, #147	; 0x93
 80011f4:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3301      	adds	r3, #1
 80011fa:	2220      	movs	r2, #32
 80011fc:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80011fe:	f107 030a 	add.w	r3, r7, #10
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2202      	movs	r2, #2
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	200c      	movs	r0, #12
 800120c:	f7ff ff17 	bl	800103e <MFRC522_ToCard>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d118      	bne.n	800124c <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 800121a:	2300      	movs	r3, #0
 800121c:	73bb      	strb	r3, [r7, #14]
 800121e:	e009      	b.n	8001234 <MFRC522_Anticoll+0x58>
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	7b7b      	ldrb	r3, [r7, #13]
 800122a:	4053      	eors	r3, r2
 800122c:	737b      	strb	r3, [r7, #13]
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	3301      	adds	r3, #1
 8001232:	73bb      	strb	r3, [r7, #14]
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d9f2      	bls.n	8001220 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	7b7a      	ldrb	r2, [r7, #13]
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <MFRC522_Anticoll+0x70>
 8001248:	2302      	movs	r3, #2
 800124a:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001256:	b590      	push	{r4, r7, lr}
 8001258:	b087      	sub	sp, #28
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	460b      	mov	r3, r1
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8001264:	2104      	movs	r1, #4
 8001266:	2005      	movs	r0, #5
 8001268:	f7ff fea6 	bl	8000fb8 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	200a      	movs	r0, #10
 8001270:	f7ff fe88 	bl	8000f84 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001274:	2300      	movs	r3, #0
 8001276:	75fb      	strb	r3, [r7, #23]
 8001278:	e00a      	b.n	8001290 <MFRC522_CalculateCRC+0x3a>
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4619      	mov	r1, r3
 8001284:	2009      	movs	r0, #9
 8001286:	f7ff fe11 	bl	8000eac <MFRC522_WriteRegister>
 800128a:	7dfb      	ldrb	r3, [r7, #23]
 800128c:	3301      	adds	r3, #1
 800128e:	75fb      	strb	r3, [r7, #23]
 8001290:	7dfa      	ldrb	r2, [r7, #23]
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	429a      	cmp	r2, r3
 8001296:	d3f0      	bcc.n	800127a <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001298:	2103      	movs	r1, #3
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff fe06 	bl	8000eac <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 80012a0:	23ff      	movs	r3, #255	; 0xff
 80012a2:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80012a4:	2005      	movs	r0, #5
 80012a6:	f7ff fe19 	bl	8000edc <MFRC522_ReadRegister>
 80012aa:	4603      	mov	r3, r0
 80012ac:	75bb      	strb	r3, [r7, #22]
		i--;
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																		// CRCIrq = 1
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <MFRC522_CalculateCRC+0x6e>
 80012ba:	7dbb      	ldrb	r3, [r7, #22]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0ef      	beq.n	80012a4 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80012c4:	2022      	movs	r0, #34	; 0x22
 80012c6:	f7ff fe09 	bl	8000edc <MFRC522_ReadRegister>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	1c5c      	adds	r4, r3, #1
 80012d6:	2021      	movs	r0, #33	; 0x21
 80012d8:	f7ff fe00 	bl	8000edc <MFRC522_ReadRegister>
 80012dc:	4603      	mov	r3, r0
 80012de:	7023      	strb	r3, [r4, #0]
}
 80012e0:	bf00      	nop
 80012e2:	371c      	adds	r7, #28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd90      	pop	{r4, r7, pc}

080012e8 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 80012ec:	f000 f820 	bl	8001330 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80012f0:	218d      	movs	r1, #141	; 0x8d
 80012f2:	202a      	movs	r0, #42	; 0x2a
 80012f4:	f7ff fdda 	bl	8000eac <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80012f8:	213e      	movs	r1, #62	; 0x3e
 80012fa:	202b      	movs	r0, #43	; 0x2b
 80012fc:	f7ff fdd6 	bl	8000eac <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8001300:	211e      	movs	r1, #30
 8001302:	202d      	movs	r0, #45	; 0x2d
 8001304:	f7ff fdd2 	bl	8000eac <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001308:	2100      	movs	r1, #0
 800130a:	202c      	movs	r0, #44	; 0x2c
 800130c:	f7ff fdce 	bl	8000eac <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain
 8001310:	2170      	movs	r1, #112	; 0x70
 8001312:	2026      	movs	r0, #38	; 0x26
 8001314:	f7ff fdca 	bl	8000eac <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001318:	2140      	movs	r1, #64	; 0x40
 800131a:	2015      	movs	r0, #21
 800131c:	f7ff fdc6 	bl	8000eac <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001320:	213d      	movs	r1, #61	; 0x3d
 8001322:	2011      	movs	r0, #17
 8001324:	f7ff fdc2 	bl	8000eac <MFRC522_WriteRegister>
	MFRC522_AntennaOn();											// Open the antenna
 8001328:	f000 f80a 	bl	8001340 <MFRC522_AntennaOn>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001334:	210f      	movs	r1, #15
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff fdb8 	bl	8000eac <MFRC522_WriteRegister>
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001346:	2014      	movs	r0, #20
 8001348:	f7ff fdc8 	bl	8000edc <MFRC522_ReadRegister>
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d103      	bne.n	8001362 <MFRC522_AntennaOn+0x22>
 800135a:	2103      	movs	r1, #3
 800135c:	2014      	movs	r0, #20
 800135e:	f7ff fe11 	bl	8000f84 <MFRC522_SetBitMask>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8001370:	2350      	movs	r3, #80	; 0x50
 8001372:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001378:	463b      	mov	r3, r7
 800137a:	1c9a      	adds	r2, r3, #2
 800137c:	463b      	mov	r3, r7
 800137e:	2102      	movs	r1, #2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff68 	bl	8001256 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001386:	463a      	mov	r2, r7
 8001388:	4639      	mov	r1, r7
 800138a:	1dbb      	adds	r3, r7, #6
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4613      	mov	r3, r2
 8001390:	2204      	movs	r2, #4
 8001392:	200c      	movs	r0, #12
 8001394:	f7ff fe53 	bl	800103e <MFRC522_ToCard>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_MspInit+0x4c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_MspInit+0x4c>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_MspInit+0x4c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_MspInit+0x4c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_MspInit+0x4c>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_MspInit+0x4c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013de:	2007      	movs	r0, #7
 80013e0:	f000 fa06 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800

080013f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a19      	ldr	r2, [pc, #100]	; (8001474 <HAL_SPI_MspInit+0x84>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d12b      	bne.n	800146a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_SPI_MspInit+0x88>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_SPI_MspInit+0x88>)
 800141c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_SPI_MspInit+0x88>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_SPI_MspInit+0x88>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_SPI_MspInit+0x88>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_SPI_MspInit+0x88>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800144a:	23e0      	movs	r3, #224	; 0xe0
 800144c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800145a:	2305      	movs	r3, #5
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <HAL_SPI_MspInit+0x8c>)
 8001466:	f000 f9f7 	bl	8001858 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800146a:	bf00      	nop
 800146c:	3728      	adds	r7, #40	; 0x28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40013000 	.word	0x40013000
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 f89a 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <OTG_FS_IRQHandler+0x10>)
 80014da:	f000 fb8a 	bl	8001bf2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000017c 	.word	0x2000017c

080014e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <SystemInit+0x20>)
 80014ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <SystemInit+0x20>)
 80014f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001544 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001512:	490e      	ldr	r1, [pc, #56]	; (800154c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001528:	4c0b      	ldr	r4, [pc, #44]	; (8001558 <LoopFillZerobss+0x26>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001536:	f7ff ffd7 	bl	80014e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f003 f927 	bl	800478c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153e:	f7ff f9f7 	bl	8000930 <main>
  bx  lr    
 8001542:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001550:	08004850 	.word	0x08004850
  ldr r2, =_sbss
 8001554:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001558:	20000480 	.word	0x20000480

0800155c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_Init+0x40>)
 800156a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_Init+0x40>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x40>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f931 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	2000      	movs	r0, #0
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff ff04 	bl	80013a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f93b 	bl	800183e <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015e0:	f000 f911 	bl	8001806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000044 	.word	0x20000044
 80015fc:	2000004c 	.word	0x2000004c
 8001600:	20000048 	.word	0x20000048

08001604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x20>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_IncTick+0x24>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2000004c 	.word	0x2000004c
 8001628:	20000178 	.word	0x20000178

0800162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_GetTick+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000178 	.word	0x20000178

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_Delay+0x44>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffde 	bl	800162c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000004c 	.word	0x2000004c

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	; (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	; 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017bc:	d301      	bcc.n	80017c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <SysTick_Config+0x40>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ca:	210f      	movs	r1, #15
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017d0:	f7ff ff8e 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <SysTick_Config+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SysTick_Config+0x40>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff47 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001818:	f7ff ff5c 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 800181c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7ff ff8e 	bl	8001744 <NVIC_EncodePriority>
 8001828:	4602      	mov	r2, r0
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff5d 	bl	80016f0 <__NVIC_SetPriority>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffb0 	bl	80017ac <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	e16b      	b.n	8001b4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	f040 815a 	bne.w	8001b46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d005      	beq.n	80018aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d130      	bne.n	800190c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 0201 	and.w	r2, r3, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b03      	cmp	r3, #3
 8001916:	d017      	beq.n	8001948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d123      	bne.n	800199c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	69b9      	ldr	r1, [r7, #24]
 8001998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80b4 	beq.w	8001b46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b60      	ldr	r3, [pc, #384]	; (8001b64 <HAL_GPIO_Init+0x30c>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a5f      	ldr	r2, [pc, #380]	; (8001b64 <HAL_GPIO_Init+0x30c>)
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <HAL_GPIO_Init+0x30c>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fa:	4a5b      	ldr	r2, [pc, #364]	; (8001b68 <HAL_GPIO_Init+0x310>)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	3302      	adds	r3, #2
 8001a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	220f      	movs	r2, #15
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_GPIO_Init+0x314>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d02b      	beq.n	8001a7e <HAL_GPIO_Init+0x226>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a51      	ldr	r2, [pc, #324]	; (8001b70 <HAL_GPIO_Init+0x318>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d025      	beq.n	8001a7a <HAL_GPIO_Init+0x222>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a50      	ldr	r2, [pc, #320]	; (8001b74 <HAL_GPIO_Init+0x31c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d01f      	beq.n	8001a76 <HAL_GPIO_Init+0x21e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4f      	ldr	r2, [pc, #316]	; (8001b78 <HAL_GPIO_Init+0x320>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d019      	beq.n	8001a72 <HAL_GPIO_Init+0x21a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4e      	ldr	r2, [pc, #312]	; (8001b7c <HAL_GPIO_Init+0x324>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x216>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4d      	ldr	r2, [pc, #308]	; (8001b80 <HAL_GPIO_Init+0x328>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_GPIO_Init+0x212>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4c      	ldr	r2, [pc, #304]	; (8001b84 <HAL_GPIO_Init+0x32c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <HAL_GPIO_Init+0x20e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4b      	ldr	r2, [pc, #300]	; (8001b88 <HAL_GPIO_Init+0x330>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_Init+0x20a>
 8001a5e:	2307      	movs	r3, #7
 8001a60:	e00e      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a62:	2308      	movs	r3, #8
 8001a64:	e00c      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a66:	2306      	movs	r3, #6
 8001a68:	e00a      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	e008      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a6e:	2304      	movs	r3, #4
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a72:	2303      	movs	r3, #3
 8001a74:	e004      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	f002 0203 	and.w	r2, r2, #3
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	4093      	lsls	r3, r2
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a90:	4935      	ldr	r1, [pc, #212]	; (8001b68 <HAL_GPIO_Init+0x310>)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	3302      	adds	r3, #2
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9e:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <HAL_GPIO_Init+0x334>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac2:	4a32      	ldr	r2, [pc, #200]	; (8001b8c <HAL_GPIO_Init+0x334>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ac8:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <HAL_GPIO_Init+0x334>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aec:	4a27      	ldr	r2, [pc, #156]	; (8001b8c <HAL_GPIO_Init+0x334>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <HAL_GPIO_Init+0x334>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b16:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <HAL_GPIO_Init+0x334>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_GPIO_Init+0x334>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <HAL_GPIO_Init+0x334>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	f67f ae90 	bls.w	8001874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40013800 	.word	0x40013800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020400 	.word	0x40020400
 8001b74:	40020800 	.word	0x40020800
 8001b78:	40020c00 	.word	0x40020c00
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40021400 	.word	0x40021400
 8001b84:	40021800 	.word	0x40021800
 8001b88:	40021c00 	.word	0x40021c00
 8001b8c:	40013c00 	.word	0x40013c00

08001b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 fa8a 	bl	8004122 <USB_GetMode>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	f040 80f6 	bne.w	8001e02 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 fa6e 	bl	80040fc <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80ec 	beq.w	8001e00 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 fa65 	bl	80040fc <USB_ReadInterrupts>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c3c:	d104      	bne.n	8001c48 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c46:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 fa55 	bl	80040fc <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c5c:	d104      	bne.n	8001c68 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c66:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 fa45 	bl	80040fc <USB_ReadInterrupts>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c7c:	d104      	bne.n	8001c88 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c86:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fa35 	bl	80040fc <USB_ReadInterrupts>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d103      	bne.n	8001ca4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 fa27 	bl	80040fc <USB_ReadInterrupts>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cb8:	d11c      	bne.n	8001cf4 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cc2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10f      	bne.n	8001cf4 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001cd4:	2110      	movs	r1, #16
 8001cd6:	6938      	ldr	r0, [r7, #16]
 8001cd8:	f002 f974 	bl	8003fc4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001cdc:	6938      	ldr	r0, [r7, #16]
 8001cde:	f002 f995 	bl	800400c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 fa28 	bl	800413e <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f002 fccd 	bl	800468e <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 f9ff 	bl	80040fc <USB_ReadInterrupts>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d08:	d102      	bne.n	8001d10 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f001 f98e 	bl	800302c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 f9f1 	bl	80040fc <USB_ReadInterrupts>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d106      	bne.n	8001d32 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f002 fc96 	bl	8004656 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2208      	movs	r2, #8
 8001d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 f9e0 	bl	80040fc <USB_ReadInterrupts>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d101      	bne.n	8001d4a <HAL_HCD_IRQHandler+0x158>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_HCD_IRQHandler+0x15a>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d012      	beq.n	8001d76 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0210 	bic.w	r2, r2, #16
 8001d5e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f001 f891 	bl	8002e88 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699a      	ldr	r2, [r3, #24]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0210 	orr.w	r2, r2, #16
 8001d74:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f002 f9be 	bl	80040fc <USB_ReadInterrupts>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d8a:	d13a      	bne.n	8001e02 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f002 fa0e 	bl	80041b2 <USB_HC_ReadInterrupt>
 8001d96:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e025      	b.n	8001dea <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d018      	beq.n	8001de4 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dc8:	d106      	bne.n	8001dd8 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f836 	bl	8001e42 <HCD_HC_IN_IRQHandler>
 8001dd6:	e005      	b.n	8001de4 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fc51 	bl	8002686 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3301      	adds	r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d3d4      	bcc.n	8001d9e <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfc:	615a      	str	r2, [r3, #20]
 8001dfe:	e000      	b.n	8001e02 <HAL_HCD_IRQHandler+0x210>
      return;
 8001e00:	bf00      	nop
    }
  }
}
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_HCD_Stop+0x16>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e00d      	b.n	8001e3a <HAL_HCD_Stop+0x32>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f002 faee 	bl	800440c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d119      	bne.n	8001ea6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2304      	movs	r3, #4
 8001e82:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	0151      	lsls	r1, r2, #5
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	440a      	add	r2, r1
 8001e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e9e:	f043 0302 	orr.w	r3, r3, #2
 8001ea2:	60d3      	str	r3, [r2, #12]
 8001ea4:	e101      	b.n	80020aa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ebc:	d12b      	bne.n	8001f16 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	212c      	movs	r1, #44	; 0x2c
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	3361      	adds	r3, #97	; 0x61
 8001ee0:	2207      	movs	r2, #7
 8001ee2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	0151      	lsls	r1, r2, #5
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	440a      	add	r2, r1
 8001efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 f960 	bl	80041d4 <USB_HC_Halt>
 8001f14:	e0c9      	b.n	80020aa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d109      	bne.n	8001f40 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	6093      	str	r3, [r2, #8]
 8001f3e:	e0b4      	b.n	80020aa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d133      	bne.n	8001fbe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	0151      	lsls	r1, r2, #5
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	440a      	add	r2, r1
 8001f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	3361      	adds	r3, #97	; 0x61
 8001f84:	2205      	movs	r2, #5
 8001f86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	2310      	movs	r3, #16
 8001f98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2308      	movs	r3, #8
 8001faa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 f90c 	bl	80041d4 <USB_HC_Halt>
 8001fbc:	e075      	b.n	80020aa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd4:	d134      	bne.n	8002040 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	0151      	lsls	r1, r2, #5
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	440a      	add	r2, r1
 8001fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	3361      	adds	r3, #97	; 0x61
 8002004:	2208      	movs	r2, #8
 8002006:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	461a      	mov	r2, r3
 8002016:	2310      	movs	r3, #16
 8002018:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4413      	add	r3, r2
 8002022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002026:	461a      	mov	r2, r3
 8002028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f002 f8cb 	bl	80041d4 <USB_HC_Halt>
 800203e:	e034      	b.n	80020aa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	2b80      	cmp	r3, #128	; 0x80
 8002054:	d129      	bne.n	80020aa <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	0151      	lsls	r1, r2, #5
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	440a      	add	r2, r1
 800206c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	212c      	movs	r1, #44	; 0x2c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	3361      	adds	r3, #97	; 0x61
 8002084:	2206      	movs	r2, #6
 8002086:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f002 f89e 	bl	80041d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a4:	461a      	mov	r2, r3
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c0:	d122      	bne.n	8002108 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	0151      	lsls	r1, r2, #5
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	440a      	add	r2, r1
 80020d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 f871 	bl	80041d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	461a      	mov	r2, r3
 8002100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002104:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002106:	e2ba      	b.n	800267e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	f040 811b 	bne.w	8002356 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d019      	beq.n	800215c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3348      	adds	r3, #72	; 0x48
 8002136:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	0159      	lsls	r1, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	440b      	add	r3, r1
 8002140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800214a:	1ad2      	subs	r2, r2, r3
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	202c      	movs	r0, #44	; 0x2c
 8002152:	fb00 f303 	mul.w	r3, r0, r3
 8002156:	440b      	add	r3, r1
 8002158:	3350      	adds	r3, #80	; 0x50
 800215a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3361      	adds	r3, #97	; 0x61
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	335c      	adds	r3, #92	; 0x5c
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218c:	461a      	mov	r2, r3
 800218e:	2301      	movs	r3, #1
 8002190:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	333f      	adds	r3, #63	; 0x3f
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	333f      	adds	r3, #63	; 0x3f
 80021b4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d121      	bne.n	80021fe <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	0151      	lsls	r1, r2, #5
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	440a      	add	r2, r1
 80021d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 fff5 	bl	80041d4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f6:	461a      	mov	r2, r3
 80021f8:	2310      	movs	r3, #16
 80021fa:	6093      	str	r3, [r2, #8]
 80021fc:	e066      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	333f      	adds	r3, #63	; 0x3f
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d127      	bne.n	8002262 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	0151      	lsls	r1, r2, #5
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	440a      	add	r2, r1
 8002228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800222c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002230:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	3360      	adds	r3, #96	; 0x60
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	b2d9      	uxtb	r1, r3
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	202c      	movs	r0, #44	; 0x2c
 800224e:	fb00 f303 	mul.w	r3, r0, r3
 8002252:	4413      	add	r3, r2
 8002254:	3360      	adds	r3, #96	; 0x60
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f002 fa25 	bl	80046aa <HAL_HCD_HC_NotifyURBChange_Callback>
 8002260:	e034      	b.n	80022cc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	333f      	adds	r3, #63	; 0x3f
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d12a      	bne.n	80022cc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	3360      	adds	r3, #96	; 0x60
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3354      	adds	r3, #84	; 0x54
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	f083 0301 	eor.w	r3, r3, #1
 800229c:	b2d8      	uxtb	r0, r3
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3354      	adds	r3, #84	; 0x54
 80022ac:	4602      	mov	r2, r0
 80022ae:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	b2d9      	uxtb	r1, r3
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	202c      	movs	r0, #44	; 0x2c
 80022ba:	fb00 f303 	mul.w	r3, r0, r3
 80022be:	4413      	add	r3, r2
 80022c0:	3360      	adds	r3, #96	; 0x60
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f002 f9ef 	bl	80046aa <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d12b      	bne.n	800232c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	212c      	movs	r1, #44	; 0x2c
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4413      	add	r3, r2
 80022e0:	3348      	adds	r3, #72	; 0x48
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	202c      	movs	r0, #44	; 0x2c
 80022ea:	fb00 f202 	mul.w	r2, r0, r2
 80022ee:	440a      	add	r2, r1
 80022f0:	3240      	adds	r2, #64	; 0x40
 80022f2:	8812      	ldrh	r2, [r2, #0]
 80022f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 81be 	beq.w	800267e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	3354      	adds	r3, #84	; 0x54
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	f083 0301 	eor.w	r3, r3, #1
 8002316:	b2d8      	uxtb	r0, r3
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	212c      	movs	r1, #44	; 0x2c
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4413      	add	r3, r2
 8002324:	3354      	adds	r3, #84	; 0x54
 8002326:	4602      	mov	r2, r0
 8002328:	701a      	strb	r2, [r3, #0]
}
 800232a:	e1a8      	b.n	800267e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3354      	adds	r3, #84	; 0x54
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f083 0301 	eor.w	r3, r3, #1
 8002340:	b2d8      	uxtb	r0, r3
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	3354      	adds	r3, #84	; 0x54
 8002350:	4602      	mov	r2, r0
 8002352:	701a      	strb	r2, [r3, #0]
}
 8002354:	e193      	b.n	800267e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b02      	cmp	r3, #2
 800236a:	f040 8106 	bne.w	800257a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	0151      	lsls	r1, r2, #5
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	440a      	add	r2, r1
 8002384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002388:	f023 0302 	bic.w	r3, r3, #2
 800238c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	3361      	adds	r3, #97	; 0x61
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d109      	bne.n	80023b6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	3360      	adds	r3, #96	; 0x60
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e0c9      	b.n	800254a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	3361      	adds	r3, #97	; 0x61
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d109      	bne.n	80023de <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3360      	adds	r3, #96	; 0x60
 80023d8:	2205      	movs	r2, #5
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e0b5      	b.n	800254a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	3361      	adds	r3, #97	; 0x61
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d009      	beq.n	8002406 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3361      	adds	r3, #97	; 0x61
 8002400:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002402:	2b08      	cmp	r3, #8
 8002404:	d150      	bne.n	80024a8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	335c      	adds	r3, #92	; 0x5c
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	202c      	movs	r0, #44	; 0x2c
 800241e:	fb00 f303 	mul.w	r3, r0, r3
 8002422:	440b      	add	r3, r1
 8002424:	335c      	adds	r3, #92	; 0x5c
 8002426:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	212c      	movs	r1, #44	; 0x2c
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4413      	add	r3, r2
 8002434:	335c      	adds	r3, #92	; 0x5c
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d912      	bls.n	8002462 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	212c      	movs	r1, #44	; 0x2c
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	335c      	adds	r3, #92	; 0x5c
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	3360      	adds	r3, #96	; 0x60
 800245c:	2204      	movs	r2, #4
 800245e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002460:	e073      	b.n	800254a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3360      	adds	r3, #96	; 0x60
 8002470:	2202      	movs	r2, #2
 8002472:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800248a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002492:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024a6:	e050      	b.n	800254a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	3361      	adds	r3, #97	; 0x61
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d122      	bne.n	8002502 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3360      	adds	r3, #96	; 0x60
 80024ca:	2202      	movs	r2, #2
 80024cc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024e4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024ec:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e023      	b.n	800254a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	212c      	movs	r1, #44	; 0x2c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	3361      	adds	r3, #97	; 0x61
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b07      	cmp	r3, #7
 8002514:	d119      	bne.n	800254a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	335c      	adds	r3, #92	; 0x5c
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	202c      	movs	r0, #44	; 0x2c
 800252e:	fb00 f303 	mul.w	r3, r0, r3
 8002532:	440b      	add	r3, r1
 8002534:	335c      	adds	r3, #92	; 0x5c
 8002536:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3360      	adds	r3, #96	; 0x60
 8002546:	2204      	movs	r2, #4
 8002548:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	461a      	mov	r2, r3
 8002558:	2302      	movs	r3, #2
 800255a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	b2d9      	uxtb	r1, r3
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	202c      	movs	r0, #44	; 0x2c
 8002566:	fb00 f303 	mul.w	r3, r0, r3
 800256a:	4413      	add	r3, r2
 800256c:	3360      	adds	r3, #96	; 0x60
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f002 f899 	bl	80046aa <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002578:	e081      	b.n	800267e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b10      	cmp	r3, #16
 800258e:	d176      	bne.n	800267e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	333f      	adds	r3, #63	; 0x3f
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d121      	bne.n	80025e8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	335c      	adds	r3, #92	; 0x5c
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	0151      	lsls	r1, r2, #5
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	440a      	add	r2, r1
 80025cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f001 fdf7 	bl	80041d4 <USB_HC_Halt>
 80025e6:	e041      	b.n	800266c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	212c      	movs	r1, #44	; 0x2c
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	333f      	adds	r3, #63	; 0x3f
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	333f      	adds	r3, #63	; 0x3f
 800260a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800260c:	2b02      	cmp	r3, #2
 800260e:	d12d      	bne.n	800266c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	335c      	adds	r3, #92	; 0x5c
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d120      	bne.n	800266c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3361      	adds	r3, #97	; 0x61
 8002638:	2203      	movs	r2, #3
 800263a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	0151      	lsls	r1, r2, #5
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	440a      	add	r2, r1
 8002652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002656:	f043 0302 	orr.w	r3, r3, #2
 800265a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f001 fdb4 	bl	80041d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	461a      	mov	r2, r3
 800267a:	2310      	movs	r3, #16
 800267c:	6093      	str	r3, [r2, #8]
}
 800267e:	bf00      	nop
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b088      	sub	sp, #32
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d119      	bne.n	80026ea <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	461a      	mov	r2, r3
 80026c4:	2304      	movs	r3, #4
 80026c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	0151      	lsls	r1, r2, #5
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	440a      	add	r2, r1
 80026de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80026e8:	e3ca      	b.n	8002e80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d13e      	bne.n	800277e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	2320      	movs	r3, #32
 8002710:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	333d      	adds	r3, #61	; 0x3d
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	f040 83ac 	bne.w	8002e80 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	333d      	adds	r3, #61	; 0x3d
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3360      	adds	r3, #96	; 0x60
 8002748:	2202      	movs	r2, #2
 800274a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	0151      	lsls	r1, r2, #5
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	440a      	add	r2, r1
 8002762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002766:	f043 0302 	orr.w	r3, r3, #2
 800276a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f001 fd2c 	bl	80041d4 <USB_HC_Halt>
}
 800277c:	e380      	b.n	8002e80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002794:	d122      	bne.n	80027dc <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	0151      	lsls	r1, r2, #5
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	440a      	add	r2, r1
 80027ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fd07 	bl	80041d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	461a      	mov	r2, r3
 80027d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d8:	6093      	str	r3, [r2, #8]
}
 80027da:	e351      	b.n	8002e80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d150      	bne.n	8002894 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	335c      	adds	r3, #92	; 0x5c
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b40      	cmp	r3, #64	; 0x40
 8002818:	d111      	bne.n	800283e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	333d      	adds	r3, #61	; 0x3d
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	461a      	mov	r2, r3
 800283a:	2340      	movs	r3, #64	; 0x40
 800283c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	0151      	lsls	r1, r2, #5
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	440a      	add	r2, r1
 8002854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f001 fcb3 	bl	80041d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	4413      	add	r3, r2
 8002876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287a:	461a      	mov	r2, r3
 800287c:	2301      	movs	r3, #1
 800287e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3361      	adds	r3, #97	; 0x61
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
}
 8002892:	e2f5      	b.n	8002e80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	d13c      	bne.n	8002924 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3361      	adds	r3, #97	; 0x61
 80028b8:	2204      	movs	r2, #4
 80028ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	333d      	adds	r3, #61	; 0x3d
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	335c      	adds	r3, #92	; 0x5c
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	0151      	lsls	r1, r2, #5
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	440a      	add	r2, r1
 80028f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f001 fc62 	bl	80041d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	461a      	mov	r2, r3
 800291e:	2340      	movs	r3, #64	; 0x40
 8002920:	6093      	str	r3, [r2, #8]
}
 8002922:	e2ad      	b.n	8002e80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b08      	cmp	r3, #8
 8002938:	d12a      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	461a      	mov	r2, r3
 8002948:	2308      	movs	r3, #8
 800294a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	0151      	lsls	r1, r2, #5
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	440a      	add	r2, r1
 8002962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f001 fc2c 	bl	80041d4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3361      	adds	r3, #97	; 0x61
 800298a:	2205      	movs	r2, #5
 800298c:	701a      	strb	r2, [r3, #0]
}
 800298e:	e277      	b.n	8002e80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d150      	bne.n	8002a48 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	335c      	adds	r3, #92	; 0x5c
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3361      	adds	r3, #97	; 0x61
 80029c6:	2203      	movs	r2, #3
 80029c8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	333d      	adds	r3, #61	; 0x3d
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d112      	bne.n	8002a04 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	333c      	adds	r3, #60	; 0x3c
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d108      	bne.n	8002a04 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	333d      	adds	r3, #61	; 0x3d
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	0151      	lsls	r1, r2, #5
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	440a      	add	r2, r1
 8002a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 fbd0 	bl	80041d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a40:	461a      	mov	r2, r3
 8002a42:	2310      	movs	r3, #16
 8002a44:	6093      	str	r3, [r2, #8]
}
 8002a46:	e21b      	b.n	8002e80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5a:	2b80      	cmp	r3, #128	; 0x80
 8002a5c:	d174      	bne.n	8002b48 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d121      	bne.n	8002aaa <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	3361      	adds	r3, #97	; 0x61
 8002a74:	2206      	movs	r2, #6
 8002a76:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	0151      	lsls	r1, r2, #5
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	440a      	add	r2, r1
 8002a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a92:	f043 0302 	orr.w	r3, r3, #2
 8002a96:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 fb96 	bl	80041d4 <USB_HC_Halt>
 8002aa8:	e044      	b.n	8002b34 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	335c      	adds	r3, #92	; 0x5c
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	202c      	movs	r0, #44	; 0x2c
 8002ac2:	fb00 f303 	mul.w	r3, r0, r3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	335c      	adds	r3, #92	; 0x5c
 8002aca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	335c      	adds	r3, #92	; 0x5c
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d920      	bls.n	8002b22 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	335c      	adds	r3, #92	; 0x5c
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	3360      	adds	r3, #96	; 0x60
 8002b00:	2204      	movs	r2, #4
 8002b02:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	b2d9      	uxtb	r1, r3
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	202c      	movs	r0, #44	; 0x2c
 8002b0e:	fb00 f303 	mul.w	r3, r0, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3360      	adds	r3, #96	; 0x60
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f001 fdc5 	bl	80046aa <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b20:	e008      	b.n	8002b34 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3360      	adds	r3, #96	; 0x60
 8002b30:	2202      	movs	r2, #2
 8002b32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	6093      	str	r3, [r2, #8]
}
 8002b46:	e19b      	b.n	8002e80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5e:	d134      	bne.n	8002bca <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	0151      	lsls	r1, r2, #5
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	440a      	add	r2, r1
 8002b76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b7a:	f043 0302 	orr.w	r3, r3, #2
 8002b7e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 fb22 	bl	80041d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2310      	movs	r3, #16
 8002ba0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3361      	adds	r3, #97	; 0x61
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	701a      	strb	r2, [r3, #0]
}
 8002bc8:	e15a      	b.n	8002e80 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	f040 814f 	bne.w	8002e80 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	0151      	lsls	r1, r2, #5
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	440a      	add	r2, r1
 8002bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bfc:	f023 0302 	bic.w	r3, r3, #2
 8002c00:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	212c      	movs	r1, #44	; 0x2c
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3361      	adds	r3, #97	; 0x61
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d17d      	bne.n	8002d12 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3360      	adds	r3, #96	; 0x60
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	333f      	adds	r3, #63	; 0x3f
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d00a      	beq.n	8002c52 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	333f      	adds	r3, #63	; 0x3f
 8002c4a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	f040 8100 	bne.w	8002e52 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d113      	bne.n	8002c82 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3355      	adds	r3, #85	; 0x55
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	f083 0301 	eor.w	r3, r3, #1
 8002c6e:	b2d8      	uxtb	r0, r3
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3355      	adds	r3, #85	; 0x55
 8002c7e:	4602      	mov	r2, r0
 8002c80:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	f040 80e3 	bne.w	8002e52 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	334c      	adds	r3, #76	; 0x4c
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80d8 	beq.w	8002e52 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	212c      	movs	r1, #44	; 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	334c      	adds	r3, #76	; 0x4c
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	202c      	movs	r0, #44	; 0x2c
 8002cb8:	fb00 f202 	mul.w	r2, r0, r2
 8002cbc:	440a      	add	r2, r1
 8002cbe:	3240      	adds	r2, #64	; 0x40
 8002cc0:	8812      	ldrh	r2, [r2, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	202c      	movs	r0, #44	; 0x2c
 8002ccc:	fb00 f202 	mul.w	r2, r0, r2
 8002cd0:	440a      	add	r2, r1
 8002cd2:	3240      	adds	r2, #64	; 0x40
 8002cd4:	8812      	ldrh	r2, [r2, #0]
 8002cd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80b5 	beq.w	8002e52 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3355      	adds	r3, #85	; 0x55
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	f083 0301 	eor.w	r3, r3, #1
 8002cfc:	b2d8      	uxtb	r0, r3
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3355      	adds	r3, #85	; 0x55
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	e09f      	b.n	8002e52 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3361      	adds	r3, #97	; 0x61
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d109      	bne.n	8002d3a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3360      	adds	r3, #96	; 0x60
 8002d34:	2202      	movs	r2, #2
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	e08b      	b.n	8002e52 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3361      	adds	r3, #97	; 0x61
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d109      	bne.n	8002d62 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3360      	adds	r3, #96	; 0x60
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	e077      	b.n	8002e52 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3361      	adds	r3, #97	; 0x61
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b05      	cmp	r3, #5
 8002d74:	d109      	bne.n	8002d8a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	3360      	adds	r3, #96	; 0x60
 8002d84:	2205      	movs	r2, #5
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e063      	b.n	8002e52 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3361      	adds	r3, #97	; 0x61
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d009      	beq.n	8002db2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3361      	adds	r3, #97	; 0x61
 8002dac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d14f      	bne.n	8002e52 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	335c      	adds	r3, #92	; 0x5c
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	202c      	movs	r0, #44	; 0x2c
 8002dca:	fb00 f303 	mul.w	r3, r0, r3
 8002dce:	440b      	add	r3, r1
 8002dd0:	335c      	adds	r3, #92	; 0x5c
 8002dd2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	335c      	adds	r3, #92	; 0x5c
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d912      	bls.n	8002e0e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	335c      	adds	r3, #92	; 0x5c
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	3360      	adds	r3, #96	; 0x60
 8002e08:	2204      	movs	r2, #4
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	e021      	b.n	8002e52 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	212c      	movs	r1, #44	; 0x2c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	3360      	adds	r3, #96	; 0x60
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e36:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e3e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2302      	movs	r3, #2
 8002e62:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	b2d9      	uxtb	r1, r3
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	202c      	movs	r0, #44	; 0x2c
 8002e6e:	fb00 f303 	mul.w	r3, r0, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3360      	adds	r3, #96	; 0x60
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f001 fc15 	bl	80046aa <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e80:	bf00      	nop
 8002e82:	3720      	adds	r7, #32
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	0c5b      	lsrs	r3, r3, #17
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ebc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d004      	beq.n	8002ece <HCD_RXQLVL_IRQHandler+0x46>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b05      	cmp	r3, #5
 8002ec8:	f000 80a9 	beq.w	800301e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ecc:	e0aa      	b.n	8003024 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80a6 	beq.w	8003022 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	212c      	movs	r1, #44	; 0x2c
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3344      	adds	r3, #68	; 0x44
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 809b 	beq.w	8003022 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3350      	adds	r3, #80	; 0x50
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	441a      	add	r2, r3
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	202c      	movs	r0, #44	; 0x2c
 8002f06:	fb00 f303 	mul.w	r3, r0, r3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	334c      	adds	r3, #76	; 0x4c
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d87a      	bhi.n	800300a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	3344      	adds	r3, #68	; 0x44
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	b292      	uxth	r2, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f001 f88d 	bl	800404c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	212c      	movs	r1, #44	; 0x2c
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3344      	adds	r3, #68	; 0x44
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	441a      	add	r2, r3
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	202c      	movs	r0, #44	; 0x2c
 8002f4c:	fb00 f303 	mul.w	r3, r0, r3
 8002f50:	440b      	add	r3, r1
 8002f52:	3344      	adds	r3, #68	; 0x44
 8002f54:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3350      	adds	r3, #80	; 0x50
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	441a      	add	r2, r3
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	202c      	movs	r0, #44	; 0x2c
 8002f70:	fb00 f303 	mul.w	r3, r0, r3
 8002f74:	440b      	add	r3, r1
 8002f76:	3350      	adds	r3, #80	; 0x50
 8002f78:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	0cdb      	lsrs	r3, r3, #19
 8002f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f8e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3340      	adds	r3, #64	; 0x40
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d13c      	bne.n	8003022 <HCD_RXQLVL_IRQHandler+0x19a>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d039      	beq.n	8003022 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fc4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fcc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	212c      	movs	r1, #44	; 0x2c
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	4413      	add	r3, r2
 8002fec:	3354      	adds	r3, #84	; 0x54
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	f083 0301 	eor.w	r3, r3, #1
 8002ff4:	b2d8      	uxtb	r0, r3
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	212c      	movs	r1, #44	; 0x2c
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	3354      	adds	r3, #84	; 0x54
 8003004:	4602      	mov	r2, r0
 8003006:	701a      	strb	r2, [r3, #0]
      break;
 8003008:	e00b      	b.n	8003022 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	3360      	adds	r3, #96	; 0x60
 8003018:	2204      	movs	r2, #4
 800301a:	701a      	strb	r2, [r3, #0]
      break;
 800301c:	e001      	b.n	8003022 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800301e:	bf00      	nop
 8003020:	e000      	b.n	8003024 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003022:	bf00      	nop
  }
}
 8003024:	bf00      	nop
 8003026:	3728      	adds	r7, #40	; 0x28
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003058:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b02      	cmp	r3, #2
 8003062:	d10b      	bne.n	800307c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b01      	cmp	r3, #1
 800306c:	d102      	bne.n	8003074 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f001 faff 	bl	8004672 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f043 0302 	orr.w	r3, r3, #2
 800307a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b08      	cmp	r3, #8
 8003084:	d132      	bne.n	80030ec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f043 0308 	orr.w	r3, r3, #8
 800308c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b04      	cmp	r3, #4
 8003096:	d126      	bne.n	80030e6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d113      	bne.n	80030c8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80030a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030aa:	d106      	bne.n	80030ba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2102      	movs	r1, #2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 f843 	bl	800413e <USB_InitFSLSPClkSel>
 80030b8:	e011      	b.n	80030de <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2101      	movs	r1, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f001 f83c 	bl	800413e <USB_InitFSLSPClkSel>
 80030c6:	e00a      	b.n	80030de <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d106      	bne.n	80030de <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030d6:	461a      	mov	r2, r3
 80030d8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030dc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f001 faf1 	bl	80046c6 <HAL_HCD_PortEnabled_Callback>
 80030e4:	e002      	b.n	80030ec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f001 fafb 	bl	80046e2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d103      	bne.n	80030fe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f043 0320 	orr.w	r3, r3, #32
 80030fc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003104:	461a      	mov	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	6013      	str	r3, [r2, #0]
}
 800310a:	bf00      	nop
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e264      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d075      	beq.n	800321e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003132:	4ba3      	ldr	r3, [pc, #652]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b04      	cmp	r3, #4
 800313c:	d00c      	beq.n	8003158 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313e:	4ba0      	ldr	r3, [pc, #640]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003146:	2b08      	cmp	r3, #8
 8003148:	d112      	bne.n	8003170 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800314a:	4b9d      	ldr	r3, [pc, #628]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003156:	d10b      	bne.n	8003170 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	4b99      	ldr	r3, [pc, #612]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d05b      	beq.n	800321c <HAL_RCC_OscConfig+0x108>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d157      	bne.n	800321c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e23f      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003178:	d106      	bne.n	8003188 <HAL_RCC_OscConfig+0x74>
 800317a:	4b91      	ldr	r3, [pc, #580]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a90      	ldr	r2, [pc, #576]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e01d      	b.n	80031c4 <HAL_RCC_OscConfig+0xb0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x98>
 8003192:	4b8b      	ldr	r3, [pc, #556]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a8a      	ldr	r2, [pc, #552]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	4b88      	ldr	r3, [pc, #544]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a87      	ldr	r2, [pc, #540]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e00b      	b.n	80031c4 <HAL_RCC_OscConfig+0xb0>
 80031ac:	4b84      	ldr	r3, [pc, #528]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a83      	ldr	r2, [pc, #524]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 80031b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b81      	ldr	r3, [pc, #516]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a80      	ldr	r2, [pc, #512]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 80031be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d013      	beq.n	80031f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fe fa2e 	bl	800162c <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d4:	f7fe fa2a 	bl	800162c <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	; 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e204      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	4b76      	ldr	r3, [pc, #472]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0xc0>
 80031f2:	e014      	b.n	800321e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe fa1a 	bl	800162c <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fe fa16 	bl	800162c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e1f0      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0xe8>
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d063      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800322a:	4b65      	ldr	r3, [pc, #404]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003236:	4b62      	ldr	r3, [pc, #392]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800323e:	2b08      	cmp	r3, #8
 8003240:	d11c      	bne.n	800327c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003242:	4b5f      	ldr	r3, [pc, #380]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d116      	bne.n	800327c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324e:	4b5c      	ldr	r3, [pc, #368]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_RCC_OscConfig+0x152>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e1c4      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003266:	4b56      	ldr	r3, [pc, #344]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4952      	ldr	r1, [pc, #328]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	e03a      	b.n	80032f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d020      	beq.n	80032c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003284:	4b4f      	ldr	r3, [pc, #316]	; (80033c4 <HAL_RCC_OscConfig+0x2b0>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fe f9cf 	bl	800162c <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003292:	f7fe f9cb 	bl	800162c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e1a5      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a4:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b0:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4940      	ldr	r1, [pc, #256]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]
 80032c4:	e015      	b.n	80032f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c6:	4b3f      	ldr	r3, [pc, #252]	; (80033c4 <HAL_RCC_OscConfig+0x2b0>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe f9ae 	bl	800162c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d4:	f7fe f9aa 	bl	800162c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e184      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d030      	beq.n	8003360 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d016      	beq.n	8003334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003306:	4b30      	ldr	r3, [pc, #192]	; (80033c8 <HAL_RCC_OscConfig+0x2b4>)
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe f98e 	bl	800162c <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003314:	f7fe f98a 	bl	800162c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e164      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003326:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x200>
 8003332:	e015      	b.n	8003360 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003334:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <HAL_RCC_OscConfig+0x2b4>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333a:	f7fe f977 	bl	800162c <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003342:	f7fe f973 	bl	800162c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e14d      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003354:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f0      	bne.n	8003342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80a0 	beq.w	80034ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336e:	2300      	movs	r3, #0
 8003370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003372:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10f      	bne.n	800339e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338c:	6413      	str	r3, [r2, #64]	; 0x40
 800338e:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <HAL_RCC_OscConfig+0x2ac>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339a:	2301      	movs	r3, #1
 800339c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_OscConfig+0x2b8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d121      	bne.n	80033ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_RCC_OscConfig+0x2b8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a07      	ldr	r2, [pc, #28]	; (80033cc <HAL_RCC_OscConfig+0x2b8>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b6:	f7fe f939 	bl	800162c <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033bc:	e011      	b.n	80033e2 <HAL_RCC_OscConfig+0x2ce>
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	42470000 	.word	0x42470000
 80033c8:	42470e80 	.word	0x42470e80
 80033cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d0:	f7fe f92c 	bl	800162c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e106      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e2:	4b85      	ldr	r3, [pc, #532]	; (80035f8 <HAL_RCC_OscConfig+0x4e4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d106      	bne.n	8003404 <HAL_RCC_OscConfig+0x2f0>
 80033f6:	4b81      	ldr	r3, [pc, #516]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	4a80      	ldr	r2, [pc, #512]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	6713      	str	r3, [r2, #112]	; 0x70
 8003402:	e01c      	b.n	800343e <HAL_RCC_OscConfig+0x32a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b05      	cmp	r3, #5
 800340a:	d10c      	bne.n	8003426 <HAL_RCC_OscConfig+0x312>
 800340c:	4b7b      	ldr	r3, [pc, #492]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	4a7a      	ldr	r2, [pc, #488]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 8003412:	f043 0304 	orr.w	r3, r3, #4
 8003416:	6713      	str	r3, [r2, #112]	; 0x70
 8003418:	4b78      	ldr	r3, [pc, #480]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	4a77      	ldr	r2, [pc, #476]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6713      	str	r3, [r2, #112]	; 0x70
 8003424:	e00b      	b.n	800343e <HAL_RCC_OscConfig+0x32a>
 8003426:	4b75      	ldr	r3, [pc, #468]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a74      	ldr	r2, [pc, #464]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6713      	str	r3, [r2, #112]	; 0x70
 8003432:	4b72      	ldr	r3, [pc, #456]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a71      	ldr	r2, [pc, #452]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d015      	beq.n	8003472 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fe f8f1 	bl	800162c <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344c:	e00a      	b.n	8003464 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fe f8ed 	bl	800162c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e0c5      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003464:	4b65      	ldr	r3, [pc, #404]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ee      	beq.n	800344e <HAL_RCC_OscConfig+0x33a>
 8003470:	e014      	b.n	800349c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003472:	f7fe f8db 	bl	800162c <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fe f8d7 	bl	800162c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	; 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e0af      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003490:	4b5a      	ldr	r3, [pc, #360]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1ee      	bne.n	800347a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800349c:	7dfb      	ldrb	r3, [r7, #23]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d105      	bne.n	80034ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a2:	4b56      	ldr	r3, [pc, #344]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	4a55      	ldr	r2, [pc, #340]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 80034a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 809b 	beq.w	80035ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034b8:	4b50      	ldr	r3, [pc, #320]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d05c      	beq.n	800357e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d141      	bne.n	8003550 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034cc:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <HAL_RCC_OscConfig+0x4ec>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fe f8ab 	bl	800162c <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034da:	f7fe f8a7 	bl	800162c <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e081      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ec:	4b43      	ldr	r3, [pc, #268]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f0      	bne.n	80034da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	019b      	lsls	r3, r3, #6
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	3b01      	subs	r3, #1
 8003512:	041b      	lsls	r3, r3, #16
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	061b      	lsls	r3, r3, #24
 800351c:	4937      	ldr	r1, [pc, #220]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003522:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_RCC_OscConfig+0x4ec>)
 8003524:	2201      	movs	r2, #1
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fe f880 	bl	800162c <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003530:	f7fe f87c 	bl	800162c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e056      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003542:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x41c>
 800354e:	e04e      	b.n	80035ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003550:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <HAL_RCC_OscConfig+0x4ec>)
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fe f869 	bl	800162c <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355e:	f7fe f865 	bl	800162c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e03f      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003570:	4b22      	ldr	r3, [pc, #136]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f0      	bne.n	800355e <HAL_RCC_OscConfig+0x44a>
 800357c:	e037      	b.n	80035ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e032      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800358a:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <HAL_RCC_OscConfig+0x4e8>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d028      	beq.n	80035ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d121      	bne.n	80035ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d11a      	bne.n	80035ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035ba:	4013      	ands	r3, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d111      	bne.n	80035ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	3b01      	subs	r3, #1
 80035d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d107      	bne.n	80035ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40007000 	.word	0x40007000
 80035fc:	40023800 	.word	0x40023800
 8003600:	42470060 	.word	0x42470060

08003604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0cc      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003618:	4b68      	ldr	r3, [pc, #416]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d90c      	bls.n	8003640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b65      	ldr	r3, [pc, #404]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b63      	ldr	r3, [pc, #396]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0b8      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003658:	4b59      	ldr	r3, [pc, #356]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a58      	ldr	r2, [pc, #352]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003670:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	4a52      	ldr	r2, [pc, #328]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800367a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367c:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	494d      	ldr	r1, [pc, #308]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d044      	beq.n	8003724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b47      	ldr	r3, [pc, #284]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d119      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e07f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d003      	beq.n	80036c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c2:	4b3f      	ldr	r3, [pc, #252]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e06f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e067      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e2:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f023 0203 	bic.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4934      	ldr	r1, [pc, #208]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f4:	f7fd ff9a 	bl	800162c <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fc:	f7fd ff96 	bl	800162c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e04f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 020c 	and.w	r2, r3, #12
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	429a      	cmp	r2, r3
 8003722:	d1eb      	bne.n	80036fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d20c      	bcs.n	800374c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e032      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4916      	ldr	r1, [pc, #88]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	490e      	ldr	r1, [pc, #56]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800378a:	f000 f821 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 800378e:	4602      	mov	r2, r0
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	490a      	ldr	r1, [pc, #40]	; (80037c4 <HAL_RCC_ClockConfig+0x1c0>)
 800379c:	5ccb      	ldrb	r3, [r1, r3]
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCC_ClockConfig+0x1c8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd fefa 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023c00 	.word	0x40023c00
 80037c0:	40023800 	.word	0x40023800
 80037c4:	08004830 	.word	0x08004830
 80037c8:	20000044 	.word	0x20000044
 80037cc:	20000048 	.word	0x20000048

080037d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	2300      	movs	r3, #0
 80037e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037e8:	4b67      	ldr	r3, [pc, #412]	; (8003988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d00d      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x40>
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	f200 80bd 	bhi.w	8003974 <HAL_RCC_GetSysClockFreq+0x1a4>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x34>
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d003      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x3a>
 8003802:	e0b7      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b61      	ldr	r3, [pc, #388]	; (800398c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003806:	60bb      	str	r3, [r7, #8]
       break;
 8003808:	e0b7      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800380a:	4b61      	ldr	r3, [pc, #388]	; (8003990 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800380c:	60bb      	str	r3, [r7, #8]
      break;
 800380e:	e0b4      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003810:	4b5d      	ldr	r3, [pc, #372]	; (8003988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003818:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800381a:	4b5b      	ldr	r3, [pc, #364]	; (8003988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d04d      	beq.n	80038c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003826:	4b58      	ldr	r3, [pc, #352]	; (8003988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	099b      	lsrs	r3, r3, #6
 800382c:	461a      	mov	r2, r3
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003836:	f04f 0100 	mov.w	r1, #0
 800383a:	ea02 0800 	and.w	r8, r2, r0
 800383e:	ea03 0901 	and.w	r9, r3, r1
 8003842:	4640      	mov	r0, r8
 8003844:	4649      	mov	r1, r9
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	014b      	lsls	r3, r1, #5
 8003850:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003854:	0142      	lsls	r2, r0, #5
 8003856:	4610      	mov	r0, r2
 8003858:	4619      	mov	r1, r3
 800385a:	ebb0 0008 	subs.w	r0, r0, r8
 800385e:	eb61 0109 	sbc.w	r1, r1, r9
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	018b      	lsls	r3, r1, #6
 800386c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003870:	0182      	lsls	r2, r0, #6
 8003872:	1a12      	subs	r2, r2, r0
 8003874:	eb63 0301 	sbc.w	r3, r3, r1
 8003878:	f04f 0000 	mov.w	r0, #0
 800387c:	f04f 0100 	mov.w	r1, #0
 8003880:	00d9      	lsls	r1, r3, #3
 8003882:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003886:	00d0      	lsls	r0, r2, #3
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	eb12 0208 	adds.w	r2, r2, r8
 8003890:	eb43 0309 	adc.w	r3, r3, r9
 8003894:	f04f 0000 	mov.w	r0, #0
 8003898:	f04f 0100 	mov.w	r1, #0
 800389c:	0259      	lsls	r1, r3, #9
 800389e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80038a2:	0250      	lsls	r0, r2, #9
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4610      	mov	r0, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	f7fc fc9a 	bl	80001ec <__aeabi_uldivmod>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4613      	mov	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e04a      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	099b      	lsrs	r3, r3, #6
 80038c8:	461a      	mov	r2, r3
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038d2:	f04f 0100 	mov.w	r1, #0
 80038d6:	ea02 0400 	and.w	r4, r2, r0
 80038da:	ea03 0501 	and.w	r5, r3, r1
 80038de:	4620      	mov	r0, r4
 80038e0:	4629      	mov	r1, r5
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	014b      	lsls	r3, r1, #5
 80038ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038f0:	0142      	lsls	r2, r0, #5
 80038f2:	4610      	mov	r0, r2
 80038f4:	4619      	mov	r1, r3
 80038f6:	1b00      	subs	r0, r0, r4
 80038f8:	eb61 0105 	sbc.w	r1, r1, r5
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	018b      	lsls	r3, r1, #6
 8003906:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800390a:	0182      	lsls	r2, r0, #6
 800390c:	1a12      	subs	r2, r2, r0
 800390e:	eb63 0301 	sbc.w	r3, r3, r1
 8003912:	f04f 0000 	mov.w	r0, #0
 8003916:	f04f 0100 	mov.w	r1, #0
 800391a:	00d9      	lsls	r1, r3, #3
 800391c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003920:	00d0      	lsls	r0, r2, #3
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	1912      	adds	r2, r2, r4
 8003928:	eb45 0303 	adc.w	r3, r5, r3
 800392c:	f04f 0000 	mov.w	r0, #0
 8003930:	f04f 0100 	mov.w	r1, #0
 8003934:	0299      	lsls	r1, r3, #10
 8003936:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800393a:	0290      	lsls	r0, r2, #10
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	461a      	mov	r2, r3
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	f7fc fc4e 	bl	80001ec <__aeabi_uldivmod>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4613      	mov	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	0c1b      	lsrs	r3, r3, #16
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	3301      	adds	r3, #1
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	60bb      	str	r3, [r7, #8]
      break;
 8003972:	e002      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003976:	60bb      	str	r3, [r7, #8]
      break;
 8003978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397a:	68bb      	ldr	r3, [r7, #8]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800
 800398c:	00f42400 	.word	0x00f42400
 8003990:	007a1200 	.word	0x007a1200

08003994 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e07b      	b.n	8003a9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d108      	bne.n	80039c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039b6:	d009      	beq.n	80039cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	61da      	str	r2, [r3, #28]
 80039be:	e005      	b.n	80039cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd fd02 	bl	80013f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a50:	ea42 0103 	orr.w	r1, r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	f003 0104 	and.w	r1, r3, #4
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	f003 0210 	and.w	r2, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b08c      	sub	sp, #48	; 0x30
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x26>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e18a      	b.n	8003de2 <HAL_SPI_TransmitReceive+0x33c>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ad4:	f7fd fdaa 	bl	800162c <HAL_GetTick>
 8003ad8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003aea:	887b      	ldrh	r3, [r7, #2]
 8003aec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003aee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d00f      	beq.n	8003b16 <HAL_SPI_TransmitReceive+0x70>
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afc:	d107      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x68>
 8003b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d003      	beq.n	8003b16 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b14:	e15b      	b.n	8003dce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x82>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x82>
 8003b22:	887b      	ldrh	r3, [r7, #2]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d103      	bne.n	8003b30 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b2e:	e14e      	b.n	8003dce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d003      	beq.n	8003b44 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2205      	movs	r2, #5
 8003b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	887a      	ldrh	r2, [r7, #2]
 8003b54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	887a      	ldrh	r2, [r7, #2]
 8003b5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	887a      	ldrh	r2, [r7, #2]
 8003b66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	887a      	ldrh	r2, [r7, #2]
 8003b6c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	d007      	beq.n	8003b98 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba0:	d178      	bne.n	8003c94 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_SPI_TransmitReceive+0x10a>
 8003baa:	8b7b      	ldrh	r3, [r7, #26]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d166      	bne.n	8003c7e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	881a      	ldrh	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	1c9a      	adds	r2, r3, #2
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd4:	e053      	b.n	8003c7e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d11b      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x176>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d016      	beq.n	8003c1c <HAL_SPI_TransmitReceive+0x176>
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d113      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	881a      	ldrh	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	1c9a      	adds	r2, r3, #2
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d119      	bne.n	8003c5e <HAL_SPI_TransmitReceive+0x1b8>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d014      	beq.n	8003c5e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	b292      	uxth	r2, r2
 8003c40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	1c9a      	adds	r2, r3, #2
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c5e:	f7fd fce5 	bl	800162c <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d807      	bhi.n	8003c7e <HAL_SPI_TransmitReceive+0x1d8>
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c74:	d003      	beq.n	8003c7e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c7c:	e0a7      	b.n	8003dce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1a6      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x130>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1a1      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x130>
 8003c92:	e07c      	b.n	8003d8e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_SPI_TransmitReceive+0x1fc>
 8003c9c:	8b7b      	ldrh	r3, [r7, #26]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d16b      	bne.n	8003d7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	330c      	adds	r3, #12
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc8:	e057      	b.n	8003d7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d11c      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0x26c>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d017      	beq.n	8003d12 <HAL_SPI_TransmitReceive+0x26c>
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d114      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	7812      	ldrb	r2, [r2, #0]
 8003cf4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d119      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x2ae>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d014      	beq.n	8003d54 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d50:	2301      	movs	r3, #1
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d54:	f7fd fc6a 	bl	800162c <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d803      	bhi.n	8003d6c <HAL_SPI_TransmitReceive+0x2c6>
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d6a:	d102      	bne.n	8003d72 <HAL_SPI_TransmitReceive+0x2cc>
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d78:	e029      	b.n	8003dce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1a2      	bne.n	8003cca <HAL_SPI_TransmitReceive+0x224>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d19d      	bne.n	8003cca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f8b2 	bl	8003efc <SPI_EndRxTxTransaction>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d006      	beq.n	8003dac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003daa:	e010      	b.n	8003dce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10b      	bne.n	8003dcc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	e000      	b.n	8003dce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003dcc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3730      	adds	r7, #48	; 0x30
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dfc:	f7fd fc16 	bl	800162c <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	4413      	add	r3, r2
 8003e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e0c:	f7fd fc0e 	bl	800162c <HAL_GetTick>
 8003e10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e12:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	015b      	lsls	r3, r3, #5
 8003e18:	0d1b      	lsrs	r3, r3, #20
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e22:	e054      	b.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e2a:	d050      	beq.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e2c:	f7fd fbfe 	bl	800162c <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d902      	bls.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d13d      	bne.n	8003ebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e5a:	d111      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e64:	d004      	beq.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6e:	d107      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e88:	d10f      	bne.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e017      	b.n	8003eee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d19b      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000044 	.word	0x20000044

08003efc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f08:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <SPI_EndRxTxTransaction+0x7c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <SPI_EndRxTxTransaction+0x80>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	0d5b      	lsrs	r3, r3, #21
 8003f14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f18:	fb02 f303 	mul.w	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f26:	d112      	bne.n	8003f4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2180      	movs	r1, #128	; 0x80
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff ff5a 	bl	8003dec <SPI_WaitFlagStateUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d016      	beq.n	8003f6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	f043 0220 	orr.w	r2, r3, #32
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e00f      	b.n	8003f6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f64:	2b80      	cmp	r3, #128	; 0x80
 8003f66:	d0f2      	beq.n	8003f4e <SPI_EndRxTxTransaction+0x52>
 8003f68:	e000      	b.n	8003f6c <SPI_EndRxTxTransaction+0x70>
        break;
 8003f6a:	bf00      	nop
  }

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000044 	.word	0x20000044
 8003f7c:	165e9f81 	.word	0x165e9f81

08003f80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f043 0201 	orr.w	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f023 0201 	bic.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	019b      	lsls	r3, r3, #6
 8003fd6:	f043 0220 	orr.w	r2, r3, #32
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	4a08      	ldr	r2, [pc, #32]	; (8004008 <USB_FlushTxFifo+0x44>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e006      	b.n	8003ffc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d0f1      	beq.n	8003fde <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	00030d40 	.word	0x00030d40

0800400c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2210      	movs	r2, #16
 800401c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3301      	adds	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	4a08      	ldr	r2, [pc, #32]	; (8004048 <USB_FlushRxFifo+0x3c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e006      	b.n	800403c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b10      	cmp	r3, #16
 8004038:	d0f1      	beq.n	800401e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	00030d40 	.word	0x00030d40

0800404c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800404c:	b480      	push	{r7}
 800404e:	b08b      	sub	sp, #44	; 0x2c
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	089b      	lsrs	r3, r3, #2
 8004066:	b29b      	uxth	r3, r3
 8004068:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800406a:	88fb      	ldrh	r3, [r7, #6]
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004072:	2300      	movs	r3, #0
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	e014      	b.n	80040a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	601a      	str	r2, [r3, #0]
    pDest++;
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	3301      	adds	r3, #1
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	3301      	adds	r3, #1
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	3301      	adds	r3, #1
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	3301      	adds	r3, #1
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	3301      	adds	r3, #1
 80040a0:	623b      	str	r3, [r7, #32]
 80040a2:	6a3a      	ldr	r2, [r7, #32]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d3e6      	bcc.n	8004078 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80040aa:	8bfb      	ldrh	r3, [r7, #30]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01e      	beq.n	80040ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ba:	461a      	mov	r2, r3
 80040bc:	f107 0310 	add.w	r3, r7, #16
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	701a      	strb	r2, [r3, #0]
      i++;
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	3301      	adds	r3, #1
 80040da:	623b      	str	r3, [r7, #32]
      pDest++;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	3301      	adds	r3, #1
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80040e2:	8bfb      	ldrh	r3, [r7, #30]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80040e8:	8bfb      	ldrh	r3, [r7, #30]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1ea      	bne.n	80040c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	372c      	adds	r7, #44	; 0x2c
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4013      	ands	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004114:	68fb      	ldr	r3, [r7, #12]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0301 	and.w	r3, r3, #1
}
 8004132:	4618      	mov	r0, r3
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	460b      	mov	r3, r1
 8004148:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800415c:	f023 0303 	bic.w	r3, r3, #3
 8004160:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	68f9      	ldr	r1, [r7, #12]
 8004172:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d107      	bne.n	8004190 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004186:	461a      	mov	r2, r3
 8004188:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800418c:	6053      	str	r3, [r2, #4]
 800418e:	e009      	b.n	80041a4 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d106      	bne.n	80041a4 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800419c:	461a      	mov	r2, r3
 800419e:	f241 7370 	movw	r3, #6000	; 0x1770
 80041a2:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	b29b      	uxth	r3, r3
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b089      	sub	sp, #36	; 0x24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	0c9b      	lsrs	r3, r3, #18
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	0fdb      	lsrs	r3, r3, #31
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b20      	cmp	r3, #32
 8004222:	d104      	bne.n	800422e <USB_HC_Halt+0x5a>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	e0e8      	b.n	8004400 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <USB_HC_Halt+0x66>
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d173      	bne.n	8004322 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4413      	add	r3, r2
 8004242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	440a      	add	r2, r1
 8004250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004254:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004258:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	f040 80cb 	bne.w	80043fe <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d143      	bne.n	80042fc <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	4413      	add	r3, r2
 800427c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	0151      	lsls	r1, r2, #5
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	440a      	add	r2, r1
 800428a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800428e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004292:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	0151      	lsls	r1, r2, #5
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	440a      	add	r2, r1
 80042aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042b2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	0151      	lsls	r1, r2, #5
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	440a      	add	r2, r1
 80042ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042d2:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	3301      	adds	r3, #1
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042e0:	d81d      	bhi.n	800431e <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f8:	d0ec      	beq.n	80042d4 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80042fa:	e080      	b.n	80043fe <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	440a      	add	r2, r1
 8004312:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800431a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800431c:	e06f      	b.n	80043fe <USB_HC_Halt+0x22a>
            break;
 800431e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004320:	e06d      	b.n	80043fe <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	4413      	add	r3, r2
 800432a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	440a      	add	r2, r1
 8004338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800433c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004340:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d143      	bne.n	80043da <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	4413      	add	r3, r2
 800435a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	0151      	lsls	r1, r2, #5
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	440a      	add	r2, r1
 8004368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800436c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004370:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	4413      	add	r3, r2
 800437a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	0151      	lsls	r1, r2, #5
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	440a      	add	r2, r1
 8004388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800438c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004390:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	4413      	add	r3, r2
 800439a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	0151      	lsls	r1, r2, #5
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	440a      	add	r2, r1
 80043a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043b0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3301      	adds	r3, #1
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043be:	d81d      	bhi.n	80043fc <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d6:	d0ec      	beq.n	80043b2 <USB_HC_Halt+0x1de>
 80043d8:	e011      	b.n	80043fe <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	0151      	lsls	r1, r2, #5
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	440a      	add	r2, r1
 80043f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e000      	b.n	80043fe <USB_HC_Halt+0x22a>
          break;
 80043fc:	bf00      	nop
    }
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3724      	adds	r7, #36	; 0x24
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff fdc0 	bl	8003fa2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004422:	2110      	movs	r1, #16
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff fdcd 	bl	8003fc4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff fdee 	bl	800400c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	e01f      	b.n	8004476 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4413      	add	r3, r2
 800443e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800444c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004454:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800445c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446a:	461a      	mov	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	3301      	adds	r3, #1
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b0f      	cmp	r3, #15
 800447a:	d9dc      	bls.n	8004436 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	e034      	b.n	80044ec <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004498:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044a8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b6:	461a      	mov	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	3301      	adds	r3, #1
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044c8:	d80c      	bhi.n	80044e4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044e0:	d0ec      	beq.n	80044bc <USB_StopHost+0xb0>
 80044e2:	e000      	b.n	80044e6 <USB_StopHost+0xda>
        break;
 80044e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	3301      	adds	r3, #1
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b0f      	cmp	r3, #15
 80044f0:	d9c7      	bls.n	8004482 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044f8:	461a      	mov	r2, r3
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004506:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fd39 	bl	8003f80 <USB_EnableGlobalInt>

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f804 	bl	800453c <USBH_HandleSof>
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b0b      	cmp	r3, #11
 800454c:	d10a      	bne.n	8004564 <USBH_HandleSof+0x28>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
  }
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800457c:	bf00      	nop
}
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8004598:	bf00      	nop
}
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f883 	bl	80046fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	791b      	ldrb	r3, [r3, #4]
 80045fc:	4619      	mov	r1, r3
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f80b 	bl	800461a <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	795b      	ldrb	r3, [r3, #5]
 8004608:	4619      	mov	r1, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f805 	bl	800461a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	460b      	mov	r3, r1
 8004624:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	2b0a      	cmp	r3, #10
 800462a:	d80d      	bhi.n	8004648 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	33e0      	adds	r3, #224	; 0xe0
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	33e0      	adds	r3, #224	; 0xe0
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff57 	bl	8004518 <USBH_LL_IncTimer>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ff8f 	bl	80045a4 <USBH_LL_Connect>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ff98 	bl	80045d2 <USBH_LL_Disconnect>
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	460b      	mov	r3, r1
 80046b4:	70fb      	strb	r3, [r7, #3]
 80046b6:	4613      	mov	r3, r2
 80046b8:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff49 	bl	800456c <USBH_LL_PortEnabled>
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff49 	bl	8004588 <USBH_LL_PortDisabled>
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004714:	4618      	mov	r0, r3
 8004716:	f7fd fb77 	bl	8001e08 <HAL_HCD_Stop>
 800471a:	4603      	mov	r3, r0
 800471c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f807 	bl	8004734 <USBH_Get_USB_Status>
 8004726:	4603      	mov	r3, r0
 8004728:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800472a:	7bbb      	ldrb	r3, [r7, #14]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	2b03      	cmp	r3, #3
 8004746:	d817      	bhi.n	8004778 <USBH_Get_USB_Status+0x44>
 8004748:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <USBH_Get_USB_Status+0x1c>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	08004761 	.word	0x08004761
 8004754:	08004767 	.word	0x08004767
 8004758:	0800476d 	.word	0x0800476d
 800475c:	08004773 	.word	0x08004773
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	73fb      	strb	r3, [r7, #15]
    break;
 8004764:	e00b      	b.n	800477e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004766:	2302      	movs	r3, #2
 8004768:	73fb      	strb	r3, [r7, #15]
    break;
 800476a:	e008      	b.n	800477e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
    break;
 8004770:	e005      	b.n	800477e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004772:	2302      	movs	r3, #2
 8004774:	73fb      	strb	r3, [r7, #15]
    break;
 8004776:	e002      	b.n	800477e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004778:	2302      	movs	r3, #2
 800477a:	73fb      	strb	r3, [r7, #15]
    break;
 800477c:	bf00      	nop
  }
  return usb_status;
 800477e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <__libc_init_array>:
 800478c:	b570      	push	{r4, r5, r6, lr}
 800478e:	4d0d      	ldr	r5, [pc, #52]	; (80047c4 <__libc_init_array+0x38>)
 8004790:	4c0d      	ldr	r4, [pc, #52]	; (80047c8 <__libc_init_array+0x3c>)
 8004792:	1b64      	subs	r4, r4, r5
 8004794:	10a4      	asrs	r4, r4, #2
 8004796:	2600      	movs	r6, #0
 8004798:	42a6      	cmp	r6, r4
 800479a:	d109      	bne.n	80047b0 <__libc_init_array+0x24>
 800479c:	4d0b      	ldr	r5, [pc, #44]	; (80047cc <__libc_init_array+0x40>)
 800479e:	4c0c      	ldr	r4, [pc, #48]	; (80047d0 <__libc_init_array+0x44>)
 80047a0:	f000 f834 	bl	800480c <_init>
 80047a4:	1b64      	subs	r4, r4, r5
 80047a6:	10a4      	asrs	r4, r4, #2
 80047a8:	2600      	movs	r6, #0
 80047aa:	42a6      	cmp	r6, r4
 80047ac:	d105      	bne.n	80047ba <__libc_init_array+0x2e>
 80047ae:	bd70      	pop	{r4, r5, r6, pc}
 80047b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b4:	4798      	blx	r3
 80047b6:	3601      	adds	r6, #1
 80047b8:	e7ee      	b.n	8004798 <__libc_init_array+0xc>
 80047ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80047be:	4798      	blx	r3
 80047c0:	3601      	adds	r6, #1
 80047c2:	e7f2      	b.n	80047aa <__libc_init_array+0x1e>
 80047c4:	08004848 	.word	0x08004848
 80047c8:	08004848 	.word	0x08004848
 80047cc:	08004848 	.word	0x08004848
 80047d0:	0800484c 	.word	0x0800484c

080047d4 <memset>:
 80047d4:	4402      	add	r2, r0
 80047d6:	4603      	mov	r3, r0
 80047d8:	4293      	cmp	r3, r2
 80047da:	d100      	bne.n	80047de <memset+0xa>
 80047dc:	4770      	bx	lr
 80047de:	f803 1b01 	strb.w	r1, [r3], #1
 80047e2:	e7f9      	b.n	80047d8 <memset+0x4>

080047e4 <strncat>:
 80047e4:	b530      	push	{r4, r5, lr}
 80047e6:	4604      	mov	r4, r0
 80047e8:	7825      	ldrb	r5, [r4, #0]
 80047ea:	4623      	mov	r3, r4
 80047ec:	3401      	adds	r4, #1
 80047ee:	2d00      	cmp	r5, #0
 80047f0:	d1fa      	bne.n	80047e8 <strncat+0x4>
 80047f2:	3a01      	subs	r2, #1
 80047f4:	d304      	bcc.n	8004800 <strncat+0x1c>
 80047f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047fa:	f803 4b01 	strb.w	r4, [r3], #1
 80047fe:	b904      	cbnz	r4, 8004802 <strncat+0x1e>
 8004800:	bd30      	pop	{r4, r5, pc}
 8004802:	2a00      	cmp	r2, #0
 8004804:	d1f5      	bne.n	80047f2 <strncat+0xe>
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	e7f3      	b.n	80047f2 <strncat+0xe>
	...

0800480c <_init>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr

08004818 <_fini>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	bf00      	nop
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr
