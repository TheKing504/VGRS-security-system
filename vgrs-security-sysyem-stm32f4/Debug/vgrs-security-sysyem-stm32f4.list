
vgrs-security-sysyem-stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000493c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae0  08004ae0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ae8  08004ae8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004af0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000043c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000498  20000498  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e1c  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000296b  00000000  00000000  00030ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  00033818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000aa0  00000000  00000000  000343e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225bb  00000000  00000000  00034e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef97  00000000  00000000  0005743b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca26f  00000000  00000000  000663d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00130641  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fac  00000000  00000000  00130694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004aac 	.word	0x08004aac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08004aac 	.word	0x08004aac

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <updateButtonsCombState>:
int8_t bb_led2State = 0;
int8_t bb_led3State = 0;
int8_t bb_led4State = 0;

void updateButtonsCombState(uint8_t* buttonsCombState)
{
 80004e4:	b5b0      	push	{r4, r5, r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	if (lastTimeUpdated == -1)
 80004ec:	4b61      	ldr	r3, [pc, #388]	; (8000674 <updateButtonsCombState+0x190>)
 80004ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80004f6:	bf08      	it	eq
 80004f8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80004fc:	d108      	bne.n	8000510 <updateButtonsCombState+0x2c>
	{
		lastTimeUpdated = HAL_GetTick();
 80004fe:	f001 f9e5 	bl	80018cc <HAL_GetTick>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	f04f 0300 	mov.w	r3, #0
 800050a:	495a      	ldr	r1, [pc, #360]	; (8000674 <updateButtonsCombState+0x190>)
 800050c:	e9c1 2300 	strd	r2, r3, [r1]
	}

    if (HAL_GetTick() - lastTimeUpdated >= BB_BOUNCING_FACTOR)
 8000510:	f001 f9dc 	bl	80018cc <HAL_GetTick>
 8000514:	4603      	mov	r3, r0
 8000516:	4618      	mov	r0, r3
 8000518:	f04f 0100 	mov.w	r1, #0
 800051c:	4b55      	ldr	r3, [pc, #340]	; (8000674 <updateButtonsCombState+0x190>)
 800051e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000522:	1a84      	subs	r4, r0, r2
 8000524:	eb61 0503 	sbc.w	r5, r1, r3
 8000528:	2cc8      	cmp	r4, #200	; 0xc8
 800052a:	f175 0300 	sbcs.w	r3, r5, #0
 800052e:	f2c0 8081 	blt.w	8000634 <updateButtonsCombState+0x150>
    {
    	int8_t bc1 = HAL_GPIO_ReadPin(BUTTONS_COMB_PORT, BB1_PIN);
 8000532:	2101      	movs	r1, #1
 8000534:	4850      	ldr	r0, [pc, #320]	; (8000678 <updateButtonsCombState+0x194>)
 8000536:	f001 fc7b 	bl	8001e30 <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	73fb      	strb	r3, [r7, #15]
    	int8_t bc2 = HAL_GPIO_ReadPin(BUTTONS_COMB_PORT, BB2_PIN);
 800053e:	2102      	movs	r1, #2
 8000540:	484d      	ldr	r0, [pc, #308]	; (8000678 <updateButtonsCombState+0x194>)
 8000542:	f001 fc75 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	73bb      	strb	r3, [r7, #14]
    	int8_t bc3 = HAL_GPIO_ReadPin(BUTTONS_COMB_PORT, BB3_PIN);
 800054a:	2104      	movs	r1, #4
 800054c:	484a      	ldr	r0, [pc, #296]	; (8000678 <updateButtonsCombState+0x194>)
 800054e:	f001 fc6f 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	737b      	strb	r3, [r7, #13]
    	int8_t bc4 = HAL_GPIO_ReadPin(BUTTONS_COMB_PORT, BB4_PIN);
 8000556:	2108      	movs	r1, #8
 8000558:	4847      	ldr	r0, [pc, #284]	; (8000678 <updateButtonsCombState+0x194>)
 800055a:	f001 fc69 	bl	8001e30 <HAL_GPIO_ReadPin>
 800055e:	4603      	mov	r3, r0
 8000560:	733b      	strb	r3, [r7, #12]

    	if (bc1 == GPIO_PIN_SET)
 8000562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d109      	bne.n	800057e <updateButtonsCombState+0x9a>
    	{
    		bb_led1State = toogleBBState(bb_led1State);
 800056a:	4b44      	ldr	r3, [pc, #272]	; (800067c <updateButtonsCombState+0x198>)
 800056c:	f993 3000 	ldrsb.w	r3, [r3]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f88b 	bl	800068c <toogleBBState>
 8000576:	4603      	mov	r3, r0
 8000578:	461a      	mov	r2, r3
 800057a:	4b40      	ldr	r3, [pc, #256]	; (800067c <updateButtonsCombState+0x198>)
 800057c:	701a      	strb	r2, [r3, #0]
    	}

    	if (bc2 == GPIO_PIN_SET)
 800057e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d109      	bne.n	800059a <updateButtonsCombState+0xb6>
    	{
    		bb_led2State = toogleBBState(bb_led2State);
 8000586:	4b3e      	ldr	r3, [pc, #248]	; (8000680 <updateButtonsCombState+0x19c>)
 8000588:	f993 3000 	ldrsb.w	r3, [r3]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f87d 	bl	800068c <toogleBBState>
 8000592:	4603      	mov	r3, r0
 8000594:	461a      	mov	r2, r3
 8000596:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <updateButtonsCombState+0x19c>)
 8000598:	701a      	strb	r2, [r3, #0]
    	}

    	if (bc3 == GPIO_PIN_SET)
 800059a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d109      	bne.n	80005b6 <updateButtonsCombState+0xd2>
    	{
    		bb_led3State = toogleBBState(bb_led3State);
 80005a2:	4b38      	ldr	r3, [pc, #224]	; (8000684 <updateButtonsCombState+0x1a0>)
 80005a4:	f993 3000 	ldrsb.w	r3, [r3]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f86f 	bl	800068c <toogleBBState>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b34      	ldr	r3, [pc, #208]	; (8000684 <updateButtonsCombState+0x1a0>)
 80005b4:	701a      	strb	r2, [r3, #0]
    	}

    	if (bc4 == GPIO_PIN_SET)
 80005b6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d109      	bne.n	80005d2 <updateButtonsCombState+0xee>
    	{
    		bb_led4State = toogleBBState(bb_led4State);
 80005be:	4b32      	ldr	r3, [pc, #200]	; (8000688 <updateButtonsCombState+0x1a4>)
 80005c0:	f993 3000 	ldrsb.w	r3, [r3]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f861 	bl	800068c <toogleBBState>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <updateButtonsCombState+0x1a4>)
 80005d0:	701a      	strb	r2, [r3, #0]
    	}

    	HAL_GPIO_WritePin(BUTTONS_COMB_PORT, BL1_PIN, bb_led1State);
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <updateButtonsCombState+0x198>)
 80005d4:	f993 3000 	ldrsb.w	r3, [r3]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e0:	4825      	ldr	r0, [pc, #148]	; (8000678 <updateButtonsCombState+0x194>)
 80005e2:	f001 fc3d 	bl	8001e60 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(BUTTONS_COMB_PORT, BL2_PIN, bb_led2State);
 80005e6:	4b26      	ldr	r3, [pc, #152]	; (8000680 <updateButtonsCombState+0x19c>)
 80005e8:	f993 3000 	ldrsb.w	r3, [r3]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	461a      	mov	r2, r3
 80005f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f4:	4820      	ldr	r0, [pc, #128]	; (8000678 <updateButtonsCombState+0x194>)
 80005f6:	f001 fc33 	bl	8001e60 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(BUTTONS_COMB_PORT, BL3_PIN, bb_led3State);
 80005fa:	4b22      	ldr	r3, [pc, #136]	; (8000684 <updateButtonsCombState+0x1a0>)
 80005fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	461a      	mov	r2, r3
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	481b      	ldr	r0, [pc, #108]	; (8000678 <updateButtonsCombState+0x194>)
 800060a:	f001 fc29 	bl	8001e60 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(BUTTONS_COMB_PORT, BL4_PIN, bb_led4State);
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <updateButtonsCombState+0x1a4>)
 8000610:	f993 3000 	ldrsb.w	r3, [r3]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061c:	4816      	ldr	r0, [pc, #88]	; (8000678 <updateButtonsCombState+0x194>)
 800061e:	f001 fc1f 	bl	8001e60 <HAL_GPIO_WritePin>

    	lastTimeUpdated = HAL_GetTick();
 8000622:	f001 f953 	bl	80018cc <HAL_GetTick>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	f04f 0300 	mov.w	r3, #0
 800062e:	4911      	ldr	r1, [pc, #68]	; (8000674 <updateButtonsCombState+0x190>)
 8000630:	e9c1 2300 	strd	r2, r3, [r1]
    }

	buttonsCombState[0] = bb_led1State;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <updateButtonsCombState+0x198>)
 8000636:	f993 3000 	ldrsb.w	r3, [r3]
 800063a:	b2da      	uxtb	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	701a      	strb	r2, [r3, #0]
	buttonsCombState[1] = bb_led2State;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <updateButtonsCombState+0x19c>)
 8000642:	f993 2000 	ldrsb.w	r2, [r3]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3301      	adds	r3, #1
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	701a      	strb	r2, [r3, #0]
	buttonsCombState[2] = bb_led3State;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <updateButtonsCombState+0x1a0>)
 8000650:	f993 2000 	ldrsb.w	r2, [r3]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3302      	adds	r3, #2
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	701a      	strb	r2, [r3, #0]
	buttonsCombState[3] = bb_led4State;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <updateButtonsCombState+0x1a4>)
 800065e:	f993 2000 	ldrsb.w	r2, [r3]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3303      	adds	r3, #3
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	701a      	strb	r2, [r3, #0]

}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bdb0      	pop	{r4, r5, r7, pc}
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000
 8000678:	40020c00 	.word	0x40020c00
 800067c:	20000078 	.word	0x20000078
 8000680:	20000079 	.word	0x20000079
 8000684:	2000007a 	.word	0x2000007a
 8000688:	2000007b 	.word	0x2000007b

0800068c <toogleBBState>:

int8_t toogleBBState(int8_t bb_ledState)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	if (bb_ledState == 0)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <toogleBBState+0x16>
	{
		return (int8_t)1;
 800069e:	2301      	movs	r3, #1
 80006a0:	e000      	b.n	80006a4 <toogleBBState+0x18>
	}
	return (int8_t)0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <readKeypad>:
#include "stm32f4xx_hal.h"
#include "keypad.h"


char readKeypad (void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	48b4      	ldr	r0, [pc, #720]	; (800098c <readKeypad+0x2dc>)
 80006ba:	f001 fbd1 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2140      	movs	r1, #64	; 0x40
 80006c2:	48b2      	ldr	r0, [pc, #712]	; (800098c <readKeypad+0x2dc>)
 80006c4:	f001 fbcc 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2120      	movs	r1, #32
 80006cc:	48af      	ldr	r0, [pc, #700]	; (800098c <readKeypad+0x2dc>)
 80006ce:	f001 fbc7 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2110      	movs	r1, #16
 80006d6:	48ad      	ldr	r0, [pc, #692]	; (800098c <readKeypad+0x2dc>)
 80006d8:	f001 fbc2 	bl	8001e60 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 80006dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e0:	48aa      	ldr	r0, [pc, #680]	; (800098c <readKeypad+0x2dc>)
 80006e2:	f001 fba5 	bl	8001e30 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00a      	beq.n	8000702 <readKeypad+0x52>
	{
		while (HAL_GPIO_ReadPin (C1_PORT, C1_PIN));
 80006ec:	bf00      	nop
 80006ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f2:	48a6      	ldr	r0, [pc, #664]	; (800098c <readKeypad+0x2dc>)
 80006f4:	f001 fb9c 	bl	8001e30 <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d1f7      	bne.n	80006ee <readKeypad+0x3e>
		return '1';
 80006fe:	2331      	movs	r3, #49	; 0x31
 8000700:	e141      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 8000702:	2104      	movs	r1, #4
 8000704:	48a1      	ldr	r0, [pc, #644]	; (800098c <readKeypad+0x2dc>)
 8000706:	f001 fb93 	bl	8001e30 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d009      	beq.n	8000724 <readKeypad+0x74>
	{
		while (HAL_GPIO_ReadPin (C2_PORT, C2_PIN));
 8000710:	bf00      	nop
 8000712:	2104      	movs	r1, #4
 8000714:	489d      	ldr	r0, [pc, #628]	; (800098c <readKeypad+0x2dc>)
 8000716:	f001 fb8b 	bl	8001e30 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1f8      	bne.n	8000712 <readKeypad+0x62>
		return '2';
 8000720:	2332      	movs	r3, #50	; 0x32
 8000722:	e130      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 8000724:	2102      	movs	r1, #2
 8000726:	4899      	ldr	r0, [pc, #612]	; (800098c <readKeypad+0x2dc>)
 8000728:	f001 fb82 	bl	8001e30 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d009      	beq.n	8000746 <readKeypad+0x96>
	{
		while (HAL_GPIO_ReadPin (C3_PORT, C3_PIN));
 8000732:	bf00      	nop
 8000734:	2102      	movs	r1, #2
 8000736:	4895      	ldr	r0, [pc, #596]	; (800098c <readKeypad+0x2dc>)
 8000738:	f001 fb7a 	bl	8001e30 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1f8      	bne.n	8000734 <readKeypad+0x84>
		return '3';
 8000742:	2333      	movs	r3, #51	; 0x33
 8000744:	e11f      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 8000746:	2101      	movs	r1, #1
 8000748:	4890      	ldr	r0, [pc, #576]	; (800098c <readKeypad+0x2dc>)
 800074a:	f001 fb71 	bl	8001e30 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d009      	beq.n	8000768 <readKeypad+0xb8>
	{
		while (HAL_GPIO_ReadPin (C4_PORT, C4_PIN));
 8000754:	bf00      	nop
 8000756:	2101      	movs	r1, #1
 8000758:	488c      	ldr	r0, [pc, #560]	; (800098c <readKeypad+0x2dc>)
 800075a:	f001 fb69 	bl	8001e30 <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1f8      	bne.n	8000756 <readKeypad+0xa6>
		return 'A';
 8000764:	2341      	movs	r3, #65	; 0x41
 8000766:	e10e      	b.n	8000986 <readKeypad+0x2d6>
	}

	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	4887      	ldr	r0, [pc, #540]	; (800098c <readKeypad+0x2dc>)
 800076e:	f001 fb77 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2140      	movs	r1, #64	; 0x40
 8000776:	4885      	ldr	r0, [pc, #532]	; (800098c <readKeypad+0x2dc>)
 8000778:	f001 fb72 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2120      	movs	r1, #32
 8000780:	4882      	ldr	r0, [pc, #520]	; (800098c <readKeypad+0x2dc>)
 8000782:	f001 fb6d 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2110      	movs	r1, #16
 800078a:	4880      	ldr	r0, [pc, #512]	; (800098c <readKeypad+0x2dc>)
 800078c:	f001 fb68 	bl	8001e60 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 8000790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000794:	487d      	ldr	r0, [pc, #500]	; (800098c <readKeypad+0x2dc>)
 8000796:	f001 fb4b 	bl	8001e30 <HAL_GPIO_ReadPin>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00a      	beq.n	80007b6 <readKeypad+0x106>
	{
		while (HAL_GPIO_ReadPin (C1_PORT, C1_PIN));
 80007a0:	bf00      	nop
 80007a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a6:	4879      	ldr	r0, [pc, #484]	; (800098c <readKeypad+0x2dc>)
 80007a8:	f001 fb42 	bl	8001e30 <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f7      	bne.n	80007a2 <readKeypad+0xf2>
		return '4';
 80007b2:	2334      	movs	r3, #52	; 0x34
 80007b4:	e0e7      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 80007b6:	2104      	movs	r1, #4
 80007b8:	4874      	ldr	r0, [pc, #464]	; (800098c <readKeypad+0x2dc>)
 80007ba:	f001 fb39 	bl	8001e30 <HAL_GPIO_ReadPin>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d009      	beq.n	80007d8 <readKeypad+0x128>
	{
		while (HAL_GPIO_ReadPin (C2_PORT, C2_PIN));
 80007c4:	bf00      	nop
 80007c6:	2104      	movs	r1, #4
 80007c8:	4870      	ldr	r0, [pc, #448]	; (800098c <readKeypad+0x2dc>)
 80007ca:	f001 fb31 	bl	8001e30 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f8      	bne.n	80007c6 <readKeypad+0x116>
		return '5';
 80007d4:	2335      	movs	r3, #53	; 0x35
 80007d6:	e0d6      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 80007d8:	2102      	movs	r1, #2
 80007da:	486c      	ldr	r0, [pc, #432]	; (800098c <readKeypad+0x2dc>)
 80007dc:	f001 fb28 	bl	8001e30 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d009      	beq.n	80007fa <readKeypad+0x14a>
	{
		while (HAL_GPIO_ReadPin (C3_PORT, C3_PIN));
 80007e6:	bf00      	nop
 80007e8:	2102      	movs	r1, #2
 80007ea:	4868      	ldr	r0, [pc, #416]	; (800098c <readKeypad+0x2dc>)
 80007ec:	f001 fb20 	bl	8001e30 <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1f8      	bne.n	80007e8 <readKeypad+0x138>
		return '6';
 80007f6:	2336      	movs	r3, #54	; 0x36
 80007f8:	e0c5      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 80007fa:	2101      	movs	r1, #1
 80007fc:	4863      	ldr	r0, [pc, #396]	; (800098c <readKeypad+0x2dc>)
 80007fe:	f001 fb17 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d009      	beq.n	800081c <readKeypad+0x16c>
	{
		while (HAL_GPIO_ReadPin (C4_PORT, C4_PIN));
 8000808:	bf00      	nop
 800080a:	2101      	movs	r1, #1
 800080c:	485f      	ldr	r0, [pc, #380]	; (800098c <readKeypad+0x2dc>)
 800080e:	f001 fb0f 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1f8      	bne.n	800080a <readKeypad+0x15a>
		return 'B';
 8000818:	2342      	movs	r3, #66	; 0x42
 800081a:	e0b4      	b.n	8000986 <readKeypad+0x2d6>
	}

	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	485a      	ldr	r0, [pc, #360]	; (800098c <readKeypad+0x2dc>)
 8000822:	f001 fb1d 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	; 0x40
 800082a:	4858      	ldr	r0, [pc, #352]	; (800098c <readKeypad+0x2dc>)
 800082c:	f001 fb18 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2120      	movs	r1, #32
 8000834:	4855      	ldr	r0, [pc, #340]	; (800098c <readKeypad+0x2dc>)
 8000836:	f001 fb13 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2110      	movs	r1, #16
 800083e:	4853      	ldr	r0, [pc, #332]	; (800098c <readKeypad+0x2dc>)
 8000840:	f001 fb0e 	bl	8001e60 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 8000844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000848:	4850      	ldr	r0, [pc, #320]	; (800098c <readKeypad+0x2dc>)
 800084a:	f001 faf1 	bl	8001e30 <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00a      	beq.n	800086a <readKeypad+0x1ba>
	{
		while (HAL_GPIO_ReadPin (C1_PORT, C1_PIN));
 8000854:	bf00      	nop
 8000856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085a:	484c      	ldr	r0, [pc, #304]	; (800098c <readKeypad+0x2dc>)
 800085c:	f001 fae8 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1f7      	bne.n	8000856 <readKeypad+0x1a6>
		return '7';
 8000866:	2337      	movs	r3, #55	; 0x37
 8000868:	e08d      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 800086a:	2104      	movs	r1, #4
 800086c:	4847      	ldr	r0, [pc, #284]	; (800098c <readKeypad+0x2dc>)
 800086e:	f001 fadf 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d009      	beq.n	800088c <readKeypad+0x1dc>
	{
		while (HAL_GPIO_ReadPin (C2_PORT, C2_PIN));
 8000878:	bf00      	nop
 800087a:	2104      	movs	r1, #4
 800087c:	4843      	ldr	r0, [pc, #268]	; (800098c <readKeypad+0x2dc>)
 800087e:	f001 fad7 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1f8      	bne.n	800087a <readKeypad+0x1ca>
		return '8';
 8000888:	2338      	movs	r3, #56	; 0x38
 800088a:	e07c      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 800088c:	2102      	movs	r1, #2
 800088e:	483f      	ldr	r0, [pc, #252]	; (800098c <readKeypad+0x2dc>)
 8000890:	f001 face 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d009      	beq.n	80008ae <readKeypad+0x1fe>
	{
		while (HAL_GPIO_ReadPin (C3_PORT, C3_PIN));
 800089a:	bf00      	nop
 800089c:	2102      	movs	r1, #2
 800089e:	483b      	ldr	r0, [pc, #236]	; (800098c <readKeypad+0x2dc>)
 80008a0:	f001 fac6 	bl	8001e30 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1f8      	bne.n	800089c <readKeypad+0x1ec>
		return '9';
 80008aa:	2339      	movs	r3, #57	; 0x39
 80008ac:	e06b      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 80008ae:	2101      	movs	r1, #1
 80008b0:	4836      	ldr	r0, [pc, #216]	; (800098c <readKeypad+0x2dc>)
 80008b2:	f001 fabd 	bl	8001e30 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d009      	beq.n	80008d0 <readKeypad+0x220>
	{
		while (HAL_GPIO_ReadPin (C4_PORT, C4_PIN));
 80008bc:	bf00      	nop
 80008be:	2101      	movs	r1, #1
 80008c0:	4832      	ldr	r0, [pc, #200]	; (800098c <readKeypad+0x2dc>)
 80008c2:	f001 fab5 	bl	8001e30 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1f8      	bne.n	80008be <readKeypad+0x20e>
		return 'C';
 80008cc:	2343      	movs	r3, #67	; 0x43
 80008ce:	e05a      	b.n	8000986 <readKeypad+0x2d6>
	}

	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	482d      	ldr	r0, [pc, #180]	; (800098c <readKeypad+0x2dc>)
 80008d6:	f001 fac3 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	482b      	ldr	r0, [pc, #172]	; (800098c <readKeypad+0x2dc>)
 80008e0:	f001 fabe 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2120      	movs	r1, #32
 80008e8:	4828      	ldr	r0, [pc, #160]	; (800098c <readKeypad+0x2dc>)
 80008ea:	f001 fab9 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2110      	movs	r1, #16
 80008f2:	4826      	ldr	r0, [pc, #152]	; (800098c <readKeypad+0x2dc>)
 80008f4:	f001 fab4 	bl	8001e60 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 80008f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fc:	4823      	ldr	r0, [pc, #140]	; (800098c <readKeypad+0x2dc>)
 80008fe:	f001 fa97 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00a      	beq.n	800091e <readKeypad+0x26e>
	{
		while (HAL_GPIO_ReadPin (C1_PORT, C1_PIN));
 8000908:	bf00      	nop
 800090a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090e:	481f      	ldr	r0, [pc, #124]	; (800098c <readKeypad+0x2dc>)
 8000910:	f001 fa8e 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f7      	bne.n	800090a <readKeypad+0x25a>
		return '*';
 800091a:	232a      	movs	r3, #42	; 0x2a
 800091c:	e033      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 800091e:	2104      	movs	r1, #4
 8000920:	481a      	ldr	r0, [pc, #104]	; (800098c <readKeypad+0x2dc>)
 8000922:	f001 fa85 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d009      	beq.n	8000940 <readKeypad+0x290>
	{
		while (HAL_GPIO_ReadPin (C2_PORT, C2_PIN));
 800092c:	bf00      	nop
 800092e:	2104      	movs	r1, #4
 8000930:	4816      	ldr	r0, [pc, #88]	; (800098c <readKeypad+0x2dc>)
 8000932:	f001 fa7d 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1f8      	bne.n	800092e <readKeypad+0x27e>
		return '0';
 800093c:	2330      	movs	r3, #48	; 0x30
 800093e:	e022      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 8000940:	2102      	movs	r1, #2
 8000942:	4812      	ldr	r0, [pc, #72]	; (800098c <readKeypad+0x2dc>)
 8000944:	f001 fa74 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d009      	beq.n	8000962 <readKeypad+0x2b2>
	{
		while (HAL_GPIO_ReadPin (C3_PORT, C3_PIN));
 800094e:	bf00      	nop
 8000950:	2102      	movs	r1, #2
 8000952:	480e      	ldr	r0, [pc, #56]	; (800098c <readKeypad+0x2dc>)
 8000954:	f001 fa6c 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1f8      	bne.n	8000950 <readKeypad+0x2a0>
		return '#';
 800095e:	2323      	movs	r3, #35	; 0x23
 8000960:	e011      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 8000962:	2101      	movs	r1, #1
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <readKeypad+0x2dc>)
 8000966:	f001 fa63 	bl	8001e30 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d009      	beq.n	8000984 <readKeypad+0x2d4>
	{
		while (HAL_GPIO_ReadPin (C4_PORT, C4_PIN));
 8000970:	bf00      	nop
 8000972:	2101      	movs	r1, #1
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <readKeypad+0x2dc>)
 8000976:	f001 fa5b 	bl	8001e30 <HAL_GPIO_ReadPin>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1f8      	bne.n	8000972 <readKeypad+0x2c2>
		return 'D';
 8000980:	2344      	movs	r3, #68	; 0x44
 8000982:	e000      	b.n	8000986 <readKeypad+0x2d6>
	}

	return '-';
 8000984:	232d      	movs	r3, #45	; 0x2d
}
 8000986:	4618      	mov	r0, r3
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020400 	.word	0x40020400

08000990 <setLedbar>:

#include "stm32f4xx_hal.h"
#include "ledbar.h"

void setLedbar(uint8_t conf[])
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin (LEDBAR_PORT, L1_PIN, conf[0] != 0);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf14      	ite	ne
 80009a0:	2301      	movne	r3, #1
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	2101      	movs	r1, #1
 80009aa:	483f      	ldr	r0, [pc, #252]	; (8000aa8 <setLedbar+0x118>)
 80009ac:	f001 fa58 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L2_PIN, conf[1] != 0);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	bf14      	ite	ne
 80009ba:	2301      	movne	r3, #1
 80009bc:	2300      	moveq	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	2102      	movs	r1, #2
 80009c4:	4838      	ldr	r0, [pc, #224]	; (8000aa8 <setLedbar+0x118>)
 80009c6:	f001 fa4b 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L3_PIN, conf[2] != 0);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3302      	adds	r3, #2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	bf14      	ite	ne
 80009d4:	2301      	movne	r3, #1
 80009d6:	2300      	moveq	r3, #0
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	2104      	movs	r1, #4
 80009de:	4832      	ldr	r0, [pc, #200]	; (8000aa8 <setLedbar+0x118>)
 80009e0:	f001 fa3e 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L4_PIN, conf[3] != 0);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3303      	adds	r3, #3
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	bf14      	ite	ne
 80009ee:	2301      	movne	r3, #1
 80009f0:	2300      	moveq	r3, #0
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	461a      	mov	r2, r3
 80009f6:	2108      	movs	r1, #8
 80009f8:	482b      	ldr	r0, [pc, #172]	; (8000aa8 <setLedbar+0x118>)
 80009fa:	f001 fa31 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L5_PIN, conf[4] != 0);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3304      	adds	r3, #4
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf14      	ite	ne
 8000a08:	2301      	movne	r3, #1
 8000a0a:	2300      	moveq	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	461a      	mov	r2, r3
 8000a10:	2110      	movs	r1, #16
 8000a12:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <setLedbar+0x118>)
 8000a14:	f001 fa24 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L6_PIN, conf[5] != 0);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3305      	adds	r3, #5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bf14      	ite	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	2300      	moveq	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	481e      	ldr	r0, [pc, #120]	; (8000aa8 <setLedbar+0x118>)
 8000a2e:	f001 fa17 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L7_PIN, conf[6] != 0);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3306      	adds	r3, #6
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bf14      	ite	ne
 8000a3c:	2301      	movne	r3, #1
 8000a3e:	2300      	moveq	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	461a      	mov	r2, r3
 8000a44:	2140      	movs	r1, #64	; 0x40
 8000a46:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <setLedbar+0x118>)
 8000a48:	f001 fa0a 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L8_PIN, conf[7] != 0);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3307      	adds	r3, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bf14      	ite	ne
 8000a56:	2301      	movne	r3, #1
 8000a58:	2300      	moveq	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <setLedbar+0x118>)
 8000a62:	f001 f9fd 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L9_PIN, conf[8] != 0);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3308      	adds	r3, #8
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	bf14      	ite	ne
 8000a70:	2301      	movne	r3, #1
 8000a72:	2300      	moveq	r3, #0
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7c:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <setLedbar+0x118>)
 8000a7e:	f001 f9ef 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L10_PIN, conf[9] != 0);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3309      	adds	r3, #9
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	2301      	movne	r3, #1
 8000a8e:	2300      	moveq	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <setLedbar+0x118>)
 8000a9a:	f001 f9e1 	bl	8001e60 <HAL_GPIO_WritePin>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40020800 	.word	0x40020800

08000aac <setLedbarTo>:

void setLedbarTo(int8_t to) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	uint8_t conf[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <setLedbarTo+0x4c>)
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000abe:	c303      	stmia	r3!, {r0, r1}
 8000ac0:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < to; i++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	e008      	b.n	8000ada <setLedbarTo+0x2e>
	{
		conf[i] = 1;
 8000ac8:	f107 0208 	add.w	r2, r7, #8
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	4413      	add	r3, r2
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < to; i++)
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf1      	blt.n	8000ac8 <setLedbarTo+0x1c>
	}
	setLedbar(conf);
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff51 	bl	8000990 <setLedbar>
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	08004ac4 	.word	0x08004ac4

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 fe7e 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f976 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f000 fa14 	bl	8000f34 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b0c:	f000 f9dc 	bl	8000ec8 <MX_SPI1_Init>
  MFRC522_Init();
 8000b10:	f000 fd3a 	bl	8001588 <MFRC522_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000b14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b18:	f000 fee4 	bl	80018e4 <HAL_Delay>
  /* USER CODE END 2 */

  setLedbarTo(0);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff ffc5 	bl	8000aac <setLedbarTo>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  readButtonCombLockState();
 8000b22:	f000 f843 	bl	8000bac <readButtonCombLockState>
	  readKeypadLockState();
 8000b26:	f000 f877 	bl	8000c18 <readKeypadLockState>
	  readRFIDLockState();
 8000b2a:	f000 f8ff 	bl	8000d2c <readRFIDLockState>

	  if (rfidLockState == UNLOCKED)
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <main+0xa0>)
 8000b30:	f993 3000 	ldrsb.w	r3, [r3]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d106      	bne.n	8000b46 <main+0x4a>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b3e:	4818      	ldr	r0, [pc, #96]	; (8000ba0 <main+0xa4>)
 8000b40:	f001 f98e 	bl	8001e60 <HAL_GPIO_WritePin>
 8000b44:	e005      	b.n	8000b52 <main+0x56>
	  } else {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b4c:	4814      	ldr	r0, [pc, #80]	; (8000ba0 <main+0xa4>)
 8000b4e:	f001 f987 	bl	8001e60 <HAL_GPIO_WritePin>
	  }

	  if (keypadLockState == UNLOCKED)
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <main+0xa8>)
 8000b54:	f993 3000 	ldrsb.w	r3, [r3]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d106      	bne.n	8000b6a <main+0x6e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b62:	480f      	ldr	r0, [pc, #60]	; (8000ba0 <main+0xa4>)
 8000b64:	f001 f97c 	bl	8001e60 <HAL_GPIO_WritePin>
 8000b68:	e005      	b.n	8000b76 <main+0x7a>
	  } else {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <main+0xa4>)
 8000b72:	f001 f975 	bl	8001e60 <HAL_GPIO_WritePin>
	  }

	  if (buttonsCombLockState == UNLOCKED)
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <main+0xac>)
 8000b78:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d106      	bne.n	8000b8e <main+0x92>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <main+0xa4>)
 8000b88:	f001 f96a 	bl	8001e60 <HAL_GPIO_WritePin>
 8000b8c:	e7c9      	b.n	8000b22 <main+0x26>
	  } else {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <main+0xa4>)
 8000b96:	f001 f963 	bl	8001e60 <HAL_GPIO_WritePin>
  {
 8000b9a:	e7c2      	b.n	8000b22 <main+0x26>
 8000b9c:	2000007c 	.word	0x2000007c
 8000ba0:	40020c00 	.word	0x40020c00
 8000ba4:	2000007d 	.word	0x2000007d
 8000ba8:	20000084 	.word	0x20000084

08000bac <readButtonCombLockState>:
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

void readButtonCombLockState()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
	updateButtonsCombState(&buttonsCombInput);
 8000bb2:	4816      	ldr	r0, [pc, #88]	; (8000c0c <readButtonCombLockState+0x60>)
 8000bb4:	f7ff fc96 	bl	80004e4 <updateButtonsCombState>
	int8_t isValidCombState = 1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < NUM_OF_BB_SIZE; i++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	e011      	b.n	8000be6 <readButtonCombLockState+0x3a>
	{
		if (buttonsCombInput[i] != validButtonsComb[i])
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <readButtonCombLockState+0x60>)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	f993 2000 	ldrsb.w	r2, [r3]
 8000bcc:	4910      	ldr	r1, [pc, #64]	; (8000c10 <readButtonCombLockState+0x64>)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	440b      	add	r3, r1
 8000bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d002      	beq.n	8000be0 <readButtonCombLockState+0x34>
		{
			isValidCombState = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	71fb      	strb	r3, [r7, #7]
			break;
 8000bde:	e005      	b.n	8000bec <readButtonCombLockState+0x40>
	for (int i = 0; i < NUM_OF_BB_SIZE; i++)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	ddea      	ble.n	8000bc2 <readButtonCombLockState+0x16>
		}
	}
	if (isValidCombState == 1)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d103      	bne.n	8000bfc <readButtonCombLockState+0x50>
	{
		buttonsCombLockState = UNLOCKED;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <readButtonCombLockState+0x68>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
	} else
	{
		buttonsCombLockState = LOCKED;
	}
}
 8000bfa:	e002      	b.n	8000c02 <readButtonCombLockState+0x56>
		buttonsCombLockState = LOCKED;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <readButtonCombLockState+0x68>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000080 	.word	0x20000080
 8000c10:	2000004c 	.word	0x2000004c
 8000c14:	20000084 	.word	0x20000084

08000c18 <readKeypadLockState>:

void readKeypadLockState()
{
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	if (keypadLastTimeValidated != -1 && HAL_GetTick() - keypadLastTimeValidated <= EXPIRE_KEYPAD_LOCK_VALIDATION_TIME && keypadLockState == UNLOCKED)
 8000c1c:	4b3d      	ldr	r3, [pc, #244]	; (8000d14 <readKeypadLockState+0xfc>)
 8000c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c26:	bf08      	it	eq
 8000c28:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8000c2c:	d017      	beq.n	8000c5e <readKeypadLockState+0x46>
 8000c2e:	f000 fe4d 	bl	80018cc <HAL_GetTick>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f04f 0100 	mov.w	r1, #0
 8000c3a:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <readKeypadLockState+0xfc>)
 8000c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0503 	sbc.w	r5, r1, r3
 8000c46:	f241 7270 	movw	r2, #6000	; 0x1770
 8000c4a:	f04f 0300 	mov.w	r3, #0
 8000c4e:	42a2      	cmp	r2, r4
 8000c50:	41ab      	sbcs	r3, r5
 8000c52:	db04      	blt.n	8000c5e <readKeypadLockState+0x46>
 8000c54:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <readKeypadLockState+0x100>)
 8000c56:	f993 3000 	ldrsb.w	r3, [r3]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d053      	beq.n	8000d06 <readKeypadLockState+0xee>
	{
		return;
	} else {
		keypadLockState = LOCKED;
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <readKeypadLockState+0x100>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
	}

	c = readKeypad();
 8000c64:	f7ff fd24 	bl	80006b0 <readKeypad>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <readKeypadLockState+0x104>)
 8000c6e:	701a      	strb	r2, [r3, #0]

	if (c == '#') {
 8000c70:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <readKeypadLockState+0x104>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b23      	cmp	r3, #35	; 0x23
 8000c76:	d124      	bne.n	8000cc2 <readKeypadLockState+0xaa>
		if (strcmp(passwordInput, validPassword_1) == 0 || strcmp(passwordInput, validPassword_2) == 0)
 8000c78:	4929      	ldr	r1, [pc, #164]	; (8000d20 <readKeypadLockState+0x108>)
 8000c7a:	482a      	ldr	r0, [pc, #168]	; (8000d24 <readKeypadLockState+0x10c>)
 8000c7c:	f7ff faa4 	bl	80001c8 <strcmp>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d006      	beq.n	8000c94 <readKeypadLockState+0x7c>
 8000c86:	4928      	ldr	r1, [pc, #160]	; (8000d28 <readKeypadLockState+0x110>)
 8000c88:	4826      	ldr	r0, [pc, #152]	; (8000d24 <readKeypadLockState+0x10c>)
 8000c8a:	f7ff fa9d 	bl	80001c8 <strcmp>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10c      	bne.n	8000cae <readKeypadLockState+0x96>
		{
			keypadLockState = UNLOCKED;
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <readKeypadLockState+0x100>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
			keypadLastTimeValidated = HAL_GetTick();
 8000c9a:	f000 fe17 	bl	80018cc <HAL_GetTick>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	f04f 0300 	mov.w	r3, #0
 8000ca6:	491b      	ldr	r1, [pc, #108]	; (8000d14 <readKeypadLockState+0xfc>)
 8000ca8:	e9c1 2300 	strd	r2, r3, [r1]
 8000cac:	e002      	b.n	8000cb4 <readKeypadLockState+0x9c>
		} else {
			keypadLockState = LOCKED;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <readKeypadLockState+0x100>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
		}
		passwordInput[0] = '\0';
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <readKeypadLockState+0x10c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
		setLedbarTo(0);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fef6 	bl	8000aac <setLedbarTo>
		return;
 8000cc0:	e026      	b.n	8000d10 <readKeypadLockState+0xf8>
	}

	if (c == 'C') {
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <readKeypadLockState+0x104>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b43      	cmp	r3, #67	; 0x43
 8000cc8:	d106      	bne.n	8000cd8 <readKeypadLockState+0xc0>
		// clear password
		passwordInput[0] = '\0';
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <readKeypadLockState+0x10c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
		setLedbarTo(0);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff feeb 	bl	8000aac <setLedbarTo>
		return;
 8000cd6:	e01b      	b.n	8000d10 <readKeypadLockState+0xf8>
	}

	if (strlen(passwordInput) == KEYPAD_PASSWORD_LENGTH)
 8000cd8:	4812      	ldr	r0, [pc, #72]	; (8000d24 <readKeypadLockState+0x10c>)
 8000cda:	f7ff fa7f 	bl	80001dc <strlen>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b09      	cmp	r3, #9
 8000ce2:	d012      	beq.n	8000d0a <readKeypadLockState+0xf2>
	{
		return;
	}

	// nothing clicked
	if (c == '-') {
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <readKeypadLockState+0x104>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b2d      	cmp	r3, #45	; 0x2d
 8000cea:	d010      	beq.n	8000d0e <readKeypadLockState+0xf6>
		return;
	}

	strncat(passwordInput, &c, 1);
 8000cec:	2201      	movs	r2, #1
 8000cee:	490b      	ldr	r1, [pc, #44]	; (8000d1c <readKeypadLockState+0x104>)
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <readKeypadLockState+0x10c>)
 8000cf2:	f003 fec7 	bl	8004a84 <strncat>
	setLedbarTo(strlen(passwordInput));
 8000cf6:	480b      	ldr	r0, [pc, #44]	; (8000d24 <readKeypadLockState+0x10c>)
 8000cf8:	f7ff fa70 	bl	80001dc <strlen>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fed4 	bl	8000aac <setLedbarTo>
 8000d04:	e004      	b.n	8000d10 <readKeypadLockState+0xf8>
		return;
 8000d06:	bf00      	nop
 8000d08:	e002      	b.n	8000d10 <readKeypadLockState+0xf8>
		return;
 8000d0a:	bf00      	nop
 8000d0c:	e000      	b.n	8000d10 <readKeypadLockState+0xf8>
		return;
 8000d0e:	bf00      	nop

}
 8000d10:	bdb0      	pop	{r4, r5, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000040 	.word	0x20000040
 8000d18:	2000007d 	.word	0x2000007d
 8000d1c:	20000048 	.word	0x20000048
 8000d20:	20000028 	.word	0x20000028
 8000d24:	200000dc 	.word	0x200000dc
 8000d28:	20000034 	.word	0x20000034

08000d2c <readRFIDLockState>:

void readRFIDLockState()
{
 8000d2c:	b5b0      	push	{r4, r5, r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	if (rfidLastTimeValidated != -1 && HAL_GetTick() - rfidLastTimeValidated <= EXPIRE_RFID_LOCK_VALIDATION_TIME && rfidLockState == UNLOCKED)
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <readRFIDLockState+0xb0>)
 8000d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d3a:	bf08      	it	eq
 8000d3c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8000d40:	d017      	beq.n	8000d72 <readRFIDLockState+0x46>
 8000d42:	f000 fdc3 	bl	80018cc <HAL_GetTick>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f04f 0100 	mov.w	r1, #0
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <readRFIDLockState+0xb0>)
 8000d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d54:	1a84      	subs	r4, r0, r2
 8000d56:	eb61 0503 	sbc.w	r5, r1, r3
 8000d5a:	f241 7270 	movw	r2, #6000	; 0x1770
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	42a2      	cmp	r2, r4
 8000d64:	41ab      	sbcs	r3, r5
 8000d66:	db04      	blt.n	8000d72 <readRFIDLockState+0x46>
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <readRFIDLockState+0xb4>)
 8000d6a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d031      	beq.n	8000dd6 <readRFIDLockState+0xaa>
	{
		return;
	}
	rc522State = MFRC522_Check(cardID);
 8000d72:	481c      	ldr	r0, [pc, #112]	; (8000de4 <readRFIDLockState+0xb8>)
 8000d74:	f000 fa1c 	bl	80011b0 <MFRC522_Check>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b25a      	sxtb	r2, r3
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <readRFIDLockState+0xbc>)
 8000d7e:	701a      	strb	r2, [r3, #0]
	if (rc522State == MI_OK)
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <readRFIDLockState+0xbc>)
 8000d82:	f993 3000 	ldrsb.w	r3, [r3]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d11e      	bne.n	8000dc8 <readRFIDLockState+0x9c>
	{
		if (MFRC522_Compare(cardID, validID_1) == MI_OK || MFRC522_Compare(cardID, validID_2) == MI_OK)
 8000d8a:	4918      	ldr	r1, [pc, #96]	; (8000dec <readRFIDLockState+0xc0>)
 8000d8c:	4815      	ldr	r0, [pc, #84]	; (8000de4 <readRFIDLockState+0xb8>)
 8000d8e:	f000 fa28 	bl	80011e2 <MFRC522_Compare>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d006      	beq.n	8000da6 <readRFIDLockState+0x7a>
 8000d98:	4915      	ldr	r1, [pc, #84]	; (8000df0 <readRFIDLockState+0xc4>)
 8000d9a:	4812      	ldr	r0, [pc, #72]	; (8000de4 <readRFIDLockState+0xb8>)
 8000d9c:	f000 fa21 	bl	80011e2 <MFRC522_Compare>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10c      	bne.n	8000dc0 <readRFIDLockState+0x94>
		{
			rfidLockState = UNLOCKED;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <readRFIDLockState+0xb4>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
			rfidLastTimeValidated = HAL_GetTick();
 8000dac:	f000 fd8e 	bl	80018cc <HAL_GetTick>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	4908      	ldr	r1, [pc, #32]	; (8000ddc <readRFIDLockState+0xb0>)
 8000dba:	e9c1 2300 	strd	r2, r3, [r1]
 8000dbe:	e006      	b.n	8000dce <readRFIDLockState+0xa2>
		} else
		{
			rfidLockState = LOCKED;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <readRFIDLockState+0xb4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e002      	b.n	8000dce <readRFIDLockState+0xa2>
		}
	} else {
		// no card detected
		rfidLockState = LOCKED;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <readRFIDLockState+0xb4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(10);
 8000dce:	200a      	movs	r0, #10
 8000dd0:	f000 fd88 	bl	80018e4 <HAL_Delay>
 8000dd4:	e000      	b.n	8000dd8 <readRFIDLockState+0xac>
		return;
 8000dd6:	bf00      	nop

}
 8000dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000020 	.word	0x20000020
 8000de0:	2000007c 	.word	0x2000007c
 8000de4:	200000e8 	.word	0x200000e8
 8000de8:	20000008 	.word	0x20000008
 8000dec:	2000000c 	.word	0x2000000c
 8000df0:	20000014 	.word	0x20000014

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b094      	sub	sp, #80	; 0x50
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	2230      	movs	r2, #48	; 0x30
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 fe36 	bl	8004a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <SystemClock_Config+0xcc>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	4a27      	ldr	r2, [pc, #156]	; (8000ec0 <SystemClock_Config+0xcc>)
 8000e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <SystemClock_Config+0xcc>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <SystemClock_Config+0xd0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <SystemClock_Config+0xd0>)
 8000e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <SystemClock_Config+0xd0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e50:	2301      	movs	r3, #1
 8000e52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e64:	2308      	movs	r3, #8
 8000e66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e72:	2307      	movs	r3, #7
 8000e74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e76:	f107 0320 	add.w	r3, r7, #32
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 fa9a 	bl	80033b4 <HAL_RCC_OscConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e86:	f000 f903 	bl	8001090 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8a:	230f      	movs	r3, #15
 8000e8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f002 fcfb 	bl	80038a4 <HAL_RCC_ClockConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000eb4:	f000 f8ec 	bl	8001090 <Error_Handler>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3750      	adds	r7, #80	; 0x50
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ece:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <MX_SPI1_Init+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ed4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000efc:	2218      	movs	r2, #24
 8000efe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f14:	220a      	movs	r2, #10
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f1a:	f002 fe8b 	bl	8003c34 <HAL_SPI_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f24:	f000 f8b4 	bl	8001090 <Error_Handler>
  }

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200000f0 	.word	0x200000f0
 8000f30:	40013000 	.word	0x40013000

08000f34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0a2      	sub	sp, #136	; 0x88
 8000f38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b4f      	ldr	r3, [pc, #316]	; (800107c <MX_GPIO_Init+0x148>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a4e      	ldr	r2, [pc, #312]	; (800107c <MX_GPIO_Init+0x148>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b4c      	ldr	r3, [pc, #304]	; (800107c <MX_GPIO_Init+0x148>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b48      	ldr	r3, [pc, #288]	; (800107c <MX_GPIO_Init+0x148>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a47      	ldr	r2, [pc, #284]	; (800107c <MX_GPIO_Init+0x148>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b45      	ldr	r3, [pc, #276]	; (800107c <MX_GPIO_Init+0x148>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b41      	ldr	r3, [pc, #260]	; (800107c <MX_GPIO_Init+0x148>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a40      	ldr	r2, [pc, #256]	; (800107c <MX_GPIO_Init+0x148>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b3e      	ldr	r3, [pc, #248]	; (800107c <MX_GPIO_Init+0x148>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b3a      	ldr	r3, [pc, #232]	; (800107c <MX_GPIO_Init+0x148>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a39      	ldr	r2, [pc, #228]	; (800107c <MX_GPIO_Init+0x148>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <MX_GPIO_Init+0x148>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 - CS PIN for RC522(SPI1)*/
  GPIO_InitStruct.Pin = CS_PIN;
 8000faa:	2310      	movs	r3, #16
 8000fac:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	67bb      	str	r3, [r7, #120]	; 0x78
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HAL_GPIO_Init(CS_PORT, &GPIO_InitStruct);
 8000fbc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	482f      	ldr	r0, [pc, #188]	; (8001080 <MX_GPIO_Init+0x14c>)
 8000fc4:	f000 fd98 	bl	8001af8 <HAL_GPIO_Init>


  /*Configure GPIO pins : PD12 PD13 PD14 PD15 - BOARD LEDs*/
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000fc8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000fcc:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	67bb      	str	r3, [r7, #120]	; 0x78
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fdc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4828      	ldr	r0, [pc, #160]	; (8001084 <MX_GPIO_Init+0x150>)
 8000fe4:	f000 fd88 	bl	8001af8 <HAL_GPIO_Init>


  /*Configure GPIO pins for keypad  */
  GPIO_InitTypeDef keypadRows;
  keypadRows.Pin =  R1_PIN | R2_PIN | R3_PIN | R4_PIN;
 8000fe8:	23f0      	movs	r3, #240	; 0xf0
 8000fea:	663b      	str	r3, [r7, #96]	; 0x60
  keypadRows.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	667b      	str	r3, [r7, #100]	; 0x64
  keypadRows.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	66bb      	str	r3, [r7, #104]	; 0x68
  keypadRows.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	66fb      	str	r3, [r7, #108]	; 0x6c

  HAL_GPIO_Init(R1_PORT, &keypadRows);
 8000ff8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4822      	ldr	r0, [pc, #136]	; (8001088 <MX_GPIO_Init+0x154>)
 8001000:	f000 fd7a 	bl	8001af8 <HAL_GPIO_Init>

  GPIO_InitTypeDef keypadColumns;
  keypadColumns.Pin =  C1_PIN | C2_PIN | C3_PIN | C4_PIN;
 8001004:	f240 1307 	movw	r3, #263	; 0x107
 8001008:	64fb      	str	r3, [r7, #76]	; 0x4c
  keypadColumns.Mode = GPIO_MODE_INPUT;
 800100a:	2300      	movs	r3, #0
 800100c:	653b      	str	r3, [r7, #80]	; 0x50
  keypadColumns.Pull = GPIO_PULLDOWN;
 800100e:	2302      	movs	r3, #2
 8001010:	657b      	str	r3, [r7, #84]	; 0x54

  HAL_GPIO_Init(C1_PORT,&keypadColumns);
 8001012:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001016:	4619      	mov	r1, r3
 8001018:	481b      	ldr	r0, [pc, #108]	; (8001088 <MX_GPIO_Init+0x154>)
 800101a:	f000 fd6d 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pins for ledbar  */
  GPIO_InitTypeDef ledbar;
  ledbar.Pin =  L1_PIN | L2_PIN | L3_PIN | L4_PIN | L5_PIN | L6_PIN | L7_PIN | L8_PIN | L9_PIN | L10_PIN;
 800101e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001022:	63bb      	str	r3, [r7, #56]	; 0x38
  ledbar.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  ledbar.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
  ledbar.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	647b      	str	r3, [r7, #68]	; 0x44

  HAL_GPIO_Init(LEDBAR_PORT, &ledbar);
 8001030:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001034:	4619      	mov	r1, r3
 8001036:	4815      	ldr	r0, [pc, #84]	; (800108c <MX_GPIO_Init+0x158>)
 8001038:	f000 fd5e 	bl	8001af8 <HAL_GPIO_Init>

  /*Configure GPIO pins for ledcomb  */
  GPIO_InitTypeDef ledcombButtons;
  ledcombButtons.Pin =  BB1_PIN | BB2_PIN | BB3_PIN | BB4_PIN;
 800103c:	230f      	movs	r3, #15
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  ledcombButtons.Mode = GPIO_MODE_INPUT;
 8001040:	2300      	movs	r3, #0
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  ledcombButtons.Pull = GPIO_PULLDOWN;
 8001044:	2302      	movs	r3, #2
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c

  HAL_GPIO_Init(BUTTONS_COMB_PORT, &ledcombButtons);
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_GPIO_Init+0x150>)
 8001050:	f000 fd52 	bl	8001af8 <HAL_GPIO_Init>

  GPIO_InitTypeDef ledcombLeds;
  ledcombLeds.Pin =  BL1_PIN | BL2_PIN | BL3_PIN | BL4_PIN;
 8001054:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001058:	613b      	str	r3, [r7, #16]
  ledcombLeds.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
  ledcombLeds.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  ledcombLeds.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(BUTTONS_COMB_PORT, &ledcombLeds);
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_GPIO_Init+0x150>)
 800106e:	f000 fd43 	bl	8001af8 <HAL_GPIO_Init>

}
 8001072:	bf00      	nop
 8001074:	3788      	adds	r7, #136	; 0x88
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020c00 	.word	0x40020c00
 8001088:	40020400 	.word	0x40020400
 800108c:	40020800 	.word	0x40020800

08001090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001094:	b672      	cpsid	i
}
 8001096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001098:	e7fe      	b.n	8001098 <Error_Handler+0x8>
	...

0800109c <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 80010aa:	f107 0208 	add.w	r2, r7, #8
 80010ae:	f107 010c 	add.w	r1, r7, #12
 80010b2:	230a      	movs	r3, #10
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	4803      	ldr	r0, [pc, #12]	; (80010c8 <SPI1SendByte+0x2c>)
 80010ba:	f002 fe44 	bl	8003d46 <HAL_SPI_TransmitReceive>
	return readValue[0];
 80010be:	7a3b      	ldrb	r3, [r7, #8]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000f0 	.word	0x200000f0

080010cc <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	460a      	mov	r2, r1
 80010d6:	71fb      	strb	r3, [r7, #7]
 80010d8:	4613      	mov	r3, r2
 80010da:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 80010dc:	2200      	movs	r2, #0
 80010de:	2110      	movs	r1, #16
 80010e0:	4809      	ldr	r0, [pc, #36]	; (8001108 <SPI1_WriteReg+0x3c>)
 80010e2:	f000 febd 	bl	8001e60 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ffd7 	bl	800109c <SPI1SendByte>
	SPI1SendByte(value);
 80010ee:	79bb      	ldrb	r3, [r7, #6]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ffd3 	bl	800109c <SPI1SendByte>
	cs_set();
 80010f6:	2201      	movs	r2, #1
 80010f8:	2110      	movs	r1, #16
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <SPI1_WriteReg+0x3c>)
 80010fc:	f000 feb0 	bl	8001e60 <HAL_GPIO_WritePin>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40020000 	.word	0x40020000

0800110c <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8001116:	2200      	movs	r2, #0
 8001118:	2110      	movs	r1, #16
 800111a:	480b      	ldr	r0, [pc, #44]	; (8001148 <SPI1_ReadReg+0x3c>)
 800111c:	f000 fea0 	bl	8001e60 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ffba 	bl	800109c <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff ffb7 	bl	800109c <SPI1SendByte>
 800112e:	4603      	mov	r3, r0
 8001130:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8001132:	2201      	movs	r2, #1
 8001134:	2110      	movs	r1, #16
 8001136:	4804      	ldr	r0, [pc, #16]	; (8001148 <SPI1_ReadReg+0x3c>)
 8001138:	f000 fe92 	bl	8001e60 <HAL_GPIO_WritePin>
	return val;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40020000 	.word	0x40020000

0800114c <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	460a      	mov	r2, r1
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	4613      	mov	r3, r2
 800115a:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001166:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8001168:	79ba      	ldrb	r2, [r7, #6]
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ffac 	bl	80010cc <SPI1_WriteReg>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	b25b      	sxtb	r3, r3
 800118c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001190:	b25b      	sxtb	r3, r3
 8001192:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001196:	b25b      	sxtb	r3, r3
 8001198:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffb5 	bl	800110c <SPI1_ReadReg>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]
	return val;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	2026      	movs	r0, #38	; 0x26
 80011bc:	f000 f86a 	bl	8001294 <MFRC522_Request>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d104      	bne.n	80011d4 <MFRC522_Check+0x24>
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f956 	bl	800147c <MFRC522_Anticoll>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation
 80011d4:	f000 fa19 	bl	800160a <MFRC522_Halt>
	return status;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <MFRC522_Compare>:

uint8_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	e00e      	b.n	8001210 <MFRC522_Compare+0x2e>
		if (CardID[i] != CompareID[i]) return MI_ERR;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	6839      	ldr	r1, [r7, #0]
 80011fe:	440b      	add	r3, r1
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d001      	beq.n	800120a <MFRC522_Compare+0x28>
 8001206:	2302      	movs	r3, #2
 8001208:	e006      	b.n	8001218 <MFRC522_Compare+0x36>
	for (i = 0; i < 5; i++) {
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	3301      	adds	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b04      	cmp	r3, #4
 8001214:	d9ed      	bls.n	80011f2 <MFRC522_Compare+0x10>
	}
	return MI_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	4613      	mov	r3, r2
 8001232:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ffa0 	bl	800117c <MFRC522_ReadRegister>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	4313      	orrs	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff7e 	bl	800114c <MFRC522_WriteRegister>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	4613      	mov	r3, r2
 8001266:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff86 	bl	800117c <MFRC522_ReadRegister>
 8001270:	4603      	mov	r3, r0
 8001272:	b25a      	sxtb	r2, r3
 8001274:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001278:	43db      	mvns	r3, r3
 800127a:	b25b      	sxtb	r3, r3
 800127c:	4013      	ands	r3, r2
 800127e:	b25b      	sxtb	r3, r3
 8001280:	b2da      	uxtb	r2, r3
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff60 	bl	800114c <MFRC522_WriteRegister>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af02      	add	r7, sp, #8
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 80012a0:	2107      	movs	r1, #7
 80012a2:	200d      	movs	r0, #13
 80012a4:	f7ff ff52 	bl	800114c <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2201      	movs	r2, #1
 80012b8:	6839      	ldr	r1, [r7, #0]
 80012ba:	200c      	movs	r0, #12
 80012bc:	f000 f80f 	bl	80012de <MFRC522_ToCard>
 80012c0:	4603      	mov	r3, r0
 80012c2:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <MFRC522_Request+0x3c>
 80012ca:	89bb      	ldrh	r3, [r7, #12]
 80012cc:	2b10      	cmp	r3, #16
 80012ce:	d001      	beq.n	80012d4 <MFRC522_Request+0x40>
 80012d0:	2302      	movs	r3, #2
 80012d2:	73fb      	strb	r3, [r7, #15]
	return status;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 80012de:	b590      	push	{r4, r7, lr}
 80012e0:	b087      	sub	sp, #28
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	4603      	mov	r3, r0
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	4613      	mov	r3, r2
 80012ee:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 80012f0:	2302      	movs	r3, #2
 80012f2:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80012f4:	2300      	movs	r3, #0
 80012f6:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80012f8:	2300      	movs	r3, #0
 80012fa:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	2b0c      	cmp	r3, #12
 8001300:	d006      	beq.n	8001310 <MFRC522_ToCard+0x32>
 8001302:	2b0e      	cmp	r3, #14
 8001304:	d109      	bne.n	800131a <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001306:	2312      	movs	r3, #18
 8001308:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800130a:	2310      	movs	r3, #16
 800130c:	757b      	strb	r3, [r7, #21]
			break;
 800130e:	e005      	b.n	800131c <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001310:	2377      	movs	r3, #119	; 0x77
 8001312:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001314:	2330      	movs	r3, #48	; 0x30
 8001316:	757b      	strb	r3, [r7, #21]
			break;
 8001318:	e000      	b.n	800131c <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800131a:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800131c:	7dbb      	ldrb	r3, [r7, #22]
 800131e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4619      	mov	r1, r3
 8001326:	2002      	movs	r0, #2
 8001328:	f7ff ff10 	bl	800114c <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800132c:	2180      	movs	r1, #128	; 0x80
 800132e:	2004      	movs	r0, #4
 8001330:	f7ff ff92 	bl	8001258 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	200a      	movs	r0, #10
 8001338:	f7ff ff74 	bl	8001224 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800133c:	2100      	movs	r1, #0
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff ff04 	bl	800114c <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001344:	2300      	movs	r3, #0
 8001346:	827b      	strh	r3, [r7, #18]
 8001348:	e00a      	b.n	8001360 <MFRC522_ToCard+0x82>
 800134a:	8a7b      	ldrh	r3, [r7, #18]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	2009      	movs	r0, #9
 8001356:	f7ff fef9 	bl	800114c <MFRC522_WriteRegister>
 800135a:	8a7b      	ldrh	r3, [r7, #18]
 800135c:	3301      	adds	r3, #1
 800135e:	827b      	strh	r3, [r7, #18]
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	b29b      	uxth	r3, r3
 8001364:	8a7a      	ldrh	r2, [r7, #18]
 8001366:	429a      	cmp	r2, r3
 8001368:	d3ef      	bcc.n	800134a <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	4619      	mov	r1, r3
 800136e:	2001      	movs	r0, #1
 8001370:	f7ff feec 	bl	800114c <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	2b0c      	cmp	r3, #12
 8001378:	d103      	bne.n	8001382 <MFRC522_ToCard+0xa4>
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	200d      	movs	r0, #13
 800137e:	f7ff ff51 	bl	8001224 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001382:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001386:	827b      	strh	r3, [r7, #18]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001388:	2004      	movs	r0, #4
 800138a:	f7ff fef7 	bl	800117c <MFRC522_ReadRegister>
 800138e:	4603      	mov	r3, r0
 8001390:	753b      	strb	r3, [r7, #20]
		i--;
 8001392:	8a7b      	ldrh	r3, [r7, #18]
 8001394:	3b01      	subs	r3, #1
 8001396:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001398:	8a7b      	ldrh	r3, [r7, #18]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00a      	beq.n	80013b4 <MFRC522_ToCard+0xd6>
 800139e:	7d3b      	ldrb	r3, [r7, #20]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d105      	bne.n	80013b4 <MFRC522_ToCard+0xd6>
 80013a8:	7d3a      	ldrb	r2, [r7, #20]
 80013aa:	7d7b      	ldrb	r3, [r7, #21]
 80013ac:	4013      	ands	r3, r2
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0e9      	beq.n	8001388 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	200d      	movs	r0, #13
 80013b8:	f7ff ff4e 	bl	8001258 <MFRC522_ClearBitMask>

	if (i != 0)  {
 80013bc:	8a7b      	ldrh	r3, [r7, #18]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d057      	beq.n	8001472 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 80013c2:	2006      	movs	r0, #6
 80013c4:	f7ff feda 	bl	800117c <MFRC522_ReadRegister>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f003 031b 	and.w	r3, r3, #27
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d14d      	bne.n	800146e <MFRC522_ToCard+0x190>
			status = MI_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 80013d6:	7d3a      	ldrb	r2, [r7, #20]
 80013d8:	7dbb      	ldrb	r3, [r7, #22]
 80013da:	4013      	ands	r3, r2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MFRC522_ToCard+0x10c>
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b0c      	cmp	r3, #12
 80013ee:	d140      	bne.n	8001472 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80013f0:	200a      	movs	r0, #10
 80013f2:	f7ff fec3 	bl	800117c <MFRC522_ReadRegister>
 80013f6:	4603      	mov	r3, r0
 80013f8:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80013fa:	200c      	movs	r0, #12
 80013fc:	f7ff febe 	bl	800117c <MFRC522_ReadRegister>
 8001400:	4603      	mov	r3, r0
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8001408:	7c7b      	ldrb	r3, [r7, #17]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00b      	beq.n	8001426 <MFRC522_ToCard+0x148>
 800140e:	7d3b      	ldrb	r3, [r7, #20]
 8001410:	3b01      	subs	r3, #1
 8001412:	b29b      	uxth	r3, r3
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	b29a      	uxth	r2, r3
 8001418:	7c7b      	ldrb	r3, [r7, #17]
 800141a:	b29b      	uxth	r3, r3
 800141c:	4413      	add	r3, r2
 800141e:	b29a      	uxth	r2, r3
 8001420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001422:	801a      	strh	r2, [r3, #0]
 8001424:	e005      	b.n	8001432 <MFRC522_ToCard+0x154>
 8001426:	7d3b      	ldrb	r3, [r7, #20]
 8001428:	b29b      	uxth	r3, r3
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	b29a      	uxth	r2, r3
 800142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001430:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8001432:	7d3b      	ldrb	r3, [r7, #20]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <MFRC522_ToCard+0x15e>
 8001438:	2301      	movs	r3, #1
 800143a:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 800143c:	7d3b      	ldrb	r3, [r7, #20]
 800143e:	2b10      	cmp	r3, #16
 8001440:	d901      	bls.n	8001446 <MFRC522_ToCard+0x168>
 8001442:	2310      	movs	r3, #16
 8001444:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8001446:	2300      	movs	r3, #0
 8001448:	827b      	strh	r3, [r7, #18]
 800144a:	e00a      	b.n	8001462 <MFRC522_ToCard+0x184>
 800144c:	8a7b      	ldrh	r3, [r7, #18]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	18d4      	adds	r4, r2, r3
 8001452:	2009      	movs	r0, #9
 8001454:	f7ff fe92 	bl	800117c <MFRC522_ReadRegister>
 8001458:	4603      	mov	r3, r0
 800145a:	7023      	strb	r3, [r4, #0]
 800145c:	8a7b      	ldrh	r3, [r7, #18]
 800145e:	3301      	adds	r3, #1
 8001460:	827b      	strh	r3, [r7, #18]
 8001462:	7d3b      	ldrb	r3, [r7, #20]
 8001464:	b29b      	uxth	r3, r3
 8001466:	8a7a      	ldrh	r2, [r7, #18]
 8001468:	429a      	cmp	r2, r3
 800146a:	d3ef      	bcc.n	800144c <MFRC522_ToCard+0x16e>
 800146c:	e001      	b.n	8001472 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 800146e:	2302      	movs	r3, #2
 8001470:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8001472:	7dfb      	ldrb	r3, [r7, #23]
}
 8001474:	4618      	mov	r0, r3
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}

0800147c <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af02      	add	r7, sp, #8
 8001482:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8001488:	2100      	movs	r1, #0
 800148a:	200d      	movs	r0, #13
 800148c:	f7ff fe5e 	bl	800114c <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2293      	movs	r2, #147	; 0x93
 8001494:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3301      	adds	r3, #1
 800149a:	2220      	movs	r2, #32
 800149c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800149e:	f107 030a 	add.w	r3, r7, #10
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2202      	movs	r2, #2
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	200c      	movs	r0, #12
 80014ac:	f7ff ff17 	bl	80012de <MFRC522_ToCard>
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d118      	bne.n	80014ec <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 80014ba:	2300      	movs	r3, #0
 80014bc:	73bb      	strb	r3, [r7, #14]
 80014be:	e009      	b.n	80014d4 <MFRC522_Anticoll+0x58>
 80014c0:	7bbb      	ldrb	r3, [r7, #14]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	7b7b      	ldrb	r3, [r7, #13]
 80014ca:	4053      	eors	r3, r2
 80014cc:	737b      	strb	r3, [r7, #13]
 80014ce:	7bbb      	ldrb	r3, [r7, #14]
 80014d0:	3301      	adds	r3, #1
 80014d2:	73bb      	strb	r3, [r7, #14]
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d9f2      	bls.n	80014c0 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 80014da:	7bbb      	ldrb	r3, [r7, #14]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	7b7a      	ldrb	r2, [r7, #13]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <MFRC522_Anticoll+0x70>
 80014e8:	2302      	movs	r3, #2
 80014ea:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 80014f6:	b590      	push	{r4, r7, lr}
 80014f8:	b087      	sub	sp, #28
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	460b      	mov	r3, r1
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8001504:	2104      	movs	r1, #4
 8001506:	2005      	movs	r0, #5
 8001508:	f7ff fea6 	bl	8001258 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	200a      	movs	r0, #10
 8001510:	f7ff fe88 	bl	8001224 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001514:	2300      	movs	r3, #0
 8001516:	75fb      	strb	r3, [r7, #23]
 8001518:	e00a      	b.n	8001530 <MFRC522_CalculateCRC+0x3a>
 800151a:	7dfb      	ldrb	r3, [r7, #23]
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	4619      	mov	r1, r3
 8001524:	2009      	movs	r0, #9
 8001526:	f7ff fe11 	bl	800114c <MFRC522_WriteRegister>
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	3301      	adds	r3, #1
 800152e:	75fb      	strb	r3, [r7, #23]
 8001530:	7dfa      	ldrb	r2, [r7, #23]
 8001532:	7afb      	ldrb	r3, [r7, #11]
 8001534:	429a      	cmp	r2, r3
 8001536:	d3f0      	bcc.n	800151a <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001538:	2103      	movs	r1, #3
 800153a:	2001      	movs	r0, #1
 800153c:	f7ff fe06 	bl	800114c <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8001540:	23ff      	movs	r3, #255	; 0xff
 8001542:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001544:	2005      	movs	r0, #5
 8001546:	f7ff fe19 	bl	800117c <MFRC522_ReadRegister>
 800154a:	4603      	mov	r3, r0
 800154c:	75bb      	strb	r3, [r7, #22]
		i--;
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	3b01      	subs	r3, #1
 8001552:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																		// CRCIrq = 1
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <MFRC522_CalculateCRC+0x6e>
 800155a:	7dbb      	ldrb	r3, [r7, #22]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0ef      	beq.n	8001544 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001564:	2022      	movs	r0, #34	; 0x22
 8001566:	f7ff fe09 	bl	800117c <MFRC522_ReadRegister>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	1c5c      	adds	r4, r3, #1
 8001576:	2021      	movs	r0, #33	; 0x21
 8001578:	f7ff fe00 	bl	800117c <MFRC522_ReadRegister>
 800157c:	4603      	mov	r3, r0
 800157e:	7023      	strb	r3, [r4, #0]
}
 8001580:	bf00      	nop
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd90      	pop	{r4, r7, pc}

08001588 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 800158c:	f000 f820 	bl	80015d0 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001590:	218d      	movs	r1, #141	; 0x8d
 8001592:	202a      	movs	r0, #42	; 0x2a
 8001594:	f7ff fdda 	bl	800114c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001598:	213e      	movs	r1, #62	; 0x3e
 800159a:	202b      	movs	r0, #43	; 0x2b
 800159c:	f7ff fdd6 	bl	800114c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 80015a0:	211e      	movs	r1, #30
 80015a2:	202d      	movs	r0, #45	; 0x2d
 80015a4:	f7ff fdd2 	bl	800114c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80015a8:	2100      	movs	r1, #0
 80015aa:	202c      	movs	r0, #44	; 0x2c
 80015ac:	f7ff fdce 	bl	800114c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain
 80015b0:	2170      	movs	r1, #112	; 0x70
 80015b2:	2026      	movs	r0, #38	; 0x26
 80015b4:	f7ff fdca 	bl	800114c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80015b8:	2140      	movs	r1, #64	; 0x40
 80015ba:	2015      	movs	r0, #21
 80015bc:	f7ff fdc6 	bl	800114c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80015c0:	213d      	movs	r1, #61	; 0x3d
 80015c2:	2011      	movs	r0, #17
 80015c4:	f7ff fdc2 	bl	800114c <MFRC522_WriteRegister>
	MFRC522_AntennaOn();											// Open the antenna
 80015c8:	f000 f80a 	bl	80015e0 <MFRC522_AntennaOn>
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 80015d4:	210f      	movs	r1, #15
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff fdb8 	bl	800114c <MFRC522_WriteRegister>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80015e6:	2014      	movs	r0, #20
 80015e8:	f7ff fdc8 	bl	800117c <MFRC522_ReadRegister>
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d103      	bne.n	8001602 <MFRC522_AntennaOn+0x22>
 80015fa:	2103      	movs	r1, #3
 80015fc:	2014      	movs	r0, #20
 80015fe:	f7ff fe11 	bl	8001224 <MFRC522_SetBitMask>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8001610:	2350      	movs	r3, #80	; 0x50
 8001612:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001618:	463b      	mov	r3, r7
 800161a:	1c9a      	adds	r2, r3, #2
 800161c:	463b      	mov	r3, r7
 800161e:	2102      	movs	r1, #2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff68 	bl	80014f6 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001626:	463a      	mov	r2, r7
 8001628:	4639      	mov	r1, r7
 800162a:	1dbb      	adds	r3, r7, #6
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	4613      	mov	r3, r2
 8001630:	2204      	movs	r2, #4
 8001632:	200c      	movs	r0, #12
 8001634:	f7ff fe53 	bl	80012de <MFRC522_ToCard>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_MspInit+0x4c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a0f      	ldr	r2, [pc, #60]	; (800168c <HAL_MspInit+0x4c>)
 8001650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_MspInit+0x4c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <HAL_MspInit+0x4c>)
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_MspInit+0x4c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800167e:	2007      	movs	r0, #7
 8001680:	f000 fa06 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800

08001690 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a19      	ldr	r2, [pc, #100]	; (8001714 <HAL_SPI_MspInit+0x84>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d12b      	bne.n	800170a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_SPI_MspInit+0x88>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <HAL_SPI_MspInit+0x88>)
 80016bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_SPI_MspInit+0x88>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_SPI_MspInit+0x88>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_SPI_MspInit+0x88>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_SPI_MspInit+0x88>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80016ea:	23e0      	movs	r3, #224	; 0xe0
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016fa:	2305      	movs	r3, #5
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_SPI_MspInit+0x8c>)
 8001706:	f000 f9f7 	bl	8001af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40013000 	.word	0x40013000
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176c:	f000 f89a 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <OTG_FS_IRQHandler+0x10>)
 800177a:	f000 fb8a 	bl	8001e92 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000194 	.word	0x20000194

08001788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <SystemInit+0x20>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <SystemInit+0x20>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017b2:	490e      	ldr	r1, [pc, #56]	; (80017ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b8:	e002      	b.n	80017c0 <LoopCopyDataInit>

080017ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017be:	3304      	adds	r3, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c4:	d3f9      	bcc.n	80017ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c6:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c8:	4c0b      	ldr	r4, [pc, #44]	; (80017f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017cc:	e001      	b.n	80017d2 <LoopFillZerobss>

080017ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d0:	3204      	adds	r2, #4

080017d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d4:	d3fb      	bcc.n	80017ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017d6:	f7ff ffd7 	bl	8001788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017da:	f003 f927 	bl	8004a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017de:	f7ff f98d 	bl	8000afc <main>
  bx  lr    
 80017e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017f0:	08004af0 	.word	0x08004af0
  ldr r2, =_sbss
 80017f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80017f8:	20000498 	.word	0x20000498

080017fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <HAL_Init+0x40>)
 800180a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_Init+0x40>)
 8001816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_Init+0x40>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001828:	2003      	movs	r0, #3
 800182a:	f000 f931 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182e:	2000      	movs	r0, #0
 8001830:	f000 f808 	bl	8001844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001834:	f7ff ff04 	bl	8001640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_InitTick+0x54>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_InitTick+0x58>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f93b 	bl	8001ade <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e00e      	b.n	8001890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d80a      	bhi.n	800188e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001880:	f000 f911 	bl	8001aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001884:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <HAL_InitTick+0x5c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000050 	.word	0x20000050
 800189c:	20000058 	.word	0x20000058
 80018a0:	20000054 	.word	0x20000054

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000058 	.word	0x20000058
 80018c8:	20000190 	.word	0x20000190

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000190 	.word	0x20000190

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000058 	.word	0x20000058

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db0a      	blt.n	80019ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	490c      	ldr	r1, [pc, #48]	; (80019dc <__NVIC_SetPriority+0x4c>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	0112      	lsls	r2, r2, #4
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	440b      	add	r3, r1
 80019b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b8:	e00a      	b.n	80019d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4908      	ldr	r1, [pc, #32]	; (80019e0 <__NVIC_SetPriority+0x50>)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	3b04      	subs	r3, #4
 80019c8:	0112      	lsls	r2, r2, #4
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	761a      	strb	r2, [r3, #24]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f1c3 0307 	rsb	r3, r3, #7
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	bf28      	it	cs
 8001a02:	2304      	movcs	r3, #4
 8001a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d902      	bls.n	8001a14 <NVIC_EncodePriority+0x30>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3b03      	subs	r3, #3
 8001a12:	e000      	b.n	8001a16 <NVIC_EncodePriority+0x32>
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	401a      	ands	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa01 f303 	lsl.w	r3, r1, r3
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4313      	orrs	r3, r2
         );
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a5c:	d301      	bcc.n	8001a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00f      	b.n	8001a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <SysTick_Config+0x40>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a70:	f7ff ff8e 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <SysTick_Config+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SysTick_Config+0x40>)
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010

08001a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff47 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab8:	f7ff ff5c 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f7ff ff8e 	bl	80019e4 <NVIC_EncodePriority>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ace:	4611      	mov	r1, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5d 	bl	8001990 <__NVIC_SetPriority>
}
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffb0 	bl	8001a4c <SysTick_Config>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	e16b      	b.n	8001dec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 815a 	bne.w	8001de6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d005      	beq.n	8001b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d130      	bne.n	8001bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	2203      	movs	r2, #3
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 0201 	and.w	r2, r3, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d017      	beq.n	8001be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d123      	bne.n	8001c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	08da      	lsrs	r2, r3, #3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3208      	adds	r2, #8
 8001bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3208      	adds	r2, #8
 8001c36:	69b9      	ldr	r1, [r7, #24]
 8001c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0203 	and.w	r2, r3, #3
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80b4 	beq.w	8001de6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b60      	ldr	r3, [pc, #384]	; (8001e04 <HAL_GPIO_Init+0x30c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a5f      	ldr	r2, [pc, #380]	; (8001e04 <HAL_GPIO_Init+0x30c>)
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <HAL_GPIO_Init+0x30c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c9a:	4a5b      	ldr	r2, [pc, #364]	; (8001e08 <HAL_GPIO_Init+0x310>)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_GPIO_Init+0x314>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d02b      	beq.n	8001d1e <HAL_GPIO_Init+0x226>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a51      	ldr	r2, [pc, #324]	; (8001e10 <HAL_GPIO_Init+0x318>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d025      	beq.n	8001d1a <HAL_GPIO_Init+0x222>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a50      	ldr	r2, [pc, #320]	; (8001e14 <HAL_GPIO_Init+0x31c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01f      	beq.n	8001d16 <HAL_GPIO_Init+0x21e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4f      	ldr	r2, [pc, #316]	; (8001e18 <HAL_GPIO_Init+0x320>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d019      	beq.n	8001d12 <HAL_GPIO_Init+0x21a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4e      	ldr	r2, [pc, #312]	; (8001e1c <HAL_GPIO_Init+0x324>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d013      	beq.n	8001d0e <HAL_GPIO_Init+0x216>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4d      	ldr	r2, [pc, #308]	; (8001e20 <HAL_GPIO_Init+0x328>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00d      	beq.n	8001d0a <HAL_GPIO_Init+0x212>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4c      	ldr	r2, [pc, #304]	; (8001e24 <HAL_GPIO_Init+0x32c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <HAL_GPIO_Init+0x20e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4b      	ldr	r2, [pc, #300]	; (8001e28 <HAL_GPIO_Init+0x330>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_GPIO_Init+0x20a>
 8001cfe:	2307      	movs	r3, #7
 8001d00:	e00e      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d02:	2308      	movs	r3, #8
 8001d04:	e00c      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d06:	2306      	movs	r3, #6
 8001d08:	e00a      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d0a:	2305      	movs	r3, #5
 8001d0c:	e008      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d0e:	2304      	movs	r3, #4
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d12:	2303      	movs	r3, #3
 8001d14:	e004      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e002      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_GPIO_Init+0x228>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	f002 0203 	and.w	r2, r2, #3
 8001d26:	0092      	lsls	r2, r2, #2
 8001d28:	4093      	lsls	r3, r2
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d30:	4935      	ldr	r1, [pc, #212]	; (8001e08 <HAL_GPIO_Init+0x310>)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	3302      	adds	r3, #2
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d3e:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d62:	4a32      	ldr	r2, [pc, #200]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d68:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db6:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de0:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <HAL_GPIO_Init+0x334>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3301      	adds	r3, #1
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b0f      	cmp	r3, #15
 8001df0:	f67f ae90 	bls.w	8001b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020c00 	.word	0x40020c00
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40021400 	.word	0x40021400
 8001e24:	40021800 	.word	0x40021800
 8001e28:	40021c00 	.word	0x40021c00
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e001      	b.n	8001e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e70:	787b      	ldrb	r3, [r7, #1]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e7c:	e003      	b.n	8001e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	041a      	lsls	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	619a      	str	r2, [r3, #24]
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fa8a 	bl	80043c2 <USB_GetMode>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	f040 80f6 	bne.w	80020a2 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 fa6e 	bl	800439c <USB_ReadInterrupts>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80ec 	beq.w	80020a0 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f002 fa65 	bl	800439c <USB_ReadInterrupts>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001edc:	d104      	bne.n	8001ee8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ee6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 fa55 	bl	800439c <USB_ReadInterrupts>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001efc:	d104      	bne.n	8001f08 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f06:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 fa45 	bl	800439c <USB_ReadInterrupts>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f1c:	d104      	bne.n	8001f28 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f26:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 fa35 	bl	800439c <USB_ReadInterrupts>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d103      	bne.n	8001f44 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2202      	movs	r2, #2
 8001f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f002 fa27 	bl	800439c <USB_ReadInterrupts>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f58:	d11c      	bne.n	8001f94 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f62:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10f      	bne.n	8001f94 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f74:	2110      	movs	r1, #16
 8001f76:	6938      	ldr	r0, [r7, #16]
 8001f78:	f002 f974 	bl	8004264 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f7c:	6938      	ldr	r0, [r7, #16]
 8001f7e:	f002 f995 	bl	80042ac <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2101      	movs	r1, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f002 fa28 	bl	80043de <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f002 fccd 	bl	800492e <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f002 f9ff 	bl	800439c <USB_ReadInterrupts>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa8:	d102      	bne.n	8001fb0 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f001 f98e 	bl	80032cc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 f9f1 	bl	800439c <USB_ReadInterrupts>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d106      	bne.n	8001fd2 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f002 fc96 	bl	80048f6 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2208      	movs	r2, #8
 8001fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 f9e0 	bl	800439c <USB_ReadInterrupts>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d101      	bne.n	8001fea <HAL_HCD_IRQHandler+0x158>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_HCD_IRQHandler+0x15a>
 8001fea:	2300      	movs	r3, #0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d012      	beq.n	8002016 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0210 	bic.w	r2, r2, #16
 8001ffe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f001 f891 	bl	8003128 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699a      	ldr	r2, [r3, #24]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0210 	orr.w	r2, r2, #16
 8002014:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f002 f9be 	bl	800439c <USB_ReadInterrupts>
 8002020:	4603      	mov	r3, r0
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800202a:	d13a      	bne.n	80020a2 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f002 fa0e 	bl	8004452 <USB_HC_ReadInterrupt>
 8002036:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e025      	b.n	800208a <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	fa22 f303 	lsr.w	r3, r2, r3
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d018      	beq.n	8002084 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4413      	add	r3, r2
 800205a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002068:	d106      	bne.n	8002078 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f836 	bl	80020e2 <HCD_HC_IN_IRQHandler>
 8002076:	e005      	b.n	8002084 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	4619      	mov	r1, r3
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fc51 	bl	8002926 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3301      	adds	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	429a      	cmp	r2, r3
 8002092:	d3d4      	bcc.n	800203e <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800209c:	615a      	str	r2, [r3, #20]
 800209e:	e000      	b.n	80020a2 <HAL_HCD_IRQHandler+0x210>
      return;
 80020a0:	bf00      	nop
    }
  }
}
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_HCD_Stop+0x16>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e00d      	b.n	80020da <HAL_HCD_Stop+0x32>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 faee 	bl	80046ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b04      	cmp	r3, #4
 8002110:	d119      	bne.n	8002146 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211e:	461a      	mov	r2, r3
 8002120:	2304      	movs	r3, #4
 8002122:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	0151      	lsls	r1, r2, #5
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	440a      	add	r2, r1
 800213a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800213e:	f043 0302 	orr.w	r3, r3, #2
 8002142:	60d3      	str	r3, [r2, #12]
 8002144:	e101      	b.n	800234a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4413      	add	r3, r2
 800214e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800215c:	d12b      	bne.n	80021b6 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	461a      	mov	r2, r3
 800216c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002170:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	3361      	adds	r3, #97	; 0x61
 8002180:	2207      	movs	r2, #7
 8002182:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	0151      	lsls	r1, r2, #5
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	440a      	add	r2, r1
 800219a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800219e:	f043 0302 	orr.w	r3, r3, #2
 80021a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f002 f960 	bl	8004474 <USB_HC_Halt>
 80021b4:	e0c9      	b.n	800234a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d109      	bne.n	80021e0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	461a      	mov	r2, r3
 80021da:	2320      	movs	r3, #32
 80021dc:	6093      	str	r3, [r2, #8]
 80021de:	e0b4      	b.n	800234a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d133      	bne.n	800225e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	0151      	lsls	r1, r2, #5
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	440a      	add	r2, r1
 800220c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	3361      	adds	r3, #97	; 0x61
 8002224:	2205      	movs	r2, #5
 8002226:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4413      	add	r3, r2
 8002230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002234:	461a      	mov	r2, r3
 8002236:	2310      	movs	r3, #16
 8002238:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002246:	461a      	mov	r2, r3
 8002248:	2308      	movs	r3, #8
 800224a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f002 f90c 	bl	8004474 <USB_HC_Halt>
 800225c:	e075      	b.n	800234a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002274:	d134      	bne.n	80022e0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	0151      	lsls	r1, r2, #5
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	440a      	add	r2, r1
 800228c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	212c      	movs	r1, #44	; 0x2c
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	3361      	adds	r3, #97	; 0x61
 80022a4:	2208      	movs	r2, #8
 80022a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	461a      	mov	r2, r3
 80022b6:	2310      	movs	r3, #16
 80022b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	461a      	mov	r2, r3
 80022c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f002 f8cb 	bl	8004474 <USB_HC_Halt>
 80022de:	e034      	b.n	800234a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f2:	2b80      	cmp	r3, #128	; 0x80
 80022f4:	d129      	bne.n	800234a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	0151      	lsls	r1, r2, #5
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	440a      	add	r2, r1
 800230c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	3361      	adds	r3, #97	; 0x61
 8002324:	2206      	movs	r2, #6
 8002326:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f002 f89e 	bl	8004474 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002360:	d122      	bne.n	80023a8 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	0151      	lsls	r1, r2, #5
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	440a      	add	r2, r1
 8002378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f002 f871 	bl	8004474 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	461a      	mov	r2, r3
 80023a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80023a6:	e2ba      	b.n	800291e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	f040 811b 	bne.w	80025f6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d019      	beq.n	80023fc <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	3348      	adds	r3, #72	; 0x48
 80023d6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	0159      	lsls	r1, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	440b      	add	r3, r1
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023ea:	1ad2      	subs	r2, r2, r3
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	202c      	movs	r0, #44	; 0x2c
 80023f2:	fb00 f303 	mul.w	r3, r0, r3
 80023f6:	440b      	add	r3, r1
 80023f8:	3350      	adds	r3, #80	; 0x50
 80023fa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3361      	adds	r3, #97	; 0x61
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	335c      	adds	r3, #92	; 0x5c
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242c:	461a      	mov	r2, r3
 800242e:	2301      	movs	r3, #1
 8002430:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	333f      	adds	r3, #63	; 0x3f
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	333f      	adds	r3, #63	; 0x3f
 8002454:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002456:	2b02      	cmp	r3, #2
 8002458:	d121      	bne.n	800249e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	0151      	lsls	r1, r2, #5
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	440a      	add	r2, r1
 8002470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f001 fff5 	bl	8004474 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	461a      	mov	r2, r3
 8002498:	2310      	movs	r3, #16
 800249a:	6093      	str	r3, [r2, #8]
 800249c:	e066      	b.n	800256c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	333f      	adds	r3, #63	; 0x3f
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d127      	bne.n	8002502 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	0151      	lsls	r1, r2, #5
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	440a      	add	r2, r1
 80024c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024d0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	3360      	adds	r3, #96	; 0x60
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	b2d9      	uxtb	r1, r3
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	202c      	movs	r0, #44	; 0x2c
 80024ee:	fb00 f303 	mul.w	r3, r0, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3360      	adds	r3, #96	; 0x60
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f002 fa25 	bl	800494a <HAL_HCD_HC_NotifyURBChange_Callback>
 8002500:	e034      	b.n	800256c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	212c      	movs	r1, #44	; 0x2c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	333f      	adds	r3, #63	; 0x3f
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d12a      	bne.n	800256c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	3360      	adds	r3, #96	; 0x60
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	3354      	adds	r3, #84	; 0x54
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	f083 0301 	eor.w	r3, r3, #1
 800253c:	b2d8      	uxtb	r0, r3
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	3354      	adds	r3, #84	; 0x54
 800254c:	4602      	mov	r2, r0
 800254e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	b2d9      	uxtb	r1, r3
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	202c      	movs	r0, #44	; 0x2c
 800255a:	fb00 f303 	mul.w	r3, r0, r3
 800255e:	4413      	add	r3, r2
 8002560:	3360      	adds	r3, #96	; 0x60
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f002 f9ef 	bl	800494a <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d12b      	bne.n	80025cc <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3348      	adds	r3, #72	; 0x48
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	202c      	movs	r0, #44	; 0x2c
 800258a:	fb00 f202 	mul.w	r2, r0, r2
 800258e:	440a      	add	r2, r1
 8002590:	3240      	adds	r2, #64	; 0x40
 8002592:	8812      	ldrh	r2, [r2, #0]
 8002594:	fbb3 f3f2 	udiv	r3, r3, r2
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 81be 	beq.w	800291e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	3354      	adds	r3, #84	; 0x54
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	f083 0301 	eor.w	r3, r3, #1
 80025b6:	b2d8      	uxtb	r0, r3
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3354      	adds	r3, #84	; 0x54
 80025c6:	4602      	mov	r2, r0
 80025c8:	701a      	strb	r2, [r3, #0]
}
 80025ca:	e1a8      	b.n	800291e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3354      	adds	r3, #84	; 0x54
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	f083 0301 	eor.w	r3, r3, #1
 80025e0:	b2d8      	uxtb	r0, r3
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3354      	adds	r3, #84	; 0x54
 80025f0:	4602      	mov	r2, r0
 80025f2:	701a      	strb	r2, [r3, #0]
}
 80025f4:	e193      	b.n	800291e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b02      	cmp	r3, #2
 800260a:	f040 8106 	bne.w	800281a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	0151      	lsls	r1, r2, #5
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	440a      	add	r2, r1
 8002624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002628:	f023 0302 	bic.w	r3, r3, #2
 800262c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	3361      	adds	r3, #97	; 0x61
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d109      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	3360      	adds	r3, #96	; 0x60
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	e0c9      	b.n	80027ea <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3361      	adds	r3, #97	; 0x61
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b05      	cmp	r3, #5
 8002668:	d109      	bne.n	800267e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3360      	adds	r3, #96	; 0x60
 8002678:	2205      	movs	r2, #5
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e0b5      	b.n	80027ea <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	3361      	adds	r3, #97	; 0x61
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b06      	cmp	r3, #6
 8002690:	d009      	beq.n	80026a6 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3361      	adds	r3, #97	; 0x61
 80026a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d150      	bne.n	8002748 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	335c      	adds	r3, #92	; 0x5c
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	202c      	movs	r0, #44	; 0x2c
 80026be:	fb00 f303 	mul.w	r3, r0, r3
 80026c2:	440b      	add	r3, r1
 80026c4:	335c      	adds	r3, #92	; 0x5c
 80026c6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	335c      	adds	r3, #92	; 0x5c
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d912      	bls.n	8002702 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	335c      	adds	r3, #92	; 0x5c
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	3360      	adds	r3, #96	; 0x60
 80026fc:	2204      	movs	r2, #4
 80026fe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002700:	e073      	b.n	80027ea <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	3360      	adds	r3, #96	; 0x60
 8002710:	2202      	movs	r2, #2
 8002712:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800272a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002732:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002740:	461a      	mov	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002746:	e050      	b.n	80027ea <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	3361      	adds	r3, #97	; 0x61
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d122      	bne.n	80027a2 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	212c      	movs	r1, #44	; 0x2c
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	4413      	add	r3, r2
 8002768:	3360      	adds	r3, #96	; 0x60
 800276a:	2202      	movs	r2, #2
 800276c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002784:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800278c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279a:	461a      	mov	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	e023      	b.n	80027ea <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3361      	adds	r3, #97	; 0x61
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b07      	cmp	r3, #7
 80027b4:	d119      	bne.n	80027ea <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	335c      	adds	r3, #92	; 0x5c
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	202c      	movs	r0, #44	; 0x2c
 80027ce:	fb00 f303 	mul.w	r3, r0, r3
 80027d2:	440b      	add	r3, r1
 80027d4:	335c      	adds	r3, #92	; 0x5c
 80027d6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	3360      	adds	r3, #96	; 0x60
 80027e6:	2204      	movs	r2, #4
 80027e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f6:	461a      	mov	r2, r3
 80027f8:	2302      	movs	r3, #2
 80027fa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	b2d9      	uxtb	r1, r3
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	202c      	movs	r0, #44	; 0x2c
 8002806:	fb00 f303 	mul.w	r3, r0, r3
 800280a:	4413      	add	r3, r2
 800280c:	3360      	adds	r3, #96	; 0x60
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f002 f899 	bl	800494a <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002818:	e081      	b.n	800291e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b10      	cmp	r3, #16
 800282e:	d176      	bne.n	800291e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	333f      	adds	r3, #63	; 0x3f
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d121      	bne.n	8002888 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	335c      	adds	r3, #92	; 0x5c
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	0151      	lsls	r1, r2, #5
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	440a      	add	r2, r1
 800286c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f001 fdf7 	bl	8004474 <USB_HC_Halt>
 8002886:	e041      	b.n	800290c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	333f      	adds	r3, #63	; 0x3f
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	333f      	adds	r3, #63	; 0x3f
 80028aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d12d      	bne.n	800290c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	335c      	adds	r3, #92	; 0x5c
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d120      	bne.n	800290c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3361      	adds	r3, #97	; 0x61
 80028d8:	2203      	movs	r2, #3
 80028da:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	0151      	lsls	r1, r2, #5
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	440a      	add	r2, r1
 80028f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028f6:	f043 0302 	orr.w	r3, r3, #2
 80028fa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f001 fdb4 	bl	8004474 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	461a      	mov	r2, r3
 800291a:	2310      	movs	r3, #16
 800291c:	6093      	str	r3, [r2, #8]
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b088      	sub	sp, #32
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	4413      	add	r3, r2
 8002948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b04      	cmp	r3, #4
 8002954:	d119      	bne.n	800298a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	461a      	mov	r2, r3
 8002964:	2304      	movs	r3, #4
 8002966:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	0151      	lsls	r1, r2, #5
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	440a      	add	r2, r1
 800297e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002988:	e3ca      	b.n	8003120 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b20      	cmp	r3, #32
 800299e:	d13e      	bne.n	8002a1e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	461a      	mov	r2, r3
 80029ae:	2320      	movs	r3, #32
 80029b0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	333d      	adds	r3, #61	; 0x3d
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	f040 83ac 	bne.w	8003120 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	333d      	adds	r3, #61	; 0x3d
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	3360      	adds	r3, #96	; 0x60
 80029e8:	2202      	movs	r2, #2
 80029ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	0151      	lsls	r1, r2, #5
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	440a      	add	r2, r1
 8002a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 fd2c 	bl	8004474 <USB_HC_Halt>
}
 8002a1c:	e380      	b.n	8003120 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a34:	d122      	bne.n	8002a7c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	0151      	lsls	r1, r2, #5
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	440a      	add	r2, r1
 8002a4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 fd07 	bl	8004474 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a72:	461a      	mov	r2, r3
 8002a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a78:	6093      	str	r3, [r2, #8]
}
 8002a7a:	e351      	b.n	8003120 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d150      	bne.n	8002b34 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	335c      	adds	r3, #92	; 0x5c
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d111      	bne.n	8002ade <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	333d      	adds	r3, #61	; 0x3d
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2340      	movs	r3, #64	; 0x40
 8002adc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	0151      	lsls	r1, r2, #5
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	440a      	add	r2, r1
 8002af4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f001 fcb3 	bl	8004474 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3361      	adds	r3, #97	; 0x61
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
}
 8002b32:	e2f5      	b.n	8003120 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d13c      	bne.n	8002bc4 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3361      	adds	r3, #97	; 0x61
 8002b58:	2204      	movs	r2, #4
 8002b5a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	333d      	adds	r3, #61	; 0x3d
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	335c      	adds	r3, #92	; 0x5c
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	0151      	lsls	r1, r2, #5
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	440a      	add	r2, r1
 8002b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b9a:	f043 0302 	orr.w	r3, r3, #2
 8002b9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 fc62 	bl	8004474 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2340      	movs	r3, #64	; 0x40
 8002bc0:	6093      	str	r3, [r2, #8]
}
 8002bc2:	e2ad      	b.n	8003120 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d12a      	bne.n	8002c30 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be6:	461a      	mov	r2, r3
 8002be8:	2308      	movs	r3, #8
 8002bea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	0151      	lsls	r1, r2, #5
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	440a      	add	r2, r1
 8002c02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c06:	f043 0302 	orr.w	r3, r3, #2
 8002c0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 fc2c 	bl	8004474 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3361      	adds	r3, #97	; 0x61
 8002c2a:	2205      	movs	r2, #5
 8002c2c:	701a      	strb	r2, [r3, #0]
}
 8002c2e:	e277      	b.n	8003120 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d150      	bne.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	335c      	adds	r3, #92	; 0x5c
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3361      	adds	r3, #97	; 0x61
 8002c66:	2203      	movs	r2, #3
 8002c68:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	333d      	adds	r3, #61	; 0x3d
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d112      	bne.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	333c      	adds	r3, #60	; 0x3c
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d108      	bne.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	333d      	adds	r3, #61	; 0x3d
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	0151      	lsls	r1, r2, #5
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	440a      	add	r2, r1
 8002cba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f001 fbd0 	bl	8004474 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2310      	movs	r3, #16
 8002ce4:	6093      	str	r3, [r2, #8]
}
 8002ce6:	e21b      	b.n	8003120 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b80      	cmp	r3, #128	; 0x80
 8002cfc:	d174      	bne.n	8002de8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d121      	bne.n	8002d4a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3361      	adds	r3, #97	; 0x61
 8002d14:	2206      	movs	r2, #6
 8002d16:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	0151      	lsls	r1, r2, #5
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	440a      	add	r2, r1
 8002d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d32:	f043 0302 	orr.w	r3, r3, #2
 8002d36:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 fb96 	bl	8004474 <USB_HC_Halt>
 8002d48:	e044      	b.n	8002dd4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	335c      	adds	r3, #92	; 0x5c
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	202c      	movs	r0, #44	; 0x2c
 8002d62:	fb00 f303 	mul.w	r3, r0, r3
 8002d66:	440b      	add	r3, r1
 8002d68:	335c      	adds	r3, #92	; 0x5c
 8002d6a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	335c      	adds	r3, #92	; 0x5c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d920      	bls.n	8002dc2 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	335c      	adds	r3, #92	; 0x5c
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3360      	adds	r3, #96	; 0x60
 8002da0:	2204      	movs	r2, #4
 8002da2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	b2d9      	uxtb	r1, r3
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	202c      	movs	r0, #44	; 0x2c
 8002dae:	fb00 f303 	mul.w	r3, r0, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3360      	adds	r3, #96	; 0x60
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f001 fdc5 	bl	800494a <HAL_HCD_HC_NotifyURBChange_Callback>
 8002dc0:	e008      	b.n	8002dd4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3360      	adds	r3, #96	; 0x60
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de0:	461a      	mov	r2, r3
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	6093      	str	r3, [r2, #8]
}
 8002de6:	e19b      	b.n	8003120 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfe:	d134      	bne.n	8002e6a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	0151      	lsls	r1, r2, #5
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	440a      	add	r2, r1
 8002e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 fb22 	bl	8004474 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2310      	movs	r3, #16
 8002e40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3361      	adds	r3, #97	; 0x61
 8002e64:	2208      	movs	r2, #8
 8002e66:	701a      	strb	r2, [r3, #0]
}
 8002e68:	e15a      	b.n	8003120 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	f040 814f 	bne.w	8003120 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	0151      	lsls	r1, r2, #5
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	440a      	add	r2, r1
 8002e98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e9c:	f023 0302 	bic.w	r3, r3, #2
 8002ea0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	3361      	adds	r3, #97	; 0x61
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d17d      	bne.n	8002fb2 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3360      	adds	r3, #96	; 0x60
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	212c      	movs	r1, #44	; 0x2c
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	333f      	adds	r3, #63	; 0x3f
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d00a      	beq.n	8002ef2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	333f      	adds	r3, #63	; 0x3f
 8002eea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	f040 8100 	bne.w	80030f2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d113      	bne.n	8002f22 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3355      	adds	r3, #85	; 0x55
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	f083 0301 	eor.w	r3, r3, #1
 8002f0e:	b2d8      	uxtb	r0, r3
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3355      	adds	r3, #85	; 0x55
 8002f1e:	4602      	mov	r2, r0
 8002f20:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	f040 80e3 	bne.w	80030f2 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	334c      	adds	r3, #76	; 0x4c
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80d8 	beq.w	80030f2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	334c      	adds	r3, #76	; 0x4c
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	202c      	movs	r0, #44	; 0x2c
 8002f58:	fb00 f202 	mul.w	r2, r0, r2
 8002f5c:	440a      	add	r2, r1
 8002f5e:	3240      	adds	r2, #64	; 0x40
 8002f60:	8812      	ldrh	r2, [r2, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	3b01      	subs	r3, #1
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	202c      	movs	r0, #44	; 0x2c
 8002f6c:	fb00 f202 	mul.w	r2, r0, r2
 8002f70:	440a      	add	r2, r1
 8002f72:	3240      	adds	r2, #64	; 0x40
 8002f74:	8812      	ldrh	r2, [r2, #0]
 8002f76:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80b5 	beq.w	80030f2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	3355      	adds	r3, #85	; 0x55
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	f083 0301 	eor.w	r3, r3, #1
 8002f9c:	b2d8      	uxtb	r0, r3
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	3355      	adds	r3, #85	; 0x55
 8002fac:	4602      	mov	r2, r0
 8002fae:	701a      	strb	r2, [r3, #0]
 8002fb0:	e09f      	b.n	80030f2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3361      	adds	r3, #97	; 0x61
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d109      	bne.n	8002fda <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3360      	adds	r3, #96	; 0x60
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	701a      	strb	r2, [r3, #0]
 8002fd8:	e08b      	b.n	80030f2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	212c      	movs	r1, #44	; 0x2c
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3361      	adds	r3, #97	; 0x61
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d109      	bne.n	8003002 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3360      	adds	r3, #96	; 0x60
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e077      	b.n	80030f2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	3361      	adds	r3, #97	; 0x61
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b05      	cmp	r3, #5
 8003014:	d109      	bne.n	800302a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	3360      	adds	r3, #96	; 0x60
 8003024:	2205      	movs	r2, #5
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e063      	b.n	80030f2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	3361      	adds	r3, #97	; 0x61
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b06      	cmp	r3, #6
 800303c:	d009      	beq.n	8003052 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	3361      	adds	r3, #97	; 0x61
 800304c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800304e:	2b08      	cmp	r3, #8
 8003050:	d14f      	bne.n	80030f2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	335c      	adds	r3, #92	; 0x5c
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	202c      	movs	r0, #44	; 0x2c
 800306a:	fb00 f303 	mul.w	r3, r0, r3
 800306e:	440b      	add	r3, r1
 8003070:	335c      	adds	r3, #92	; 0x5c
 8003072:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	335c      	adds	r3, #92	; 0x5c
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d912      	bls.n	80030ae <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	335c      	adds	r3, #92	; 0x5c
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	3360      	adds	r3, #96	; 0x60
 80030a8:	2204      	movs	r2, #4
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e021      	b.n	80030f2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	212c      	movs	r1, #44	; 0x2c
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3360      	adds	r3, #96	; 0x60
 80030bc:	2202      	movs	r2, #2
 80030be:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030d6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030de:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	461a      	mov	r2, r3
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fe:	461a      	mov	r2, r3
 8003100:	2302      	movs	r3, #2
 8003102:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	b2d9      	uxtb	r1, r3
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	202c      	movs	r0, #44	; 0x2c
 800310e:	fb00 f303 	mul.w	r3, r0, r3
 8003112:	4413      	add	r3, r2
 8003114:	3360      	adds	r3, #96	; 0x60
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f001 fc15 	bl	800494a <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003120:	bf00      	nop
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	0c5b      	lsrs	r3, r3, #17
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800315c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d004      	beq.n	800316e <HCD_RXQLVL_IRQHandler+0x46>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b05      	cmp	r3, #5
 8003168:	f000 80a9 	beq.w	80032be <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800316c:	e0aa      	b.n	80032c4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80a6 	beq.w	80032c2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	3344      	adds	r3, #68	; 0x44
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 809b 	beq.w	80032c2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3350      	adds	r3, #80	; 0x50
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	441a      	add	r2, r3
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	202c      	movs	r0, #44	; 0x2c
 80031a6:	fb00 f303 	mul.w	r3, r0, r3
 80031aa:	440b      	add	r3, r1
 80031ac:	334c      	adds	r3, #76	; 0x4c
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d87a      	bhi.n	80032aa <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	212c      	movs	r1, #44	; 0x2c
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	3344      	adds	r3, #68	; 0x44
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	b292      	uxth	r2, r2
 80031cc:	4619      	mov	r1, r3
 80031ce:	f001 f88d 	bl	80042ec <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	212c      	movs	r1, #44	; 0x2c
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	3344      	adds	r3, #68	; 0x44
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	441a      	add	r2, r3
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	202c      	movs	r0, #44	; 0x2c
 80031ec:	fb00 f303 	mul.w	r3, r0, r3
 80031f0:	440b      	add	r3, r1
 80031f2:	3344      	adds	r3, #68	; 0x44
 80031f4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3350      	adds	r3, #80	; 0x50
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	441a      	add	r2, r3
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	202c      	movs	r0, #44	; 0x2c
 8003210:	fb00 f303 	mul.w	r3, r0, r3
 8003214:	440b      	add	r3, r1
 8003216:	3350      	adds	r3, #80	; 0x50
 8003218:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	0cdb      	lsrs	r3, r3, #19
 800322a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800322e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	3340      	adds	r3, #64	; 0x40
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4293      	cmp	r3, r2
 8003246:	d13c      	bne.n	80032c2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d039      	beq.n	80032c2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	4413      	add	r3, r2
 8003256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003264:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800326c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	4413      	add	r3, r2
 8003276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327a:	461a      	mov	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	3354      	adds	r3, #84	; 0x54
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	f083 0301 	eor.w	r3, r3, #1
 8003294:	b2d8      	uxtb	r0, r3
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	212c      	movs	r1, #44	; 0x2c
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	3354      	adds	r3, #84	; 0x54
 80032a4:	4602      	mov	r2, r0
 80032a6:	701a      	strb	r2, [r3, #0]
      break;
 80032a8:	e00b      	b.n	80032c2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	3360      	adds	r3, #96	; 0x60
 80032b8:	2204      	movs	r2, #4
 80032ba:	701a      	strb	r2, [r3, #0]
      break;
 80032bc:	e001      	b.n	80032c2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80032be:	bf00      	nop
 80032c0:	e000      	b.n	80032c4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80032c2:	bf00      	nop
  }
}
 80032c4:	bf00      	nop
 80032c6:	3728      	adds	r7, #40	; 0x28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032f8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b02      	cmp	r3, #2
 8003302:	d10b      	bne.n	800331c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d102      	bne.n	8003314 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f001 faff 	bl	8004912 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f043 0302 	orr.w	r3, r3, #2
 800331a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b08      	cmp	r3, #8
 8003324:	d132      	bne.n	800338c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f043 0308 	orr.w	r3, r3, #8
 800332c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b04      	cmp	r3, #4
 8003336:	d126      	bne.n	8003386 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d113      	bne.n	8003368 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800334a:	d106      	bne.n	800335a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2102      	movs	r1, #2
 8003352:	4618      	mov	r0, r3
 8003354:	f001 f843 	bl	80043de <USB_InitFSLSPClkSel>
 8003358:	e011      	b.n	800337e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2101      	movs	r1, #1
 8003360:	4618      	mov	r0, r3
 8003362:	f001 f83c 	bl	80043de <USB_InitFSLSPClkSel>
 8003366:	e00a      	b.n	800337e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d106      	bne.n	800337e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003376:	461a      	mov	r2, r3
 8003378:	f64e 2360 	movw	r3, #60000	; 0xea60
 800337c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f001 faf1 	bl	8004966 <HAL_HCD_PortEnabled_Callback>
 8003384:	e002      	b.n	800338c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f001 fafb 	bl	8004982 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b20      	cmp	r3, #32
 8003394:	d103      	bne.n	800339e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f043 0320 	orr.w	r3, r3, #32
 800339c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033a4:	461a      	mov	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	6013      	str	r3, [r2, #0]
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e264      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d075      	beq.n	80034be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033d2:	4ba3      	ldr	r3, [pc, #652]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d00c      	beq.n	80033f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4ba0      	ldr	r3, [pc, #640]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d112      	bne.n	8003410 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ea:	4b9d      	ldr	r3, [pc, #628]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f6:	d10b      	bne.n	8003410 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f8:	4b99      	ldr	r3, [pc, #612]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d05b      	beq.n	80034bc <HAL_RCC_OscConfig+0x108>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d157      	bne.n	80034bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e23f      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d106      	bne.n	8003428 <HAL_RCC_OscConfig+0x74>
 800341a:	4b91      	ldr	r3, [pc, #580]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a90      	ldr	r2, [pc, #576]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e01d      	b.n	8003464 <HAL_RCC_OscConfig+0xb0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x98>
 8003432:	4b8b      	ldr	r3, [pc, #556]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a8a      	ldr	r2, [pc, #552]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b88      	ldr	r3, [pc, #544]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a87      	ldr	r2, [pc, #540]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0xb0>
 800344c:	4b84      	ldr	r3, [pc, #528]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a83      	ldr	r2, [pc, #524]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b81      	ldr	r3, [pc, #516]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a80      	ldr	r2, [pc, #512]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 800345e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d013      	beq.n	8003494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fa2e 	bl	80018cc <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003474:	f7fe fa2a 	bl	80018cc <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e204      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	4b76      	ldr	r3, [pc, #472]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0xc0>
 8003492:	e014      	b.n	80034be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe fa1a 	bl	80018cc <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800349c:	f7fe fa16 	bl	80018cc <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e1f0      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ae:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0xe8>
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d063      	beq.n	8003592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ca:	4b65      	ldr	r3, [pc, #404]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b62      	ldr	r3, [pc, #392]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d11c      	bne.n	800351c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e2:	4b5f      	ldr	r3, [pc, #380]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d116      	bne.n	800351c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	4b5c      	ldr	r3, [pc, #368]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_RCC_OscConfig+0x152>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d001      	beq.n	8003506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e1c4      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003506:	4b56      	ldr	r3, [pc, #344]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4952      	ldr	r1, [pc, #328]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	e03a      	b.n	8003592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d020      	beq.n	8003566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003524:	4b4f      	ldr	r3, [pc, #316]	; (8003664 <HAL_RCC_OscConfig+0x2b0>)
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fe f9cf 	bl	80018cc <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003532:	f7fe f9cb 	bl	80018cc <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e1a5      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003544:	4b46      	ldr	r3, [pc, #280]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003550:	4b43      	ldr	r3, [pc, #268]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4940      	ldr	r1, [pc, #256]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]
 8003564:	e015      	b.n	8003592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003566:	4b3f      	ldr	r3, [pc, #252]	; (8003664 <HAL_RCC_OscConfig+0x2b0>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe f9ae 	bl	80018cc <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003574:	f7fe f9aa 	bl	80018cc <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e184      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003586:	4b36      	ldr	r3, [pc, #216]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d030      	beq.n	8003600 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a6:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_RCC_OscConfig+0x2b4>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fe f98e 	bl	80018cc <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b4:	f7fe f98a 	bl	80018cc <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e164      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c6:	4b26      	ldr	r3, [pc, #152]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x200>
 80035d2:	e015      	b.n	8003600 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d4:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCC_OscConfig+0x2b4>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035da:	f7fe f977 	bl	80018cc <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e2:	f7fe f973 	bl	80018cc <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e14d      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 80035f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f0      	bne.n	80035e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80a0 	beq.w	800374e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003612:	4b13      	ldr	r3, [pc, #76]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_OscConfig+0x2b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d121      	bne.n	800368e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364a:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_RCC_OscConfig+0x2b8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a07      	ldr	r2, [pc, #28]	; (800366c <HAL_RCC_OscConfig+0x2b8>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003656:	f7fe f939 	bl	80018cc <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	e011      	b.n	8003682 <HAL_RCC_OscConfig+0x2ce>
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	42470000 	.word	0x42470000
 8003668:	42470e80 	.word	0x42470e80
 800366c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003670:	f7fe f92c 	bl	80018cc <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e106      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003682:	4b85      	ldr	r3, [pc, #532]	; (8003898 <HAL_RCC_OscConfig+0x4e4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d106      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2f0>
 8003696:	4b81      	ldr	r3, [pc, #516]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	4a80      	ldr	r2, [pc, #512]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6713      	str	r3, [r2, #112]	; 0x70
 80036a2:	e01c      	b.n	80036de <HAL_RCC_OscConfig+0x32a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	d10c      	bne.n	80036c6 <HAL_RCC_OscConfig+0x312>
 80036ac:	4b7b      	ldr	r3, [pc, #492]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	4a7a      	ldr	r2, [pc, #488]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036b2:	f043 0304 	orr.w	r3, r3, #4
 80036b6:	6713      	str	r3, [r2, #112]	; 0x70
 80036b8:	4b78      	ldr	r3, [pc, #480]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	4a77      	ldr	r2, [pc, #476]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6713      	str	r3, [r2, #112]	; 0x70
 80036c4:	e00b      	b.n	80036de <HAL_RCC_OscConfig+0x32a>
 80036c6:	4b75      	ldr	r3, [pc, #468]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	4a74      	ldr	r2, [pc, #464]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	6713      	str	r3, [r2, #112]	; 0x70
 80036d2:	4b72      	ldr	r3, [pc, #456]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	4a71      	ldr	r2, [pc, #452]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80036d8:	f023 0304 	bic.w	r3, r3, #4
 80036dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d015      	beq.n	8003712 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fe f8f1 	bl	80018cc <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fe f8ed 	bl	80018cc <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e0c5      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003704:	4b65      	ldr	r3, [pc, #404]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0ee      	beq.n	80036ee <HAL_RCC_OscConfig+0x33a>
 8003710:	e014      	b.n	800373c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003712:	f7fe f8db 	bl	80018cc <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003718:	e00a      	b.n	8003730 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7fe f8d7 	bl	80018cc <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	; 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0af      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003730:	4b5a      	ldr	r3, [pc, #360]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1ee      	bne.n	800371a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d105      	bne.n	800374e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003742:	4b56      	ldr	r3, [pc, #344]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	4a55      	ldr	r2, [pc, #340]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 8003748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 809b 	beq.w	800388e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003758:	4b50      	ldr	r3, [pc, #320]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b08      	cmp	r3, #8
 8003762:	d05c      	beq.n	800381e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d141      	bne.n	80037f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376c:	4b4c      	ldr	r3, [pc, #304]	; (80038a0 <HAL_RCC_OscConfig+0x4ec>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7fe f8ab 	bl	80018cc <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377a:	f7fe f8a7 	bl	80018cc <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e081      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378c:	4b43      	ldr	r3, [pc, #268]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f0      	bne.n	800377a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	019b      	lsls	r3, r3, #6
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	3b01      	subs	r3, #1
 80037b2:	041b      	lsls	r3, r3, #16
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	061b      	lsls	r3, r3, #24
 80037bc:	4937      	ldr	r1, [pc, #220]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c2:	4b37      	ldr	r3, [pc, #220]	; (80038a0 <HAL_RCC_OscConfig+0x4ec>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe f880 	bl	80018cc <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe f87c 	bl	80018cc <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e056      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e2:	4b2e      	ldr	r3, [pc, #184]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x41c>
 80037ee:	e04e      	b.n	800388e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f0:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <HAL_RCC_OscConfig+0x4ec>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f6:	f7fe f869 	bl	80018cc <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fe:	f7fe f865 	bl	80018cc <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e03f      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003810:	4b22      	ldr	r3, [pc, #136]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1f0      	bne.n	80037fe <HAL_RCC_OscConfig+0x44a>
 800381c:	e037      	b.n	800388e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e032      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800382a:	4b1c      	ldr	r3, [pc, #112]	; (800389c <HAL_RCC_OscConfig+0x4e8>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d028      	beq.n	800388a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d121      	bne.n	800388a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d11a      	bne.n	800388a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800385a:	4013      	ands	r3, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003860:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003862:	4293      	cmp	r3, r2
 8003864:	d111      	bne.n	800388a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	3b01      	subs	r3, #1
 8003874:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d107      	bne.n	800388a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d001      	beq.n	800388e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40007000 	.word	0x40007000
 800389c:	40023800 	.word	0x40023800
 80038a0:	42470060 	.word	0x42470060

080038a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0cc      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b8:	4b68      	ldr	r3, [pc, #416]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d90c      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b65      	ldr	r3, [pc, #404]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0b8      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d020      	beq.n	800392e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f8:	4b59      	ldr	r3, [pc, #356]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003910:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a52      	ldr	r2, [pc, #328]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800391a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b50      	ldr	r3, [pc, #320]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	494d      	ldr	r1, [pc, #308]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d044      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d119      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e07f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d003      	beq.n	8003962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395e:	2b03      	cmp	r3, #3
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003962:	4b3f      	ldr	r3, [pc, #252]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e06f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e067      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003982:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f023 0203 	bic.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4934      	ldr	r1, [pc, #208]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	4313      	orrs	r3, r2
 8003992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003994:	f7fd ff9a 	bl	80018cc <HAL_GetTick>
 8003998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399c:	f7fd ff96 	bl	80018cc <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e04f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 020c 	and.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1eb      	bne.n	800399c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d20c      	bcs.n	80039ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e032      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4916      	ldr	r1, [pc, #88]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	490e      	ldr	r1, [pc, #56]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a2a:	f000 f821 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	490a      	ldr	r1, [pc, #40]	; (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	5ccb      	ldrb	r3, [r1, r3]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCC_ClockConfig+0x1c8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd fefa 	bl	8001844 <HAL_InitTick>

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023c00 	.word	0x40023c00
 8003a60:	40023800 	.word	0x40023800
 8003a64:	08004ad0 	.word	0x08004ad0
 8003a68:	20000050 	.word	0x20000050
 8003a6c:	20000054 	.word	0x20000054

08003a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	2300      	movs	r3, #0
 8003a82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a88:	4b67      	ldr	r3, [pc, #412]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d00d      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	f200 80bd 	bhi.w	8003c14 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8003aa2:	e0b7      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aa4:	4b61      	ldr	r3, [pc, #388]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003aa6:	60bb      	str	r3, [r7, #8]
       break;
 8003aa8:	e0b7      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aaa:	4b61      	ldr	r3, [pc, #388]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003aac:	60bb      	str	r3, [r7, #8]
      break;
 8003aae:	e0b4      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab0:	4b5d      	ldr	r3, [pc, #372]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aba:	4b5b      	ldr	r3, [pc, #364]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04d      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac6:	4b58      	ldr	r3, [pc, #352]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	099b      	lsrs	r3, r3, #6
 8003acc:	461a      	mov	r2, r3
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	ea02 0800 	and.w	r8, r2, r0
 8003ade:	ea03 0901 	and.w	r9, r3, r1
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	014b      	lsls	r3, r1, #5
 8003af0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003af4:	0142      	lsls	r2, r0, #5
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	ebb0 0008 	subs.w	r0, r0, r8
 8003afe:	eb61 0109 	sbc.w	r1, r1, r9
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	018b      	lsls	r3, r1, #6
 8003b0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b10:	0182      	lsls	r2, r0, #6
 8003b12:	1a12      	subs	r2, r2, r0
 8003b14:	eb63 0301 	sbc.w	r3, r3, r1
 8003b18:	f04f 0000 	mov.w	r0, #0
 8003b1c:	f04f 0100 	mov.w	r1, #0
 8003b20:	00d9      	lsls	r1, r3, #3
 8003b22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b26:	00d0      	lsls	r0, r2, #3
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	eb12 0208 	adds.w	r2, r2, r8
 8003b30:	eb43 0309 	adc.w	r3, r3, r9
 8003b34:	f04f 0000 	mov.w	r0, #0
 8003b38:	f04f 0100 	mov.w	r1, #0
 8003b3c:	0259      	lsls	r1, r3, #9
 8003b3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b42:	0250      	lsls	r0, r2, #9
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	f7fc fb4a 	bl	80001ec <__aeabi_uldivmod>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e04a      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b62:	4b31      	ldr	r3, [pc, #196]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	099b      	lsrs	r3, r3, #6
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b72:	f04f 0100 	mov.w	r1, #0
 8003b76:	ea02 0400 	and.w	r4, r2, r0
 8003b7a:	ea03 0501 	and.w	r5, r3, r1
 8003b7e:	4620      	mov	r0, r4
 8003b80:	4629      	mov	r1, r5
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	014b      	lsls	r3, r1, #5
 8003b8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b90:	0142      	lsls	r2, r0, #5
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	1b00      	subs	r0, r0, r4
 8003b98:	eb61 0105 	sbc.w	r1, r1, r5
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	018b      	lsls	r3, r1, #6
 8003ba6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003baa:	0182      	lsls	r2, r0, #6
 8003bac:	1a12      	subs	r2, r2, r0
 8003bae:	eb63 0301 	sbc.w	r3, r3, r1
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f04f 0100 	mov.w	r1, #0
 8003bba:	00d9      	lsls	r1, r3, #3
 8003bbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bc0:	00d0      	lsls	r0, r2, #3
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	1912      	adds	r2, r2, r4
 8003bc8:	eb45 0303 	adc.w	r3, r5, r3
 8003bcc:	f04f 0000 	mov.w	r0, #0
 8003bd0:	f04f 0100 	mov.w	r1, #0
 8003bd4:	0299      	lsls	r1, r3, #10
 8003bd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bda:	0290      	lsls	r0, r2, #10
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	f7fc fafe 	bl	80001ec <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	0c1b      	lsrs	r3, r3, #16
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	3301      	adds	r3, #1
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	60bb      	str	r3, [r7, #8]
      break;
 8003c12:	e002      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c16:	60bb      	str	r3, [r7, #8]
      break;
 8003c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	00f42400 	.word	0x00f42400
 8003c30:	007a1200 	.word	0x007a1200

08003c34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e07b      	b.n	8003d3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d108      	bne.n	8003c60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c56:	d009      	beq.n	8003c6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	61da      	str	r2, [r3, #28]
 8003c5e:	e005      	b.n	8003c6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fd fd02 	bl	8001690 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf0:	ea42 0103 	orr.w	r1, r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	f003 0104 	and.w	r1, r3, #4
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	f003 0210 	and.w	r2, r3, #16
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b08c      	sub	sp, #48	; 0x30
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d54:	2301      	movs	r3, #1
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_SPI_TransmitReceive+0x26>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e18a      	b.n	8004082 <HAL_SPI_TransmitReceive+0x33c>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d74:	f7fd fdaa 	bl	80018cc <HAL_GetTick>
 8003d78:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d00f      	beq.n	8003db6 <HAL_SPI_TransmitReceive+0x70>
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d9c:	d107      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x68>
 8003da6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d003      	beq.n	8003db6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003dae:	2302      	movs	r3, #2
 8003db0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003db4:	e15b      	b.n	800406e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <HAL_SPI_TransmitReceive+0x82>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_SPI_TransmitReceive+0x82>
 8003dc2:	887b      	ldrh	r3, [r7, #2]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dce:	e14e      	b.n	800406e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d003      	beq.n	8003de4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2205      	movs	r2, #5
 8003de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	887a      	ldrh	r2, [r7, #2]
 8003df4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	887a      	ldrh	r2, [r7, #2]
 8003dfa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	887a      	ldrh	r2, [r7, #2]
 8003e06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	887a      	ldrh	r2, [r7, #2]
 8003e0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e24:	2b40      	cmp	r3, #64	; 0x40
 8003e26:	d007      	beq.n	8003e38 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e40:	d178      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0x10a>
 8003e4a:	8b7b      	ldrh	r3, [r7, #26]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d166      	bne.n	8003f1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	881a      	ldrh	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	1c9a      	adds	r2, r3, #2
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e74:	e053      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d11b      	bne.n	8003ebc <HAL_SPI_TransmitReceive+0x176>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d016      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x176>
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d113      	bne.n	8003ebc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	881a      	ldrh	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	1c9a      	adds	r2, r3, #2
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d119      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x1b8>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d014      	beq.n	8003efe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	b292      	uxth	r2, r2
 8003ee0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003efa:	2301      	movs	r3, #1
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003efe:	f7fd fce5 	bl	80018cc <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d807      	bhi.n	8003f1e <HAL_SPI_TransmitReceive+0x1d8>
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f14:	d003      	beq.n	8003f1e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f1c:	e0a7      	b.n	800406e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1a6      	bne.n	8003e76 <HAL_SPI_TransmitReceive+0x130>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1a1      	bne.n	8003e76 <HAL_SPI_TransmitReceive+0x130>
 8003f32:	e07c      	b.n	800402e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_SPI_TransmitReceive+0x1fc>
 8003f3c:	8b7b      	ldrh	r3, [r7, #26]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d16b      	bne.n	800401a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	7812      	ldrb	r2, [r2, #0]
 8003f4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f68:	e057      	b.n	800401a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d11c      	bne.n	8003fb2 <HAL_SPI_TransmitReceive+0x26c>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d017      	beq.n	8003fb2 <HAL_SPI_TransmitReceive+0x26c>
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d114      	bne.n	8003fb2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	330c      	adds	r3, #12
 8003f92:	7812      	ldrb	r2, [r2, #0]
 8003f94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d119      	bne.n	8003ff4 <HAL_SPI_TransmitReceive+0x2ae>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d014      	beq.n	8003ff4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ff4:	f7fd fc6a 	bl	80018cc <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004000:	429a      	cmp	r2, r3
 8004002:	d803      	bhi.n	800400c <HAL_SPI_TransmitReceive+0x2c6>
 8004004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800400a:	d102      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x2cc>
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004018:	e029      	b.n	800406e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1a2      	bne.n	8003f6a <HAL_SPI_TransmitReceive+0x224>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d19d      	bne.n	8003f6a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800402e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004030:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f8b2 	bl	800419c <SPI_EndRxTxTransaction>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d006      	beq.n	800404c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800404a:	e010      	b.n	800406e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10b      	bne.n	800406c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	e000      	b.n	800406e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800406c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800407e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004082:	4618      	mov	r0, r3
 8004084:	3730      	adds	r7, #48	; 0x30
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800409c:	f7fd fc16 	bl	80018cc <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	4413      	add	r3, r2
 80040aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040ac:	f7fd fc0e 	bl	80018cc <HAL_GetTick>
 80040b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040b2:	4b39      	ldr	r3, [pc, #228]	; (8004198 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	015b      	lsls	r3, r3, #5
 80040b8:	0d1b      	lsrs	r3, r3, #20
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	fb02 f303 	mul.w	r3, r2, r3
 80040c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040c2:	e054      	b.n	800416e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ca:	d050      	beq.n	800416e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040cc:	f7fd fbfe 	bl	80018cc <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d902      	bls.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d13d      	bne.n	800415e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fa:	d111      	bne.n	8004120 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004104:	d004      	beq.n	8004110 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410e:	d107      	bne.n	8004120 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004128:	d10f      	bne.n	800414a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004148:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e017      	b.n	800418e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	3b01      	subs	r3, #1
 800416c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4013      	ands	r3, r2
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	bf0c      	ite	eq
 800417e:	2301      	moveq	r3, #1
 8004180:	2300      	movne	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	461a      	mov	r2, r3
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	429a      	cmp	r2, r3
 800418a:	d19b      	bne.n	80040c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000050 	.word	0x20000050

0800419c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041a8:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <SPI_EndRxTxTransaction+0x7c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1b      	ldr	r2, [pc, #108]	; (800421c <SPI_EndRxTxTransaction+0x80>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	0d5b      	lsrs	r3, r3, #21
 80041b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c6:	d112      	bne.n	80041ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff ff5a 	bl	800408c <SPI_WaitFlagStateUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d016      	beq.n	800420c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e00f      	b.n	800420e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004204:	2b80      	cmp	r3, #128	; 0x80
 8004206:	d0f2      	beq.n	80041ee <SPI_EndRxTxTransaction+0x52>
 8004208:	e000      	b.n	800420c <SPI_EndRxTxTransaction+0x70>
        break;
 800420a:	bf00      	nop
  }

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000050 	.word	0x20000050
 800421c:	165e9f81 	.word	0x165e9f81

08004220 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f043 0201 	orr.w	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f023 0201 	bic.w	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	019b      	lsls	r3, r3, #6
 8004276:	f043 0220 	orr.w	r2, r3, #32
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3301      	adds	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <USB_FlushTxFifo+0x44>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e006      	b.n	800429c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b20      	cmp	r3, #32
 8004298:	d0f1      	beq.n	800427e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	00030d40 	.word	0x00030d40

080042ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2210      	movs	r2, #16
 80042bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3301      	adds	r3, #1
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	4a08      	ldr	r2, [pc, #32]	; (80042e8 <USB_FlushRxFifo+0x3c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e006      	b.n	80042dc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b10      	cmp	r3, #16
 80042d8:	d0f1      	beq.n	80042be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	00030d40 	.word	0x00030d40

080042ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b08b      	sub	sp, #44	; 0x2c
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	4613      	mov	r3, r2
 80042f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	089b      	lsrs	r3, r3, #2
 8004306:	b29b      	uxth	r3, r3
 8004308:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004312:	2300      	movs	r3, #0
 8004314:	623b      	str	r3, [r7, #32]
 8004316:	e014      	b.n	8004342 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	601a      	str	r2, [r3, #0]
    pDest++;
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	3301      	adds	r3, #1
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	3301      	adds	r3, #1
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	3301      	adds	r3, #1
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	3301      	adds	r3, #1
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	3301      	adds	r3, #1
 8004340:	623b      	str	r3, [r7, #32]
 8004342:	6a3a      	ldr	r2, [r7, #32]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	429a      	cmp	r2, r3
 8004348:	d3e6      	bcc.n	8004318 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800434a:	8bfb      	ldrh	r3, [r7, #30]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01e      	beq.n	800438e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800435a:	461a      	mov	r2, r3
 800435c:	f107 0310 	add.w	r3, r7, #16
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
 8004370:	b2da      	uxtb	r2, r3
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	701a      	strb	r2, [r3, #0]
      i++;
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	3301      	adds	r3, #1
 800437a:	623b      	str	r3, [r7, #32]
      pDest++;
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	3301      	adds	r3, #1
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004382:	8bfb      	ldrh	r3, [r7, #30]
 8004384:	3b01      	subs	r3, #1
 8004386:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004388:	8bfb      	ldrh	r3, [r7, #30]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1ea      	bne.n	8004364 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004390:	4618      	mov	r0, r3
 8004392:	372c      	adds	r7, #44	; 0x2c
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80043b4:	68fb      	ldr	r3, [r7, #12]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0301 	and.w	r3, r3, #1
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80043de:	b480      	push	{r7}
 80043e0:	b085      	sub	sp, #20
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043fc:	f023 0303 	bic.w	r3, r3, #3
 8004400:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	68f9      	ldr	r1, [r7, #12]
 8004412:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d107      	bne.n	8004430 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004426:	461a      	mov	r2, r3
 8004428:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800442c:	6053      	str	r3, [r2, #4]
 800442e:	e009      	b.n	8004444 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d106      	bne.n	8004444 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800443c:	461a      	mov	r2, r3
 800443e:	f241 7370 	movw	r3, #6000	; 0x1770
 8004442:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	b29b      	uxth	r3, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004474:	b480      	push	{r7}
 8004476:	b089      	sub	sp, #36	; 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	4413      	add	r3, r2
 8004494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	0c9b      	lsrs	r3, r3, #18
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	0fdb      	lsrs	r3, r3, #31
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d104      	bne.n	80044ce <USB_HC_Halt+0x5a>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e0e8      	b.n	80046a0 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <USB_HC_Halt+0x66>
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d173      	bne.n	80045c2 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	0151      	lsls	r1, r2, #5
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	440a      	add	r2, r1
 80044f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044f8:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 80cb 	bne.w	800469e <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d143      	bne.n	800459c <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	4413      	add	r3, r2
 800451c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	0151      	lsls	r1, r2, #5
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	440a      	add	r2, r1
 800452a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800452e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004532:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	4413      	add	r3, r2
 800453c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	0151      	lsls	r1, r2, #5
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	440a      	add	r2, r1
 800454a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800454e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004552:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	4413      	add	r3, r2
 800455c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	0151      	lsls	r1, r2, #5
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	440a      	add	r2, r1
 800456a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800456e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004572:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	3301      	adds	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004580:	d81d      	bhi.n	80045be <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	4413      	add	r3, r2
 800458a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004598:	d0ec      	beq.n	8004574 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800459a:	e080      	b.n	800469e <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	0151      	lsls	r1, r2, #5
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	440a      	add	r2, r1
 80045b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045ba:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80045bc:	e06f      	b.n	800469e <USB_HC_Halt+0x22a>
            break;
 80045be:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80045c0:	e06d      	b.n	800469e <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	0151      	lsls	r1, r2, #5
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	440a      	add	r2, r1
 80045d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045e0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d143      	bne.n	800467a <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	0151      	lsls	r1, r2, #5
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	440a      	add	r2, r1
 8004608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800460c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004610:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4413      	add	r3, r2
 800461a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	0151      	lsls	r1, r2, #5
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	440a      	add	r2, r1
 8004628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800462c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004630:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	4413      	add	r3, r2
 800463a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	440a      	add	r2, r1
 8004648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800464c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004650:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	3301      	adds	r3, #1
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800465e:	d81d      	bhi.n	800469c <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	4413      	add	r3, r2
 8004668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004676:	d0ec      	beq.n	8004652 <USB_HC_Halt+0x1de>
 8004678:	e011      	b.n	800469e <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	4413      	add	r3, r2
 8004682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	440a      	add	r2, r1
 8004690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004694:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e000      	b.n	800469e <USB_HC_Halt+0x22a>
          break;
 800469c:	bf00      	nop
    }
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3724      	adds	r7, #36	; 0x24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff fdc0 	bl	8004242 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80046c2:	2110      	movs	r1, #16
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff fdcd 	bl	8004264 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff fdee 	bl	80042ac <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	e01f      	b.n	8004716 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470a:	461a      	mov	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	3301      	adds	r3, #1
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b0f      	cmp	r3, #15
 800471a:	d9dc      	bls.n	80046d6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800471c:	2300      	movs	r3, #0
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	e034      	b.n	800478c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004738:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004740:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004748:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004756:	461a      	mov	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3301      	adds	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004768:	d80c      	bhi.n	8004784 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800477c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004780:	d0ec      	beq.n	800475c <USB_StopHost+0xb0>
 8004782:	e000      	b.n	8004786 <USB_StopHost+0xda>
        break;
 8004784:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	3301      	adds	r3, #1
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2b0f      	cmp	r3, #15
 8004790:	d9c7      	bls.n	8004722 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004798:	461a      	mov	r2, r3
 800479a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800479e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff fd39 	bl	8004220 <USB_EnableGlobalInt>

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f804 	bl	80047dc <USBH_HandleSof>
}
 80047d4:	bf00      	nop
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b0b      	cmp	r3, #11
 80047ec:	d10a      	bne.n	8004804 <USBH_HandleSof+0x28>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
  }
}
 8004804:	bf00      	nop
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800481c:	bf00      	nop
}
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8004838:	bf00      	nop
}
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f883 	bl	800499e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	791b      	ldrb	r3, [r3, #4]
 800489c:	4619      	mov	r1, r3
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f80b 	bl	80048ba <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	795b      	ldrb	r3, [r3, #5]
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f805 	bl	80048ba <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	460b      	mov	r3, r1
 80048c4:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	2b0a      	cmp	r3, #10
 80048ca:	d80d      	bhi.n	80048e8 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	33e0      	adds	r3, #224	; 0xe0
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	33e0      	adds	r3, #224	; 0xe0
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	440b      	add	r3, r1
 80048e6:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff ff57 	bl	80047b8 <USBH_LL_IncTimer>
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff8f 	bl	8004844 <USBH_LL_Connect>
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff ff98 	bl	8004872 <USBH_LL_Disconnect>
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	460b      	mov	r3, r1
 8004954:	70fb      	strb	r3, [r7, #3]
 8004956:	4613      	mov	r3, r2
 8004958:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff ff49 	bl	800480c <USBH_LL_PortEnabled>
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff ff49 	bl	8004828 <USBH_LL_PortDisabled>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fd fb77 	bl	80020a8 <HAL_HCD_Stop>
 80049ba:	4603      	mov	r3, r0
 80049bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 f807 	bl	80049d4 <USBH_Get_USB_Status>
 80049c6:	4603      	mov	r3, r0
 80049c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80049ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d817      	bhi.n	8004a18 <USBH_Get_USB_Status+0x44>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <USBH_Get_USB_Status+0x1c>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a07 	.word	0x08004a07
 80049f8:	08004a0d 	.word	0x08004a0d
 80049fc:	08004a13 	.word	0x08004a13
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	73fb      	strb	r3, [r7, #15]
    break;
 8004a04:	e00b      	b.n	8004a1e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004a06:	2302      	movs	r3, #2
 8004a08:	73fb      	strb	r3, [r7, #15]
    break;
 8004a0a:	e008      	b.n	8004a1e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8004a10:	e005      	b.n	8004a1e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004a12:	2302      	movs	r3, #2
 8004a14:	73fb      	strb	r3, [r7, #15]
    break;
 8004a16:	e002      	b.n	8004a1e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004a18:	2302      	movs	r3, #2
 8004a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8004a1c:	bf00      	nop
  }
  return usb_status;
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <__libc_init_array>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	4d0d      	ldr	r5, [pc, #52]	; (8004a64 <__libc_init_array+0x38>)
 8004a30:	4c0d      	ldr	r4, [pc, #52]	; (8004a68 <__libc_init_array+0x3c>)
 8004a32:	1b64      	subs	r4, r4, r5
 8004a34:	10a4      	asrs	r4, r4, #2
 8004a36:	2600      	movs	r6, #0
 8004a38:	42a6      	cmp	r6, r4
 8004a3a:	d109      	bne.n	8004a50 <__libc_init_array+0x24>
 8004a3c:	4d0b      	ldr	r5, [pc, #44]	; (8004a6c <__libc_init_array+0x40>)
 8004a3e:	4c0c      	ldr	r4, [pc, #48]	; (8004a70 <__libc_init_array+0x44>)
 8004a40:	f000 f834 	bl	8004aac <_init>
 8004a44:	1b64      	subs	r4, r4, r5
 8004a46:	10a4      	asrs	r4, r4, #2
 8004a48:	2600      	movs	r6, #0
 8004a4a:	42a6      	cmp	r6, r4
 8004a4c:	d105      	bne.n	8004a5a <__libc_init_array+0x2e>
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}
 8004a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a54:	4798      	blx	r3
 8004a56:	3601      	adds	r6, #1
 8004a58:	e7ee      	b.n	8004a38 <__libc_init_array+0xc>
 8004a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5e:	4798      	blx	r3
 8004a60:	3601      	adds	r6, #1
 8004a62:	e7f2      	b.n	8004a4a <__libc_init_array+0x1e>
 8004a64:	08004ae8 	.word	0x08004ae8
 8004a68:	08004ae8 	.word	0x08004ae8
 8004a6c:	08004ae8 	.word	0x08004ae8
 8004a70:	08004aec 	.word	0x08004aec

08004a74 <memset>:
 8004a74:	4402      	add	r2, r0
 8004a76:	4603      	mov	r3, r0
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d100      	bne.n	8004a7e <memset+0xa>
 8004a7c:	4770      	bx	lr
 8004a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a82:	e7f9      	b.n	8004a78 <memset+0x4>

08004a84 <strncat>:
 8004a84:	b530      	push	{r4, r5, lr}
 8004a86:	4604      	mov	r4, r0
 8004a88:	7825      	ldrb	r5, [r4, #0]
 8004a8a:	4623      	mov	r3, r4
 8004a8c:	3401      	adds	r4, #1
 8004a8e:	2d00      	cmp	r5, #0
 8004a90:	d1fa      	bne.n	8004a88 <strncat+0x4>
 8004a92:	3a01      	subs	r2, #1
 8004a94:	d304      	bcc.n	8004aa0 <strncat+0x1c>
 8004a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a9a:	f803 4b01 	strb.w	r4, [r3], #1
 8004a9e:	b904      	cbnz	r4, 8004aa2 <strncat+0x1e>
 8004aa0:	bd30      	pop	{r4, r5, pc}
 8004aa2:	2a00      	cmp	r2, #0
 8004aa4:	d1f5      	bne.n	8004a92 <strncat+0xe>
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	e7f3      	b.n	8004a92 <strncat+0xe>
	...

08004aac <_init>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr

08004ab8 <_fini>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	bf00      	nop
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr
