
vgrs-security-sysyem-stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f38  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d0  080040d0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040d8  080040d8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040dc  080040dc  000140dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080040e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000042c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000043c  2000043c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000109b2  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027fb  00000000  00000000  000309f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  000331f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a80  00000000  00000000  00033d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022357  00000000  00000000  00034808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5d9  00000000  00000000  00056b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca074  00000000  00000000  00065138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012f1ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ee0  00000000  00000000  0012f200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080040a8 	.word	0x080040a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080040a8 	.word	0x080040a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <readKeypad>:
#include "stm32f4xx_hal.h"
#include "keypad.h"


char readKeypad (void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2180      	movs	r1, #128	; 0x80
 80004c8:	4872      	ldr	r0, [pc, #456]	; (8000694 <readKeypad+0x1d4>)
 80004ca:	f000 ffdb 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2140      	movs	r1, #64	; 0x40
 80004d2:	4870      	ldr	r0, [pc, #448]	; (8000694 <readKeypad+0x1d4>)
 80004d4:	f000 ffd6 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2120      	movs	r1, #32
 80004dc:	486d      	ldr	r0, [pc, #436]	; (8000694 <readKeypad+0x1d4>)
 80004de:	f000 ffd1 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2110      	movs	r1, #16
 80004e6:	486b      	ldr	r0, [pc, #428]	; (8000694 <readKeypad+0x1d4>)
 80004e8:	f000 ffcc 	bl	8001484 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 80004ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f0:	4868      	ldr	r0, [pc, #416]	; (8000694 <readKeypad+0x1d4>)
 80004f2:	f000 ffaf 	bl	8001454 <HAL_GPIO_ReadPin>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <readKeypad+0x40>
	{
		return '1';
 80004fc:	2331      	movs	r3, #49	; 0x31
 80004fe:	e0c6      	b.n	800068e <readKeypad+0x1ce>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 8000500:	2104      	movs	r1, #4
 8000502:	4864      	ldr	r0, [pc, #400]	; (8000694 <readKeypad+0x1d4>)
 8000504:	f000 ffa6 	bl	8001454 <HAL_GPIO_ReadPin>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <readKeypad+0x52>
	{
		return '2';
 800050e:	2332      	movs	r3, #50	; 0x32
 8000510:	e0bd      	b.n	800068e <readKeypad+0x1ce>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 8000512:	2102      	movs	r1, #2
 8000514:	485f      	ldr	r0, [pc, #380]	; (8000694 <readKeypad+0x1d4>)
 8000516:	f000 ff9d 	bl	8001454 <HAL_GPIO_ReadPin>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <readKeypad+0x64>
	{
		return '3';
 8000520:	2333      	movs	r3, #51	; 0x33
 8000522:	e0b4      	b.n	800068e <readKeypad+0x1ce>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 8000524:	2101      	movs	r1, #1
 8000526:	485b      	ldr	r0, [pc, #364]	; (8000694 <readKeypad+0x1d4>)
 8000528:	f000 ff94 	bl	8001454 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <readKeypad+0x76>
	{
		return 'A';
 8000532:	2341      	movs	r3, #65	; 0x41
 8000534:	e0ab      	b.n	800068e <readKeypad+0x1ce>
	}

	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	4856      	ldr	r0, [pc, #344]	; (8000694 <readKeypad+0x1d4>)
 800053c:	f000 ffa2 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2140      	movs	r1, #64	; 0x40
 8000544:	4853      	ldr	r0, [pc, #332]	; (8000694 <readKeypad+0x1d4>)
 8000546:	f000 ff9d 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	4851      	ldr	r0, [pc, #324]	; (8000694 <readKeypad+0x1d4>)
 8000550:	f000 ff98 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2110      	movs	r1, #16
 8000558:	484e      	ldr	r0, [pc, #312]	; (8000694 <readKeypad+0x1d4>)
 800055a:	f000 ff93 	bl	8001484 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 800055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000562:	484c      	ldr	r0, [pc, #304]	; (8000694 <readKeypad+0x1d4>)
 8000564:	f000 ff76 	bl	8001454 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <readKeypad+0xb2>
	{
		return '4';
 800056e:	2334      	movs	r3, #52	; 0x34
 8000570:	e08d      	b.n	800068e <readKeypad+0x1ce>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 8000572:	2104      	movs	r1, #4
 8000574:	4847      	ldr	r0, [pc, #284]	; (8000694 <readKeypad+0x1d4>)
 8000576:	f000 ff6d 	bl	8001454 <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <readKeypad+0xc4>
	{
		return '5';
 8000580:	2335      	movs	r3, #53	; 0x35
 8000582:	e084      	b.n	800068e <readKeypad+0x1ce>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 8000584:	2102      	movs	r1, #2
 8000586:	4843      	ldr	r0, [pc, #268]	; (8000694 <readKeypad+0x1d4>)
 8000588:	f000 ff64 	bl	8001454 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <readKeypad+0xd6>
	{
		return '6';
 8000592:	2336      	movs	r3, #54	; 0x36
 8000594:	e07b      	b.n	800068e <readKeypad+0x1ce>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 8000596:	2101      	movs	r1, #1
 8000598:	483e      	ldr	r0, [pc, #248]	; (8000694 <readKeypad+0x1d4>)
 800059a:	f000 ff5b 	bl	8001454 <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <readKeypad+0xe8>
	{
		return 'B';
 80005a4:	2342      	movs	r3, #66	; 0x42
 80005a6:	e072      	b.n	800068e <readKeypad+0x1ce>
	}

	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	4839      	ldr	r0, [pc, #228]	; (8000694 <readKeypad+0x1d4>)
 80005ae:	f000 ff69 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2140      	movs	r1, #64	; 0x40
 80005b6:	4837      	ldr	r0, [pc, #220]	; (8000694 <readKeypad+0x1d4>)
 80005b8:	f000 ff64 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2120      	movs	r1, #32
 80005c0:	4834      	ldr	r0, [pc, #208]	; (8000694 <readKeypad+0x1d4>)
 80005c2:	f000 ff5f 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2110      	movs	r1, #16
 80005ca:	4832      	ldr	r0, [pc, #200]	; (8000694 <readKeypad+0x1d4>)
 80005cc:	f000 ff5a 	bl	8001484 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 80005d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d4:	482f      	ldr	r0, [pc, #188]	; (8000694 <readKeypad+0x1d4>)
 80005d6:	f000 ff3d 	bl	8001454 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <readKeypad+0x124>
	{
		return '7';
 80005e0:	2337      	movs	r3, #55	; 0x37
 80005e2:	e054      	b.n	800068e <readKeypad+0x1ce>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 80005e4:	2104      	movs	r1, #4
 80005e6:	482b      	ldr	r0, [pc, #172]	; (8000694 <readKeypad+0x1d4>)
 80005e8:	f000 ff34 	bl	8001454 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <readKeypad+0x136>
	{
		return '8';
 80005f2:	2338      	movs	r3, #56	; 0x38
 80005f4:	e04b      	b.n	800068e <readKeypad+0x1ce>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 80005f6:	2102      	movs	r1, #2
 80005f8:	4826      	ldr	r0, [pc, #152]	; (8000694 <readKeypad+0x1d4>)
 80005fa:	f000 ff2b 	bl	8001454 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <readKeypad+0x148>
	{
		return '9';
 8000604:	2339      	movs	r3, #57	; 0x39
 8000606:	e042      	b.n	800068e <readKeypad+0x1ce>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 8000608:	2101      	movs	r1, #1
 800060a:	4822      	ldr	r0, [pc, #136]	; (8000694 <readKeypad+0x1d4>)
 800060c:	f000 ff22 	bl	8001454 <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <readKeypad+0x15a>
	{
		return 'C';
 8000616:	2343      	movs	r3, #67	; 0x43
 8000618:	e039      	b.n	800068e <readKeypad+0x1ce>
	}

	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	481d      	ldr	r0, [pc, #116]	; (8000694 <readKeypad+0x1d4>)
 8000620:	f000 ff30 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2140      	movs	r1, #64	; 0x40
 8000628:	481a      	ldr	r0, [pc, #104]	; (8000694 <readKeypad+0x1d4>)
 800062a:	f000 ff2b 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	4818      	ldr	r0, [pc, #96]	; (8000694 <readKeypad+0x1d4>)
 8000634:	f000 ff26 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2110      	movs	r1, #16
 800063c:	4815      	ldr	r0, [pc, #84]	; (8000694 <readKeypad+0x1d4>)
 800063e:	f000 ff21 	bl	8001484 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 8000642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000646:	4813      	ldr	r0, [pc, #76]	; (8000694 <readKeypad+0x1d4>)
 8000648:	f000 ff04 	bl	8001454 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <readKeypad+0x196>
	{
		return '*';
 8000652:	232a      	movs	r3, #42	; 0x2a
 8000654:	e01b      	b.n	800068e <readKeypad+0x1ce>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 8000656:	2104      	movs	r1, #4
 8000658:	480e      	ldr	r0, [pc, #56]	; (8000694 <readKeypad+0x1d4>)
 800065a:	f000 fefb 	bl	8001454 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <readKeypad+0x1a8>
	{
		return '0';
 8000664:	2330      	movs	r3, #48	; 0x30
 8000666:	e012      	b.n	800068e <readKeypad+0x1ce>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 8000668:	2102      	movs	r1, #2
 800066a:	480a      	ldr	r0, [pc, #40]	; (8000694 <readKeypad+0x1d4>)
 800066c:	f000 fef2 	bl	8001454 <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <readKeypad+0x1ba>
	{
		return '#';
 8000676:	2323      	movs	r3, #35	; 0x23
 8000678:	e009      	b.n	800068e <readKeypad+0x1ce>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 800067a:	2101      	movs	r1, #1
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <readKeypad+0x1d4>)
 800067e:	f000 fee9 	bl	8001454 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <readKeypad+0x1cc>
	{
		return 'D';
 8000688:	2344      	movs	r3, #68	; 0x44
 800068a:	e000      	b.n	800068e <readKeypad+0x1ce>
	}

	return '-';
 800068c:	232d      	movs	r3, #45	; 0x2d
}
 800068e:	4618      	mov	r0, r3
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020400 	.word	0x40020400

08000698 <setLedbar>:

#include "stm32f4xx_hal.h"
#include "ledbar.h"

void setLedbar(uint8_t conf[])
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin (LEDBAR_PORT, L1_PIN, conf[0] != 0);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf14      	ite	ne
 80006a8:	2301      	movne	r3, #1
 80006aa:	2300      	moveq	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	2101      	movs	r1, #1
 80006b2:	483f      	ldr	r0, [pc, #252]	; (80007b0 <setLedbar+0x118>)
 80006b4:	f000 fee6 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L2_PIN, conf[1] != 0);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3301      	adds	r3, #1
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	bf14      	ite	ne
 80006c2:	2301      	movne	r3, #1
 80006c4:	2300      	moveq	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	2102      	movs	r1, #2
 80006cc:	4838      	ldr	r0, [pc, #224]	; (80007b0 <setLedbar+0x118>)
 80006ce:	f000 fed9 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L3_PIN, conf[2] != 0);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3302      	adds	r3, #2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	bf14      	ite	ne
 80006dc:	2301      	movne	r3, #1
 80006de:	2300      	moveq	r3, #0
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	2104      	movs	r1, #4
 80006e6:	4832      	ldr	r0, [pc, #200]	; (80007b0 <setLedbar+0x118>)
 80006e8:	f000 fecc 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L4_PIN, conf[3] != 0);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3303      	adds	r3, #3
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	bf14      	ite	ne
 80006f6:	2301      	movne	r3, #1
 80006f8:	2300      	moveq	r3, #0
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	2108      	movs	r1, #8
 8000700:	482b      	ldr	r0, [pc, #172]	; (80007b0 <setLedbar+0x118>)
 8000702:	f000 febf 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L5_PIN, conf[4] != 0);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3304      	adds	r3, #4
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf14      	ite	ne
 8000710:	2301      	movne	r3, #1
 8000712:	2300      	moveq	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	2110      	movs	r1, #16
 800071a:	4825      	ldr	r0, [pc, #148]	; (80007b0 <setLedbar+0x118>)
 800071c:	f000 feb2 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L6_PIN, conf[5] != 0);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3305      	adds	r3, #5
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	bf14      	ite	ne
 800072a:	2301      	movne	r3, #1
 800072c:	2300      	moveq	r3, #0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	461a      	mov	r2, r3
 8000732:	2120      	movs	r1, #32
 8000734:	481e      	ldr	r0, [pc, #120]	; (80007b0 <setLedbar+0x118>)
 8000736:	f000 fea5 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L7_PIN, conf[6] != 0);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3306      	adds	r3, #6
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	bf14      	ite	ne
 8000744:	2301      	movne	r3, #1
 8000746:	2300      	moveq	r3, #0
 8000748:	b2db      	uxtb	r3, r3
 800074a:	461a      	mov	r2, r3
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	4818      	ldr	r0, [pc, #96]	; (80007b0 <setLedbar+0x118>)
 8000750:	f000 fe98 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L8_PIN, conf[7] != 0);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3307      	adds	r3, #7
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	bf14      	ite	ne
 800075e:	2301      	movne	r3, #1
 8000760:	2300      	moveq	r3, #0
 8000762:	b2db      	uxtb	r3, r3
 8000764:	461a      	mov	r2, r3
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	4811      	ldr	r0, [pc, #68]	; (80007b0 <setLedbar+0x118>)
 800076a:	f000 fe8b 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L9_PIN, conf[8] != 0);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3308      	adds	r3, #8
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	bf14      	ite	ne
 8000778:	2301      	movne	r3, #1
 800077a:	2300      	moveq	r3, #0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	461a      	mov	r2, r3
 8000780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <setLedbar+0x118>)
 8000786:	f000 fe7d 	bl	8001484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L10_PIN, conf[9] != 0);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3309      	adds	r3, #9
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	461a      	mov	r2, r3
 800079c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <setLedbar+0x118>)
 80007a2:	f000 fe6f 	bl	8001484 <HAL_GPIO_WritePin>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40020800 	.word	0x40020800

080007b4 <setLedbarTo>:

void setLedbarTo(int8_t to) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	uint8_t conf[10];
	for (int i = 0; i < to; i++)
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	e008      	b.n	80007d6 <setLedbarTo+0x22>
	{
		conf[i] = 1;
 80007c4:	f107 0208 	add.w	r2, r7, #8
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	4413      	add	r3, r2
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < to; i++)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	429a      	cmp	r2, r3
 80007de:	dbf1      	blt.n	80007c4 <setLedbarTo+0x10>
	}
	setLedbar(conf);
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff57 	bl	8000698 <setLedbar>
}
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 fb14 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f816 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f000 f8b4 	bl	800096c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000804:	f000 f87c 	bl	8000900 <MX_SPI1_Init>
  MFRC522_Init();
 8000808:	f000 f9ea 	bl	8000be0 <MFRC522_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 800080c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000810:	f000 fb7a 	bl	8000f08 <HAL_Delay>
  /* USER CODE END 2 */

  setLedbarTo(10);
 8000814:	200a      	movs	r0, #10
 8000816:	f7ff ffcd 	bl	80007b4 <setLedbarTo>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	c = readKeypad();
 800081a:	f7ff fe51 	bl	80004c0 <readKeypad>
 800081e:	4603      	mov	r3, r0
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b01      	ldr	r3, [pc, #4]	; (8000828 <main+0x34>)
 8000824:	701a      	strb	r2, [r3, #0]
  {
 8000826:	e7f8      	b.n	800081a <main+0x26>
 8000828:	20000000 	.word	0x20000000

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	; 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	2230      	movs	r2, #48	; 0x30
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f003 fc2c 	bl	8004098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <SystemClock_Config+0xcc>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a27      	ldr	r2, [pc, #156]	; (80008f8 <SystemClock_Config+0xcc>)
 800085a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <SystemClock_Config+0xcc>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <SystemClock_Config+0xd0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <SystemClock_Config+0xd0>)
 8000876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <SystemClock_Config+0xd0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000888:	2301      	movs	r3, #1
 800088a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800089c:	2308      	movs	r3, #8
 800089e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008aa:	2307      	movs	r3, #7
 80008ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 f890 	bl	80029d8 <HAL_RCC_OscConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008be:	f000 f8e5 	bl	8000a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	230f      	movs	r3, #15
 80008c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c6:	2302      	movs	r3, #2
 80008c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	2105      	movs	r1, #5
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 faf1 	bl	8002ec8 <HAL_RCC_ClockConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008ec:	f000 f8ce 	bl	8000a8c <Error_Handler>
  }
}
 80008f0:	bf00      	nop
 80008f2:	3750      	adds	r7, #80	; 0x50
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40007000 	.word	0x40007000

08000900 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_SPI1_Init+0x64>)
 8000906:	4a18      	ldr	r2, [pc, #96]	; (8000968 <MX_SPI1_Init+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI1_Init+0x64>)
 800090c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000910:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_SPI1_Init+0x64>)
 800092c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000930:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI1_Init+0x64>)
 8000934:	2218      	movs	r2, #24
 8000936:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI1_Init+0x64>)
 800094c:	220a      	movs	r2, #10
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_SPI1_Init+0x64>)
 8000952:	f002 fc81 	bl	8003258 <HAL_SPI_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800095c:	f000 f896 	bl	8000a8c <Error_Handler>
  }

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000094 	.word	0x20000094
 8000968:	40013000 	.word	0x40013000

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b098      	sub	sp, #96	; 0x60
 8000970:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <MX_GPIO_Init+0x10c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a3f      	ldr	r2, [pc, #252]	; (8000a78 <MX_GPIO_Init+0x10c>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b3d      	ldr	r3, [pc, #244]	; (8000a78 <MX_GPIO_Init+0x10c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	4b39      	ldr	r3, [pc, #228]	; (8000a78 <MX_GPIO_Init+0x10c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a38      	ldr	r2, [pc, #224]	; (8000a78 <MX_GPIO_Init+0x10c>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b36      	ldr	r3, [pc, #216]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b32      	ldr	r3, [pc, #200]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a31      	ldr	r2, [pc, #196]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a2a      	ldr	r2, [pc, #168]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 - CS PIN for RC522(SPI1)*/
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009e2:	2310      	movs	r3, #16
 80009e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	653b      	str	r3, [r7, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	657b      	str	r3, [r7, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	65bb      	str	r3, [r7, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009f6:	4619      	mov	r1, r3
 80009f8:	4820      	ldr	r0, [pc, #128]	; (8000a7c <MX_GPIO_Init+0x110>)
 80009fa:	f000 fb8f 	bl	800111c <HAL_GPIO_Init>


  /*Configure GPIO pins : PD12 PD13 PD14 PD15 - BOARD LEDs*/
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80009fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	653b      	str	r3, [r7, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	657b      	str	r3, [r7, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	65bb      	str	r3, [r7, #88]	; 0x58
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a14:	4619      	mov	r1, r3
 8000a16:	481a      	ldr	r0, [pc, #104]	; (8000a80 <MX_GPIO_Init+0x114>)
 8000a18:	f000 fb80 	bl	800111c <HAL_GPIO_Init>


  /*Configure GPIO pins for keypad  */
  GPIO_InitTypeDef keypadRows;
  keypadRows.Pin =  R1_PIN | R2_PIN | R3_PIN | R4_PIN;
 8000a1c:	23f0      	movs	r3, #240	; 0xf0
 8000a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  keypadRows.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  keypadRows.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	643b      	str	r3, [r7, #64]	; 0x40
  keypadRows.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	647b      	str	r3, [r7, #68]	; 0x44

  HAL_GPIO_Init(R1_PORT, &keypadRows);
 8000a2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a30:	4619      	mov	r1, r3
 8000a32:	4814      	ldr	r0, [pc, #80]	; (8000a84 <MX_GPIO_Init+0x118>)
 8000a34:	f000 fb72 	bl	800111c <HAL_GPIO_Init>

  GPIO_InitTypeDef keypadColumns;
  keypadColumns.Pin =  C1_PIN | C2_PIN | C3_PIN | C4_PIN;
 8000a38:	f240 1307 	movw	r3, #263	; 0x107
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  keypadColumns.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  keypadColumns.Pull = GPIO_PULLDOWN;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c

  HAL_GPIO_Init(C1_PORT,&keypadColumns);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_GPIO_Init+0x118>)
 8000a4e:	f000 fb65 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins for ledbar  */
  GPIO_InitTypeDef ledbar;
  ledbar.Pin =  L1_PIN | L2_PIN | L3_PIN | L4_PIN | L5_PIN | L6_PIN | L7_PIN | L8_PIN | L9_PIN | L10_PIN;
 8000a52:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000a56:	613b      	str	r3, [r7, #16]
  ledbar.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
  ledbar.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  ledbar.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LEDBAR_PORT, &ledbar);
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <MX_GPIO_Init+0x11c>)
 8000a6c:	f000 fb56 	bl	800111c <HAL_GPIO_Init>

}
 8000a70:	bf00      	nop
 8000a72:	3760      	adds	r7, #96	; 0x60
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40020800 	.word	0x40020800

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8000aa6:	f107 0208 	add.w	r2, r7, #8
 8000aaa:	f107 010c 	add.w	r1, r7, #12
 8000aae:	230a      	movs	r3, #10
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <SPI1SendByte+0x2c>)
 8000ab6:	f002 fc58 	bl	800336a <HAL_SPI_TransmitReceive>
	return readValue[0];
 8000aba:	7a3b      	ldrb	r3, [r7, #8]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000094 	.word	0x20000094

08000ac8 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2110      	movs	r1, #16
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <SPI1_WriteReg+0x3c>)
 8000ade:	f000 fcd1 	bl	8001484 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ffd7 	bl	8000a98 <SPI1SendByte>
	SPI1SendByte(value);
 8000aea:	79bb      	ldrb	r3, [r7, #6]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ffd3 	bl	8000a98 <SPI1SendByte>
	cs_set();
 8000af2:	2201      	movs	r2, #1
 8000af4:	2110      	movs	r1, #16
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <SPI1_WriteReg+0x3c>)
 8000af8:	f000 fcc4 	bl	8001484 <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40020000 	.word	0x40020000

08000b08 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8000b12:	2200      	movs	r2, #0
 8000b14:	2110      	movs	r1, #16
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <SPI1_ReadReg+0x3c>)
 8000b18:	f000 fcb4 	bl	8001484 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ffba 	bl	8000a98 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff ffb7 	bl	8000a98 <SPI1SendByte>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2110      	movs	r1, #16
 8000b32:	4804      	ldr	r0, [pc, #16]	; (8000b44 <SPI1_ReadReg+0x3c>)
 8000b34:	f000 fca6 	bl	8001484 <HAL_GPIO_WritePin>
	return val;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40020000 	.word	0x40020000

08000b48 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	4613      	mov	r3, r2
 8000b56:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000b62:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8000b64:	79ba      	ldrb	r2, [r7, #6]
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ffac 	bl	8000ac8 <SPI1_WriteReg>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ffb5 	bl	8000b08 <SPI1_ReadReg>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	73fb      	strb	r3, [r7, #15]
	return val;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	71fb      	strb	r3, [r7, #7]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ffda 	bl	8000b78 <MFRC522_ReadRegister>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ffb8 	bl	8000b48 <MFRC522_WriteRegister>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8000be4:	f000 f820 	bl	8000c28 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8000be8:	218d      	movs	r1, #141	; 0x8d
 8000bea:	202a      	movs	r0, #42	; 0x2a
 8000bec:	f7ff ffac 	bl	8000b48 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000bf0:	213e      	movs	r1, #62	; 0x3e
 8000bf2:	202b      	movs	r0, #43	; 0x2b
 8000bf4:	f7ff ffa8 	bl	8000b48 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8000bf8:	211e      	movs	r1, #30
 8000bfa:	202d      	movs	r0, #45	; 0x2d
 8000bfc:	f7ff ffa4 	bl	8000b48 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000c00:	2100      	movs	r1, #0
 8000c02:	202c      	movs	r0, #44	; 0x2c
 8000c04:	f7ff ffa0 	bl	8000b48 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain
 8000c08:	2170      	movs	r1, #112	; 0x70
 8000c0a:	2026      	movs	r0, #38	; 0x26
 8000c0c:	f7ff ff9c 	bl	8000b48 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000c10:	2140      	movs	r1, #64	; 0x40
 8000c12:	2015      	movs	r0, #21
 8000c14:	f7ff ff98 	bl	8000b48 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8000c18:	213d      	movs	r1, #61	; 0x3d
 8000c1a:	2011      	movs	r0, #17
 8000c1c:	f7ff ff94 	bl	8000b48 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();											// Open the antenna
 8000c20:	f000 f80a 	bl	8000c38 <MFRC522_AntennaOn>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000c2c:	210f      	movs	r1, #15
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f7ff ff8a 	bl	8000b48 <MFRC522_WriteRegister>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000c3e:	2014      	movs	r0, #20
 8000c40:	f7ff ff9a 	bl	8000b78 <MFRC522_ReadRegister>
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d103      	bne.n	8000c5a <MFRC522_AntennaOn+0x22>
 8000c52:	2103      	movs	r1, #3
 8000c54:	2014      	movs	r0, #20
 8000c56:	f7ff ffa9 	bl	8000bac <MFRC522_SetBitMask>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f000 fa06 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_SPI_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12b      	bne.n	8000d2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d0e:	23e0      	movs	r3, #224	; 0xe0
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_SPI_MspInit+0x8c>)
 8000d2a:	f000 f9f7 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40013000 	.word	0x40013000
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d90:	f000 f89a 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <OTG_FS_IRQHandler+0x10>)
 8000d9e:	f000 fb8a 	bl	80014b6 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000138 	.word	0x20000138

08000dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd6:	490e      	ldr	r1, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dec:	4c0b      	ldr	r4, [pc, #44]	; (8000e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dfa:	f7ff ffd7 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f003 f927 	bl	8004050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fcf7 	bl	80007f4 <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e14:	080040e0 	.word	0x080040e0
  ldr r2, =_sbss
 8000e18:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e1c:	2000043c 	.word	0x2000043c

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <HAL_Init+0x40>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_Init+0x40>)
 8000e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_Init+0x40>)
 8000e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f931 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 f808 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff ff04 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023c00 	.word	0x40023c00

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x54>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x58>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f93b 	bl	8001102 <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00e      	b.n	8000eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d80a      	bhi.n	8000eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea4:	f000 f911 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_InitTick+0x5c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000004 	.word	0x20000004
 8000ec0:	2000000c 	.word	0x2000000c
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	2000000c 	.word	0x2000000c
 8000eec:	20000134 	.word	0x20000134

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000134 	.word	0x20000134

08000f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f20:	d005      	beq.n	8000f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_Delay+0x44>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2e:	bf00      	nop
 8000f30:	f7ff ffde 	bl	8000ef0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f7      	bhi.n	8000f30 <HAL_Delay+0x28>
  {
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000000c 	.word	0x2000000c

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff47 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff5c 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffb0 	bl	8001070 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	e16b      	b.n	8001410 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 815a 	bne.w	800140a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d005      	beq.n	800116e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	2b02      	cmp	r3, #2
 800116c:	d130      	bne.n	80011d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a4:	2201      	movs	r2, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	f003 0201 	and.w	r2, r3, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d017      	beq.n	800120c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d123      	bne.n	8001260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	69b9      	ldr	r1, [r7, #24]
 800125c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0203 	and.w	r2, r3, #3
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80b4 	beq.w	800140a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b60      	ldr	r3, [pc, #384]	; (8001428 <HAL_GPIO_Init+0x30c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a5f      	ldr	r2, [pc, #380]	; (8001428 <HAL_GPIO_Init+0x30c>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b5d      	ldr	r3, [pc, #372]	; (8001428 <HAL_GPIO_Init+0x30c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012be:	4a5b      	ldr	r2, [pc, #364]	; (800142c <HAL_GPIO_Init+0x310>)
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a52      	ldr	r2, [pc, #328]	; (8001430 <HAL_GPIO_Init+0x314>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d02b      	beq.n	8001342 <HAL_GPIO_Init+0x226>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a51      	ldr	r2, [pc, #324]	; (8001434 <HAL_GPIO_Init+0x318>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d025      	beq.n	800133e <HAL_GPIO_Init+0x222>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a50      	ldr	r2, [pc, #320]	; (8001438 <HAL_GPIO_Init+0x31c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d01f      	beq.n	800133a <HAL_GPIO_Init+0x21e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4f      	ldr	r2, [pc, #316]	; (800143c <HAL_GPIO_Init+0x320>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d019      	beq.n	8001336 <HAL_GPIO_Init+0x21a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4e      	ldr	r2, [pc, #312]	; (8001440 <HAL_GPIO_Init+0x324>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0x216>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4d      	ldr	r2, [pc, #308]	; (8001444 <HAL_GPIO_Init+0x328>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00d      	beq.n	800132e <HAL_GPIO_Init+0x212>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <HAL_GPIO_Init+0x32c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d007      	beq.n	800132a <HAL_GPIO_Init+0x20e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4b      	ldr	r2, [pc, #300]	; (800144c <HAL_GPIO_Init+0x330>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_Init+0x20a>
 8001322:	2307      	movs	r3, #7
 8001324:	e00e      	b.n	8001344 <HAL_GPIO_Init+0x228>
 8001326:	2308      	movs	r3, #8
 8001328:	e00c      	b.n	8001344 <HAL_GPIO_Init+0x228>
 800132a:	2306      	movs	r3, #6
 800132c:	e00a      	b.n	8001344 <HAL_GPIO_Init+0x228>
 800132e:	2305      	movs	r3, #5
 8001330:	e008      	b.n	8001344 <HAL_GPIO_Init+0x228>
 8001332:	2304      	movs	r3, #4
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x228>
 8001336:	2303      	movs	r3, #3
 8001338:	e004      	b.n	8001344 <HAL_GPIO_Init+0x228>
 800133a:	2302      	movs	r3, #2
 800133c:	e002      	b.n	8001344 <HAL_GPIO_Init+0x228>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_GPIO_Init+0x228>
 8001342:	2300      	movs	r3, #0
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	f002 0203 	and.w	r2, r2, #3
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	4093      	lsls	r3, r2
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001354:	4935      	ldr	r1, [pc, #212]	; (800142c <HAL_GPIO_Init+0x310>)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001362:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <HAL_GPIO_Init+0x334>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001386:	4a32      	ldr	r2, [pc, #200]	; (8001450 <HAL_GPIO_Init+0x334>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800138c:	4b30      	ldr	r3, [pc, #192]	; (8001450 <HAL_GPIO_Init+0x334>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b0:	4a27      	ldr	r2, [pc, #156]	; (8001450 <HAL_GPIO_Init+0x334>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <HAL_GPIO_Init+0x334>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013da:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <HAL_GPIO_Init+0x334>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_GPIO_Init+0x334>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <HAL_GPIO_Init+0x334>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3301      	adds	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	f67f ae90 	bls.w	8001138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40013800 	.word	0x40013800
 8001430:	40020000 	.word	0x40020000
 8001434:	40020400 	.word	0x40020400
 8001438:	40020800 	.word	0x40020800
 800143c:	40020c00 	.word	0x40020c00
 8001440:	40021000 	.word	0x40021000
 8001444:	40021400 	.word	0x40021400
 8001448:	40021800 	.word	0x40021800
 800144c:	40021c00 	.word	0x40021c00
 8001450:	40013c00 	.word	0x40013c00

08001454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800146c:	2301      	movs	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e001      	b.n	8001476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a0:	e003      	b.n	80014aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	041a      	lsls	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f002 fa8a 	bl	80039e6 <USB_GetMode>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	f040 80f6 	bne.w	80016c6 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fa6e 	bl	80039c0 <USB_ReadInterrupts>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80ec 	beq.w	80016c4 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fa65 	bl	80039c0 <USB_ReadInterrupts>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001500:	d104      	bne.n	800150c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800150a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f002 fa55 	bl	80039c0 <USB_ReadInterrupts>
 8001516:	4603      	mov	r3, r0
 8001518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001520:	d104      	bne.n	800152c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800152a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fa45 	bl	80039c0 <USB_ReadInterrupts>
 8001536:	4603      	mov	r3, r0
 8001538:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800153c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001540:	d104      	bne.n	800154c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800154a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 fa35 	bl	80039c0 <USB_ReadInterrupts>
 8001556:	4603      	mov	r3, r0
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b02      	cmp	r3, #2
 800155e:	d103      	bne.n	8001568 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2202      	movs	r2, #2
 8001566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fa27 	bl	80039c0 <USB_ReadInterrupts>
 8001572:	4603      	mov	r3, r0
 8001574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800157c:	d11c      	bne.n	80015b8 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001586:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10f      	bne.n	80015b8 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001598:	2110      	movs	r1, #16
 800159a:	6938      	ldr	r0, [r7, #16]
 800159c:	f002 f974 	bl	8003888 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80015a0:	6938      	ldr	r0, [r7, #16]
 80015a2:	f002 f995 	bl	80038d0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2101      	movs	r1, #1
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fa28 	bl	8003a02 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f002 fccd 	bl	8003f52 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 f9ff 	bl	80039c0 <USB_ReadInterrupts>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015cc:	d102      	bne.n	80015d4 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f001 f98e 	bl	80028f0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 f9f1 	bl	80039c0 <USB_ReadInterrupts>
 80015de:	4603      	mov	r3, r0
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d106      	bne.n	80015f6 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f002 fc96 	bl	8003f1a <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2208      	movs	r2, #8
 80015f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 f9e0 	bl	80039c0 <USB_ReadInterrupts>
 8001600:	4603      	mov	r3, r0
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	2b10      	cmp	r3, #16
 8001608:	d101      	bne.n	800160e <HAL_HCD_IRQHandler+0x158>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_HCD_IRQHandler+0x15a>
 800160e:	2300      	movs	r3, #0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d012      	beq.n	800163a <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699a      	ldr	r2, [r3, #24]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0210 	bic.w	r2, r2, #16
 8001622:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f001 f891 	bl	800274c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699a      	ldr	r2, [r3, #24]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0210 	orr.w	r2, r2, #16
 8001638:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f002 f9be 	bl	80039c0 <USB_ReadInterrupts>
 8001644:	4603      	mov	r3, r0
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800164e:	d13a      	bne.n	80016c6 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f002 fa0e 	bl	8003a76 <USB_HC_ReadInterrupt>
 800165a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e025      	b.n	80016ae <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 030f 	and.w	r3, r3, #15
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	fa22 f303 	lsr.w	r3, r2, r3
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d018      	beq.n	80016a8 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	015a      	lsls	r2, r3, #5
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4413      	add	r3, r2
 800167e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800168c:	d106      	bne.n	800169c <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4619      	mov	r1, r3
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f836 	bl	8001706 <HCD_HC_IN_IRQHandler>
 800169a:	e005      	b.n	80016a8 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 fc51 	bl	8001f4a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d3d4      	bcc.n	8001662 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	e000      	b.n	80016c6 <HAL_HCD_IRQHandler+0x210>
      return;
 80016c4:	bf00      	nop
    }
  }
}
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_HCD_Stop+0x16>
 80016de:	2302      	movs	r3, #2
 80016e0:	e00d      	b.n	80016fe <HAL_HCD_Stop+0x32>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 faee 	bl	8003cd0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	015a      	lsls	r2, r3, #5
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4413      	add	r3, r2
 8001728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b04      	cmp	r3, #4
 8001734:	d119      	bne.n	800176a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	015a      	lsls	r2, r3, #5
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4413      	add	r3, r2
 800173e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001742:	461a      	mov	r2, r3
 8001744:	2304      	movs	r3, #4
 8001746:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	015a      	lsls	r2, r3, #5
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	0151      	lsls	r1, r2, #5
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	440a      	add	r2, r1
 800175e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	60d3      	str	r3, [r2, #12]
 8001768:	e101      	b.n	800196e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4413      	add	r3, r2
 8001772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001780:	d12b      	bne.n	80017da <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	015a      	lsls	r2, r3, #5
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4413      	add	r3, r2
 800178a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800178e:	461a      	mov	r2, r3
 8001790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001794:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	212c      	movs	r1, #44	; 0x2c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	3361      	adds	r3, #97	; 0x61
 80017a4:	2207      	movs	r2, #7
 80017a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	015a      	lsls	r2, r3, #5
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	0151      	lsls	r1, r2, #5
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	440a      	add	r2, r1
 80017be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 f960 	bl	8003a98 <USB_HC_Halt>
 80017d8:	e0c9      	b.n	800196e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 0320 	and.w	r3, r3, #32
 80017ec:	2b20      	cmp	r3, #32
 80017ee:	d109      	bne.n	8001804 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017fc:	461a      	mov	r2, r3
 80017fe:	2320      	movs	r3, #32
 8001800:	6093      	str	r3, [r2, #8]
 8001802:	e0b4      	b.n	800196e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4413      	add	r3, r2
 800180c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b08      	cmp	r3, #8
 8001818:	d133      	bne.n	8001882 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	015a      	lsls	r2, r3, #5
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4413      	add	r3, r2
 8001822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	0151      	lsls	r1, r2, #5
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	440a      	add	r2, r1
 8001830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	212c      	movs	r1, #44	; 0x2c
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	4413      	add	r3, r2
 8001846:	3361      	adds	r3, #97	; 0x61
 8001848:	2205      	movs	r2, #5
 800184a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	015a      	lsls	r2, r3, #5
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4413      	add	r3, r2
 8001854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001858:	461a      	mov	r2, r3
 800185a:	2310      	movs	r3, #16
 800185c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4413      	add	r3, r2
 8001866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800186a:	461a      	mov	r2, r3
 800186c:	2308      	movs	r3, #8
 800186e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f002 f90c 	bl	8003a98 <USB_HC_Halt>
 8001880:	e075      	b.n	800196e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4413      	add	r3, r2
 800188a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001898:	d134      	bne.n	8001904 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	015a      	lsls	r2, r3, #5
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	0151      	lsls	r1, r2, #5
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	440a      	add	r2, r1
 80018b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	212c      	movs	r1, #44	; 0x2c
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	3361      	adds	r3, #97	; 0x61
 80018c8:	2208      	movs	r2, #8
 80018ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	015a      	lsls	r2, r3, #5
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d8:	461a      	mov	r2, r3
 80018da:	2310      	movs	r3, #16
 80018dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ea:	461a      	mov	r2, r3
 80018ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 f8cb 	bl	8003a98 <USB_HC_Halt>
 8001902:	e034      	b.n	800196e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	015a      	lsls	r2, r3, #5
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4413      	add	r3, r2
 800190c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	2b80      	cmp	r3, #128	; 0x80
 8001918:	d129      	bne.n	800196e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	015a      	lsls	r2, r3, #5
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4413      	add	r3, r2
 8001922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	0151      	lsls	r1, r2, #5
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	440a      	add	r2, r1
 8001930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	212c      	movs	r1, #44	; 0x2c
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	4413      	add	r3, r2
 8001946:	3361      	adds	r3, #97	; 0x61
 8001948:	2206      	movs	r2, #6
 800194a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f002 f89e 	bl	8003a98 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	015a      	lsls	r2, r3, #5
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4413      	add	r3, r2
 8001964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001968:	461a      	mov	r2, r3
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4413      	add	r3, r2
 8001976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001984:	d122      	bne.n	80019cc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	015a      	lsls	r2, r3, #5
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4413      	add	r3, r2
 800198e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	0151      	lsls	r1, r2, #5
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	440a      	add	r2, r1
 800199c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 f871 	bl	8003a98 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	015a      	lsls	r2, r3, #5
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4413      	add	r3, r2
 80019be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c2:	461a      	mov	r2, r3
 80019c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80019ca:	e2ba      	b.n	8001f42 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	015a      	lsls	r2, r3, #5
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 811b 	bne.w	8001c1a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d019      	beq.n	8001a20 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	212c      	movs	r1, #44	; 0x2c
 80019f2:	fb01 f303 	mul.w	r3, r1, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	3348      	adds	r3, #72	; 0x48
 80019fa:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	0159      	lsls	r1, r3, #5
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	440b      	add	r3, r1
 8001a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001a0e:	1ad2      	subs	r2, r2, r3
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	202c      	movs	r0, #44	; 0x2c
 8001a16:	fb00 f303 	mul.w	r3, r0, r3
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3350      	adds	r3, #80	; 0x50
 8001a1e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	212c      	movs	r1, #44	; 0x2c
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3361      	adds	r3, #97	; 0x61
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	212c      	movs	r1, #44	; 0x2c
 8001a38:	fb01 f303 	mul.w	r3, r1, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	335c      	adds	r3, #92	; 0x5c
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	015a      	lsls	r2, r3, #5
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a50:	461a      	mov	r2, r3
 8001a52:	2301      	movs	r3, #1
 8001a54:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	212c      	movs	r1, #44	; 0x2c
 8001a5c:	fb01 f303 	mul.w	r3, r1, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	333f      	adds	r3, #63	; 0x3f
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d009      	beq.n	8001a7e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	212c      	movs	r1, #44	; 0x2c
 8001a70:	fb01 f303 	mul.w	r3, r1, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	333f      	adds	r3, #63	; 0x3f
 8001a78:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d121      	bne.n	8001ac2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	0151      	lsls	r1, r2, #5
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	440a      	add	r2, r1
 8001a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 fff5 	bl	8003a98 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	015a      	lsls	r2, r3, #5
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aba:	461a      	mov	r2, r3
 8001abc:	2310      	movs	r3, #16
 8001abe:	6093      	str	r3, [r2, #8]
 8001ac0:	e066      	b.n	8001b90 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	212c      	movs	r1, #44	; 0x2c
 8001ac8:	fb01 f303 	mul.w	r3, r1, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	333f      	adds	r3, #63	; 0x3f
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d127      	bne.n	8001b26 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	0151      	lsls	r1, r2, #5
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	440a      	add	r2, r1
 8001aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001af0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001af4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3360      	adds	r3, #96	; 0x60
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	b2d9      	uxtb	r1, r3
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	202c      	movs	r0, #44	; 0x2c
 8001b12:	fb00 f303 	mul.w	r3, r0, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	3360      	adds	r3, #96	; 0x60
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f002 fa25 	bl	8003f6e <HAL_HCD_HC_NotifyURBChange_Callback>
 8001b24:	e034      	b.n	8001b90 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	212c      	movs	r1, #44	; 0x2c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	333f      	adds	r3, #63	; 0x3f
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d12a      	bne.n	8001b90 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	212c      	movs	r1, #44	; 0x2c
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	3360      	adds	r3, #96	; 0x60
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	212c      	movs	r1, #44	; 0x2c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	3354      	adds	r3, #84	; 0x54
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	f083 0301 	eor.w	r3, r3, #1
 8001b60:	b2d8      	uxtb	r0, r3
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	212c      	movs	r1, #44	; 0x2c
 8001b68:	fb01 f303 	mul.w	r3, r1, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3354      	adds	r3, #84	; 0x54
 8001b70:	4602      	mov	r2, r0
 8001b72:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	b2d9      	uxtb	r1, r3
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	202c      	movs	r0, #44	; 0x2c
 8001b7e:	fb00 f303 	mul.w	r3, r0, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3360      	adds	r3, #96	; 0x60
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f002 f9ef 	bl	8003f6e <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d12b      	bne.n	8001bf0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3348      	adds	r3, #72	; 0x48
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	202c      	movs	r0, #44	; 0x2c
 8001bae:	fb00 f202 	mul.w	r2, r0, r2
 8001bb2:	440a      	add	r2, r1
 8001bb4:	3240      	adds	r2, #64	; 0x40
 8001bb6:	8812      	ldrh	r2, [r2, #0]
 8001bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 81be 	beq.w	8001f42 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	212c      	movs	r1, #44	; 0x2c
 8001bcc:	fb01 f303 	mul.w	r3, r1, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3354      	adds	r3, #84	; 0x54
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	f083 0301 	eor.w	r3, r3, #1
 8001bda:	b2d8      	uxtb	r0, r3
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	212c      	movs	r1, #44	; 0x2c
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	3354      	adds	r3, #84	; 0x54
 8001bea:	4602      	mov	r2, r0
 8001bec:	701a      	strb	r2, [r3, #0]
}
 8001bee:	e1a8      	b.n	8001f42 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	212c      	movs	r1, #44	; 0x2c
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3354      	adds	r3, #84	; 0x54
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	f083 0301 	eor.w	r3, r3, #1
 8001c04:	b2d8      	uxtb	r0, r3
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	212c      	movs	r1, #44	; 0x2c
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	3354      	adds	r3, #84	; 0x54
 8001c14:	4602      	mov	r2, r0
 8001c16:	701a      	strb	r2, [r3, #0]
}
 8001c18:	e193      	b.n	8001f42 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	f040 8106 	bne.w	8001e3e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	0151      	lsls	r1, r2, #5
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	440a      	add	r2, r1
 8001c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c4c:	f023 0302 	bic.w	r3, r3, #2
 8001c50:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	212c      	movs	r1, #44	; 0x2c
 8001c58:	fb01 f303 	mul.w	r3, r1, r3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3361      	adds	r3, #97	; 0x61
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d109      	bne.n	8001c7a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	212c      	movs	r1, #44	; 0x2c
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	3360      	adds	r3, #96	; 0x60
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e0c9      	b.n	8001e0e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	212c      	movs	r1, #44	; 0x2c
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	3361      	adds	r3, #97	; 0x61
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b05      	cmp	r3, #5
 8001c8c:	d109      	bne.n	8001ca2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	212c      	movs	r1, #44	; 0x2c
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	4413      	add	r3, r2
 8001c9a:	3360      	adds	r3, #96	; 0x60
 8001c9c:	2205      	movs	r2, #5
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	e0b5      	b.n	8001e0e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	212c      	movs	r1, #44	; 0x2c
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	3361      	adds	r3, #97	; 0x61
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d009      	beq.n	8001cca <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	212c      	movs	r1, #44	; 0x2c
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3361      	adds	r3, #97	; 0x61
 8001cc4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d150      	bne.n	8001d6c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	212c      	movs	r1, #44	; 0x2c
 8001cd0:	fb01 f303 	mul.w	r3, r1, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	335c      	adds	r3, #92	; 0x5c
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	202c      	movs	r0, #44	; 0x2c
 8001ce2:	fb00 f303 	mul.w	r3, r0, r3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	335c      	adds	r3, #92	; 0x5c
 8001cea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	335c      	adds	r3, #92	; 0x5c
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d912      	bls.n	8001d26 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	212c      	movs	r1, #44	; 0x2c
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	335c      	adds	r3, #92	; 0x5c
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	212c      	movs	r1, #44	; 0x2c
 8001d18:	fb01 f303 	mul.w	r3, r1, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3360      	adds	r3, #96	; 0x60
 8001d20:	2204      	movs	r2, #4
 8001d22:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d24:	e073      	b.n	8001e0e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	212c      	movs	r1, #44	; 0x2c
 8001d2c:	fb01 f303 	mul.w	r3, r1, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	3360      	adds	r3, #96	; 0x60
 8001d34:	2202      	movs	r2, #2
 8001d36:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d4e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d56:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d6a:	e050      	b.n	8001e0e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	212c      	movs	r1, #44	; 0x2c
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	3361      	adds	r3, #97	; 0x61
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d122      	bne.n	8001dc6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	212c      	movs	r1, #44	; 0x2c
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3360      	adds	r3, #96	; 0x60
 8001d8e:	2202      	movs	r2, #2
 8001d90:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001da8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001db0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	e023      	b.n	8001e0e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3361      	adds	r3, #97	; 0x61
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b07      	cmp	r3, #7
 8001dd8:	d119      	bne.n	8001e0e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	212c      	movs	r1, #44	; 0x2c
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	335c      	adds	r3, #92	; 0x5c
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	202c      	movs	r0, #44	; 0x2c
 8001df2:	fb00 f303 	mul.w	r3, r0, r3
 8001df6:	440b      	add	r3, r1
 8001df8:	335c      	adds	r3, #92	; 0x5c
 8001dfa:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	212c      	movs	r1, #44	; 0x2c
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	3360      	adds	r3, #96	; 0x60
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	b2d9      	uxtb	r1, r3
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	202c      	movs	r0, #44	; 0x2c
 8001e2a:	fb00 f303 	mul.w	r3, r0, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	3360      	adds	r3, #96	; 0x60
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f002 f899 	bl	8003f6e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001e3c:	e081      	b.n	8001f42 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b10      	cmp	r3, #16
 8001e52:	d176      	bne.n	8001f42 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	212c      	movs	r1, #44	; 0x2c
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	333f      	adds	r3, #63	; 0x3f
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d121      	bne.n	8001eac <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	335c      	adds	r3, #92	; 0x5c
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	0151      	lsls	r1, r2, #5
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	440a      	add	r2, r1
 8001e90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 fdf7 	bl	8003a98 <USB_HC_Halt>
 8001eaa:	e041      	b.n	8001f30 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	212c      	movs	r1, #44	; 0x2c
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	333f      	adds	r3, #63	; 0x3f
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d009      	beq.n	8001ed4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	212c      	movs	r1, #44	; 0x2c
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	333f      	adds	r3, #63	; 0x3f
 8001ece:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d12d      	bne.n	8001f30 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	335c      	adds	r3, #92	; 0x5c
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d120      	bne.n	8001f30 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3361      	adds	r3, #97	; 0x61
 8001efc:	2203      	movs	r2, #3
 8001efe:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	0151      	lsls	r1, r2, #5
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	440a      	add	r2, r1
 8001f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f001 fdb4 	bl	8003a98 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2310      	movs	r3, #16
 8001f40:	6093      	str	r3, [r2, #8]
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b088      	sub	sp, #32
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d119      	bne.n	8001fae <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f86:	461a      	mov	r2, r3
 8001f88:	2304      	movs	r3, #4
 8001f8a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	0151      	lsls	r1, r2, #5
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	440a      	add	r2, r1
 8001fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001fac:	e3ca      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d13e      	bne.n	8002042 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	212c      	movs	r1, #44	; 0x2c
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	333d      	adds	r3, #61	; 0x3d
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	f040 83ac 	bne.w	8002744 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	212c      	movs	r1, #44	; 0x2c
 8001ff2:	fb01 f303 	mul.w	r3, r1, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	333d      	adds	r3, #61	; 0x3d
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	3360      	adds	r3, #96	; 0x60
 800200c:	2202      	movs	r2, #2
 800200e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	0151      	lsls	r1, r2, #5
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	440a      	add	r2, r1
 8002026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f001 fd2c 	bl	8003a98 <USB_HC_Halt>
}
 8002040:	e380      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4413      	add	r3, r2
 800204a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002058:	d122      	bne.n	80020a0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4413      	add	r3, r2
 8002062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	0151      	lsls	r1, r2, #5
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	440a      	add	r2, r1
 8002070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f001 fd07 	bl	8003a98 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4413      	add	r3, r2
 8002092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002096:	461a      	mov	r2, r3
 8002098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800209c:	6093      	str	r3, [r2, #8]
}
 800209e:	e351      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d150      	bne.n	8002158 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	335c      	adds	r3, #92	; 0x5c
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	2b40      	cmp	r3, #64	; 0x40
 80020dc:	d111      	bne.n	8002102 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	212c      	movs	r1, #44	; 0x2c
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	333d      	adds	r3, #61	; 0x3d
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	461a      	mov	r2, r3
 80020fe:	2340      	movs	r3, #64	; 0x40
 8002100:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4413      	add	r3, r2
 800210a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	0151      	lsls	r1, r2, #5
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	440a      	add	r2, r1
 8002118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f001 fcb3 	bl	8003a98 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213e:	461a      	mov	r2, r3
 8002140:	2301      	movs	r3, #1
 8002142:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	3361      	adds	r3, #97	; 0x61
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
}
 8002156:	e2f5      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	2b40      	cmp	r3, #64	; 0x40
 800216c:	d13c      	bne.n	80021e8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	212c      	movs	r1, #44	; 0x2c
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	3361      	adds	r3, #97	; 0x61
 800217c:	2204      	movs	r2, #4
 800217e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	333d      	adds	r3, #61	; 0x3d
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	335c      	adds	r3, #92	; 0x5c
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	0151      	lsls	r1, r2, #5
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	440a      	add	r2, r1
 80021ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021be:	f043 0302 	orr.w	r3, r3, #2
 80021c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 fc62 	bl	8003a98 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	461a      	mov	r2, r3
 80021e2:	2340      	movs	r3, #64	; 0x40
 80021e4:	6093      	str	r3, [r2, #8]
}
 80021e6:	e2ad      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d12a      	bne.n	8002254 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	2308      	movs	r3, #8
 800220e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	0151      	lsls	r1, r2, #5
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	440a      	add	r2, r1
 8002226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800222a:	f043 0302 	orr.w	r3, r3, #2
 800222e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f001 fc2c 	bl	8003a98 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3361      	adds	r3, #97	; 0x61
 800224e:	2205      	movs	r2, #5
 8002250:	701a      	strb	r2, [r3, #0]
}
 8002252:	e277      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b10      	cmp	r3, #16
 8002268:	d150      	bne.n	800230c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	212c      	movs	r1, #44	; 0x2c
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4413      	add	r3, r2
 8002276:	335c      	adds	r3, #92	; 0x5c
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3361      	adds	r3, #97	; 0x61
 800228a:	2203      	movs	r2, #3
 800228c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	333d      	adds	r3, #61	; 0x3d
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d112      	bne.n	80022c8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	212c      	movs	r1, #44	; 0x2c
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	333c      	adds	r3, #60	; 0x3c
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d108      	bne.n	80022c8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	212c      	movs	r1, #44	; 0x2c
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	333d      	adds	r3, #61	; 0x3d
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	0151      	lsls	r1, r2, #5
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	440a      	add	r2, r1
 80022de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f001 fbd0 	bl	8003a98 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	461a      	mov	r2, r3
 8002306:	2310      	movs	r3, #16
 8002308:	6093      	str	r3, [r2, #8]
}
 800230a:	e21b      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	4413      	add	r3, r2
 8002314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231e:	2b80      	cmp	r3, #128	; 0x80
 8002320:	d174      	bne.n	800240c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d121      	bne.n	800236e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	3361      	adds	r3, #97	; 0x61
 8002338:	2206      	movs	r2, #6
 800233a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	0151      	lsls	r1, r2, #5
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	440a      	add	r2, r1
 8002352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f001 fb96 	bl	8003a98 <USB_HC_Halt>
 800236c:	e044      	b.n	80023f8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	335c      	adds	r3, #92	; 0x5c
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	202c      	movs	r0, #44	; 0x2c
 8002386:	fb00 f303 	mul.w	r3, r0, r3
 800238a:	440b      	add	r3, r1
 800238c:	335c      	adds	r3, #92	; 0x5c
 800238e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	335c      	adds	r3, #92	; 0x5c
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d920      	bls.n	80023e6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	335c      	adds	r3, #92	; 0x5c
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	3360      	adds	r3, #96	; 0x60
 80023c4:	2204      	movs	r2, #4
 80023c6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	b2d9      	uxtb	r1, r3
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	202c      	movs	r0, #44	; 0x2c
 80023d2:	fb00 f303 	mul.w	r3, r0, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3360      	adds	r3, #96	; 0x60
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f001 fdc5 	bl	8003f6e <HAL_HCD_HC_NotifyURBChange_Callback>
 80023e4:	e008      	b.n	80023f8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3360      	adds	r3, #96	; 0x60
 80023f4:	2202      	movs	r2, #2
 80023f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	461a      	mov	r2, r3
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	6093      	str	r3, [r2, #8]
}
 800240a:	e19b      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	4413      	add	r3, r2
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002422:	d134      	bne.n	800248e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	4413      	add	r3, r2
 800242c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	0151      	lsls	r1, r2, #5
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	440a      	add	r2, r1
 800243a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800243e:	f043 0302 	orr.w	r3, r3, #2
 8002442:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f001 fb22 	bl	8003a98 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	461a      	mov	r2, r3
 8002462:	2310      	movs	r3, #16
 8002464:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	461a      	mov	r2, r3
 8002474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002478:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3361      	adds	r3, #97	; 0x61
 8002488:	2208      	movs	r2, #8
 800248a:	701a      	strb	r2, [r3, #0]
}
 800248c:	e15a      	b.n	8002744 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4413      	add	r3, r2
 8002496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	f040 814f 	bne.w	8002744 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	0151      	lsls	r1, r2, #5
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	440a      	add	r2, r1
 80024bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c0:	f023 0302 	bic.w	r3, r3, #2
 80024c4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3361      	adds	r3, #97	; 0x61
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d17d      	bne.n	80025d6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	3360      	adds	r3, #96	; 0x60
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	333f      	adds	r3, #63	; 0x3f
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d00a      	beq.n	8002516 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	212c      	movs	r1, #44	; 0x2c
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	4413      	add	r3, r2
 800250c:	333f      	adds	r3, #63	; 0x3f
 800250e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002510:	2b03      	cmp	r3, #3
 8002512:	f040 8100 	bne.w	8002716 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d113      	bne.n	8002546 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	3355      	adds	r3, #85	; 0x55
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	f083 0301 	eor.w	r3, r3, #1
 8002532:	b2d8      	uxtb	r0, r3
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	3355      	adds	r3, #85	; 0x55
 8002542:	4602      	mov	r2, r0
 8002544:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b01      	cmp	r3, #1
 800254c:	f040 80e3 	bne.w	8002716 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	334c      	adds	r3, #76	; 0x4c
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80d8 	beq.w	8002716 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	334c      	adds	r3, #76	; 0x4c
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	202c      	movs	r0, #44	; 0x2c
 800257c:	fb00 f202 	mul.w	r2, r0, r2
 8002580:	440a      	add	r2, r1
 8002582:	3240      	adds	r2, #64	; 0x40
 8002584:	8812      	ldrh	r2, [r2, #0]
 8002586:	4413      	add	r3, r2
 8002588:	3b01      	subs	r3, #1
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	202c      	movs	r0, #44	; 0x2c
 8002590:	fb00 f202 	mul.w	r2, r0, r2
 8002594:	440a      	add	r2, r1
 8002596:	3240      	adds	r2, #64	; 0x40
 8002598:	8812      	ldrh	r2, [r2, #0]
 800259a:	fbb3 f3f2 	udiv	r3, r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 80b5 	beq.w	8002716 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3355      	adds	r3, #85	; 0x55
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	f083 0301 	eor.w	r3, r3, #1
 80025c0:	b2d8      	uxtb	r0, r3
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	3355      	adds	r3, #85	; 0x55
 80025d0:	4602      	mov	r2, r0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e09f      	b.n	8002716 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3361      	adds	r3, #97	; 0x61
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d109      	bne.n	80025fe <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	3360      	adds	r3, #96	; 0x60
 80025f8:	2202      	movs	r2, #2
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e08b      	b.n	8002716 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	3361      	adds	r3, #97	; 0x61
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b04      	cmp	r3, #4
 8002610:	d109      	bne.n	8002626 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	3360      	adds	r3, #96	; 0x60
 8002620:	2202      	movs	r2, #2
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e077      	b.n	8002716 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	3361      	adds	r3, #97	; 0x61
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b05      	cmp	r3, #5
 8002638:	d109      	bne.n	800264e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	3360      	adds	r3, #96	; 0x60
 8002648:	2205      	movs	r2, #5
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e063      	b.n	8002716 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	3361      	adds	r3, #97	; 0x61
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b06      	cmp	r3, #6
 8002660:	d009      	beq.n	8002676 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	212c      	movs	r1, #44	; 0x2c
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	3361      	adds	r3, #97	; 0x61
 8002670:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002672:	2b08      	cmp	r3, #8
 8002674:	d14f      	bne.n	8002716 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	335c      	adds	r3, #92	; 0x5c
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	202c      	movs	r0, #44	; 0x2c
 800268e:	fb00 f303 	mul.w	r3, r0, r3
 8002692:	440b      	add	r3, r1
 8002694:	335c      	adds	r3, #92	; 0x5c
 8002696:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	335c      	adds	r3, #92	; 0x5c
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d912      	bls.n	80026d2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	335c      	adds	r3, #92	; 0x5c
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	3360      	adds	r3, #96	; 0x60
 80026cc:	2204      	movs	r2, #4
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e021      	b.n	8002716 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3360      	adds	r3, #96	; 0x60
 80026e0:	2202      	movs	r2, #2
 80026e2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026fa:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002702:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	461a      	mov	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	4413      	add	r3, r2
 800271e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002722:	461a      	mov	r2, r3
 8002724:	2302      	movs	r3, #2
 8002726:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	b2d9      	uxtb	r1, r3
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	202c      	movs	r0, #44	; 0x2c
 8002732:	fb00 f303 	mul.w	r3, r0, r3
 8002736:	4413      	add	r3, r2
 8002738:	3360      	adds	r3, #96	; 0x60
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f001 fc15 	bl	8003f6e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002744:	bf00      	nop
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	0c5b      	lsrs	r3, r3, #17
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002780:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d004      	beq.n	8002792 <HCD_RXQLVL_IRQHandler+0x46>
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b05      	cmp	r3, #5
 800278c:	f000 80a9 	beq.w	80028e2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002790:	e0aa      	b.n	80028e8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a6 	beq.w	80028e6 <HCD_RXQLVL_IRQHandler+0x19a>
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	212c      	movs	r1, #44	; 0x2c
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	3344      	adds	r3, #68	; 0x44
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 809b 	beq.w	80028e6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	3350      	adds	r3, #80	; 0x50
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	441a      	add	r2, r3
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	202c      	movs	r0, #44	; 0x2c
 80027ca:	fb00 f303 	mul.w	r3, r0, r3
 80027ce:	440b      	add	r3, r1
 80027d0:	334c      	adds	r3, #76	; 0x4c
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d87a      	bhi.n	80028ce <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	3344      	adds	r3, #68	; 0x44
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	b292      	uxth	r2, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	f001 f88d 	bl	8003910 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	3344      	adds	r3, #68	; 0x44
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	441a      	add	r2, r3
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	202c      	movs	r0, #44	; 0x2c
 8002810:	fb00 f303 	mul.w	r3, r0, r3
 8002814:	440b      	add	r3, r1
 8002816:	3344      	adds	r3, #68	; 0x44
 8002818:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	3350      	adds	r3, #80	; 0x50
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	441a      	add	r2, r3
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	202c      	movs	r0, #44	; 0x2c
 8002834:	fb00 f303 	mul.w	r3, r0, r3
 8002838:	440b      	add	r3, r1
 800283a:	3350      	adds	r3, #80	; 0x50
 800283c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	0cdb      	lsrs	r3, r3, #19
 800284e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002852:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3340      	adds	r3, #64	; 0x40
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4293      	cmp	r3, r2
 800286a:	d13c      	bne.n	80028e6 <HCD_RXQLVL_IRQHandler+0x19a>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d039      	beq.n	80028e6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002888:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002890:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3354      	adds	r3, #84	; 0x54
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	f083 0301 	eor.w	r3, r3, #1
 80028b8:	b2d8      	uxtb	r0, r3
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3354      	adds	r3, #84	; 0x54
 80028c8:	4602      	mov	r2, r0
 80028ca:	701a      	strb	r2, [r3, #0]
      break;
 80028cc:	e00b      	b.n	80028e6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	3360      	adds	r3, #96	; 0x60
 80028dc:	2204      	movs	r2, #4
 80028de:	701a      	strb	r2, [r3, #0]
      break;
 80028e0:	e001      	b.n	80028e6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80028e6:	bf00      	nop
  }
}
 80028e8:	bf00      	nop
 80028ea:	3728      	adds	r7, #40	; 0x28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800291c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b02      	cmp	r3, #2
 8002926:	d10b      	bne.n	8002940 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b01      	cmp	r3, #1
 8002930:	d102      	bne.n	8002938 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f001 faff 	bl	8003f36 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f043 0302 	orr.w	r3, r3, #2
 800293e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	d132      	bne.n	80029b0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f043 0308 	orr.w	r3, r3, #8
 8002950:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b04      	cmp	r3, #4
 800295a:	d126      	bne.n	80029aa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d113      	bne.n	800298c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800296a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800296e:	d106      	bne.n	800297e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2102      	movs	r1, #2
 8002976:	4618      	mov	r0, r3
 8002978:	f001 f843 	bl	8003a02 <USB_InitFSLSPClkSel>
 800297c:	e011      	b.n	80029a2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2101      	movs	r1, #1
 8002984:	4618      	mov	r0, r3
 8002986:	f001 f83c 	bl	8003a02 <USB_InitFSLSPClkSel>
 800298a:	e00a      	b.n	80029a2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d106      	bne.n	80029a2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800299a:	461a      	mov	r2, r3
 800299c:	f64e 2360 	movw	r3, #60000	; 0xea60
 80029a0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f001 faf1 	bl	8003f8a <HAL_HCD_PortEnabled_Callback>
 80029a8:	e002      	b.n	80029b0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f001 fafb 	bl	8003fa6 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d103      	bne.n	80029c2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f043 0320 	orr.w	r3, r3, #32
 80029c0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	6013      	str	r3, [r2, #0]
}
 80029ce:	bf00      	nop
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e264      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d075      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029f6:	4ba3      	ldr	r3, [pc, #652]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d00c      	beq.n	8002a1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a02:	4ba0      	ldr	r3, [pc, #640]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d112      	bne.n	8002a34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0e:	4b9d      	ldr	r3, [pc, #628]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a1a:	d10b      	bne.n	8002a34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1c:	4b99      	ldr	r3, [pc, #612]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d05b      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x108>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d157      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e23f      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3c:	d106      	bne.n	8002a4c <HAL_RCC_OscConfig+0x74>
 8002a3e:	4b91      	ldr	r3, [pc, #580]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a90      	ldr	r2, [pc, #576]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e01d      	b.n	8002a88 <HAL_RCC_OscConfig+0xb0>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x98>
 8002a56:	4b8b      	ldr	r3, [pc, #556]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a8a      	ldr	r2, [pc, #552]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b88      	ldr	r3, [pc, #544]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a87      	ldr	r2, [pc, #540]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0xb0>
 8002a70:	4b84      	ldr	r3, [pc, #528]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a83      	ldr	r2, [pc, #524]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b81      	ldr	r3, [pc, #516]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a80      	ldr	r2, [pc, #512]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d013      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7fe fa2e 	bl	8000ef0 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fe fa2a 	bl	8000ef0 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e204      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	4b76      	ldr	r3, [pc, #472]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0xc0>
 8002ab6:	e014      	b.n	8002ae2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fa1a 	bl	8000ef0 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fa16 	bl	8000ef0 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e1f0      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad2:	4b6c      	ldr	r3, [pc, #432]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0xe8>
 8002ade:	e000      	b.n	8002ae2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d063      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aee:	4b65      	ldr	r3, [pc, #404]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afa:	4b62      	ldr	r3, [pc, #392]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d11c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b06:	4b5f      	ldr	r3, [pc, #380]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d116      	bne.n	8002b40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b12:	4b5c      	ldr	r3, [pc, #368]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <HAL_RCC_OscConfig+0x152>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e1c4      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2a:	4b56      	ldr	r3, [pc, #344]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4952      	ldr	r1, [pc, #328]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	e03a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b48:	4b4f      	ldr	r3, [pc, #316]	; (8002c88 <HAL_RCC_OscConfig+0x2b0>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7fe f9cf 	bl	8000ef0 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b56:	f7fe f9cb 	bl	8000ef0 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e1a5      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b68:	4b46      	ldr	r3, [pc, #280]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b74:	4b43      	ldr	r3, [pc, #268]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4940      	ldr	r1, [pc, #256]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]
 8002b88:	e015      	b.n	8002bb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <HAL_RCC_OscConfig+0x2b0>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe f9ae 	bl	8000ef0 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b98:	f7fe f9aa 	bl	8000ef0 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e184      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d030      	beq.n	8002c24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bca:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <HAL_RCC_OscConfig+0x2b4>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7fe f98e 	bl	8000ef0 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd8:	f7fe f98a 	bl	8000ef0 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e164      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bea:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x200>
 8002bf6:	e015      	b.n	8002c24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf8:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <HAL_RCC_OscConfig+0x2b4>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfe:	f7fe f977 	bl	8000ef0 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c06:	f7fe f973 	bl	8000ef0 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e14d      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c18:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f0      	bne.n	8002c06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80a0 	beq.w	8002d72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c36:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10f      	bne.n	8002c62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c50:	6413      	str	r3, [r2, #64]	; 0x40
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_OscConfig+0x2b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d121      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <HAL_RCC_OscConfig+0x2b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a07      	ldr	r2, [pc, #28]	; (8002c90 <HAL_RCC_OscConfig+0x2b8>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7a:	f7fe f939 	bl	8000ef0 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	e011      	b.n	8002ca6 <HAL_RCC_OscConfig+0x2ce>
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	42470000 	.word	0x42470000
 8002c8c:	42470e80 	.word	0x42470e80
 8002c90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c94:	f7fe f92c 	bl	8000ef0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e106      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca6:	4b85      	ldr	r3, [pc, #532]	; (8002ebc <HAL_RCC_OscConfig+0x4e4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d106      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
 8002cba:	4b81      	ldr	r3, [pc, #516]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4a80      	ldr	r2, [pc, #512]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc6:	e01c      	b.n	8002d02 <HAL_RCC_OscConfig+0x32a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d10c      	bne.n	8002cea <HAL_RCC_OscConfig+0x312>
 8002cd0:	4b7b      	ldr	r3, [pc, #492]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a7a      	ldr	r2, [pc, #488]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002cd6:	f043 0304 	orr.w	r3, r3, #4
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
 8002cdc:	4b78      	ldr	r3, [pc, #480]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	4a77      	ldr	r2, [pc, #476]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce8:	e00b      	b.n	8002d02 <HAL_RCC_OscConfig+0x32a>
 8002cea:	4b75      	ldr	r3, [pc, #468]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a74      	ldr	r2, [pc, #464]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf6:	4b72      	ldr	r3, [pc, #456]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	4a71      	ldr	r2, [pc, #452]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d015      	beq.n	8002d36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0a:	f7fe f8f1 	bl	8000ef0 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fe f8ed 	bl	8000ef0 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e0c5      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	4b65      	ldr	r3, [pc, #404]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ee      	beq.n	8002d12 <HAL_RCC_OscConfig+0x33a>
 8002d34:	e014      	b.n	8002d60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7fe f8db 	bl	8000ef0 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fe f8d7 	bl	8000ef0 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e0af      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	4b5a      	ldr	r3, [pc, #360]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ee      	bne.n	8002d3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d105      	bne.n	8002d72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d66:	4b56      	ldr	r3, [pc, #344]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4a55      	ldr	r2, [pc, #340]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 809b 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d7c:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d05c      	beq.n	8002e42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d141      	bne.n	8002e14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b4c      	ldr	r3, [pc, #304]	; (8002ec4 <HAL_RCC_OscConfig+0x4ec>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fe f8ab 	bl	8000ef0 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9e:	f7fe f8a7 	bl	8000ef0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e081      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db0:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69da      	ldr	r2, [r3, #28]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	019b      	lsls	r3, r3, #6
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	061b      	lsls	r3, r3, #24
 8002de0:	4937      	ldr	r1, [pc, #220]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de6:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <HAL_RCC_OscConfig+0x4ec>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe f880 	bl	8000ef0 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe f87c 	bl	8000ef0 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e056      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e06:	4b2e      	ldr	r3, [pc, #184]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x41c>
 8002e12:	e04e      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e14:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_RCC_OscConfig+0x4ec>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe f869 	bl	8000ef0 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e22:	f7fe f865 	bl	8000ef0 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e03f      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f0      	bne.n	8002e22 <HAL_RCC_OscConfig+0x44a>
 8002e40:	e037      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e032      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <HAL_RCC_OscConfig+0x4e8>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d028      	beq.n	8002eae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d121      	bne.n	8002eae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d11a      	bne.n	8002eae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e7e:	4013      	ands	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e84:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d111      	bne.n	8002eae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	3b01      	subs	r3, #1
 8002e98:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d107      	bne.n	8002eae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40007000 	.word	0x40007000
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	42470060 	.word	0x42470060

08002ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0cc      	b.n	8003076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b68      	ldr	r3, [pc, #416]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d90c      	bls.n	8002f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b65      	ldr	r3, [pc, #404]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b63      	ldr	r3, [pc, #396]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0b8      	b.n	8003076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d020      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f1c:	4b59      	ldr	r3, [pc, #356]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4a58      	ldr	r2, [pc, #352]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f34:	4b53      	ldr	r3, [pc, #332]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4a52      	ldr	r2, [pc, #328]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f40:	4b50      	ldr	r3, [pc, #320]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	494d      	ldr	r1, [pc, #308]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d044      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d107      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b47      	ldr	r3, [pc, #284]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d119      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e07f      	b.n	8003076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f86:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e06f      	b.n	8003076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f96:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e067      	b.n	8003076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa6:	4b37      	ldr	r3, [pc, #220]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f023 0203 	bic.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4934      	ldr	r1, [pc, #208]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb8:	f7fd ff9a 	bl	8000ef0 <HAL_GetTick>
 8002fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc0:	f7fd ff96 	bl	8000ef0 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e04f      	b.n	8003076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 020c 	and.w	r2, r3, #12
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1eb      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe8:	4b25      	ldr	r3, [pc, #148]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d20c      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	4b22      	ldr	r3, [pc, #136]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_RCC_ClockConfig+0x1b8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e032      	b.n	8003076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800301c:	4b19      	ldr	r3, [pc, #100]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4916      	ldr	r1, [pc, #88]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800303a:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	490e      	ldr	r1, [pc, #56]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800304e:	f000 f821 	bl	8003094 <HAL_RCC_GetSysClockFreq>
 8003052:	4602      	mov	r2, r0
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	490a      	ldr	r1, [pc, #40]	; (8003088 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	5ccb      	ldrb	r3, [r1, r3]
 8003062:	fa22 f303 	lsr.w	r3, r2, r3
 8003066:	4a09      	ldr	r2, [pc, #36]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7fd fefa 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023c00 	.word	0x40023c00
 8003084:	40023800 	.word	0x40023800
 8003088:	080040c0 	.word	0x080040c0
 800308c:	20000004 	.word	0x20000004
 8003090:	20000008 	.word	0x20000008

08003094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003094:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	2300      	movs	r3, #0
 80030a6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ac:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d00d      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0x40>
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	f200 80bd 	bhi.w	8003238 <HAL_RCC_GetSysClockFreq+0x1a4>
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x34>
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d003      	beq.n	80030ce <HAL_RCC_GetSysClockFreq+0x3a>
 80030c6:	e0b7      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030c8:	4b61      	ldr	r3, [pc, #388]	; (8003250 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030ca:	60bb      	str	r3, [r7, #8]
       break;
 80030cc:	e0b7      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ce:	4b61      	ldr	r3, [pc, #388]	; (8003254 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80030d0:	60bb      	str	r3, [r7, #8]
      break;
 80030d2:	e0b4      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030d4:	4b5d      	ldr	r3, [pc, #372]	; (800324c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030de:	4b5b      	ldr	r3, [pc, #364]	; (800324c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d04d      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ea:	4b58      	ldr	r3, [pc, #352]	; (800324c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	099b      	lsrs	r3, r3, #6
 80030f0:	461a      	mov	r2, r3
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	ea02 0800 	and.w	r8, r2, r0
 8003102:	ea03 0901 	and.w	r9, r3, r1
 8003106:	4640      	mov	r0, r8
 8003108:	4649      	mov	r1, r9
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	014b      	lsls	r3, r1, #5
 8003114:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003118:	0142      	lsls	r2, r0, #5
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	ebb0 0008 	subs.w	r0, r0, r8
 8003122:	eb61 0109 	sbc.w	r1, r1, r9
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	018b      	lsls	r3, r1, #6
 8003130:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003134:	0182      	lsls	r2, r0, #6
 8003136:	1a12      	subs	r2, r2, r0
 8003138:	eb63 0301 	sbc.w	r3, r3, r1
 800313c:	f04f 0000 	mov.w	r0, #0
 8003140:	f04f 0100 	mov.w	r1, #0
 8003144:	00d9      	lsls	r1, r3, #3
 8003146:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800314a:	00d0      	lsls	r0, r2, #3
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	eb12 0208 	adds.w	r2, r2, r8
 8003154:	eb43 0309 	adc.w	r3, r3, r9
 8003158:	f04f 0000 	mov.w	r0, #0
 800315c:	f04f 0100 	mov.w	r1, #0
 8003160:	0259      	lsls	r1, r3, #9
 8003162:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003166:	0250      	lsls	r0, r2, #9
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	461a      	mov	r2, r3
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	f7fd f826 	bl	80001c8 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4613      	mov	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e04a      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003186:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	099b      	lsrs	r3, r3, #6
 800318c:	461a      	mov	r2, r3
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	ea02 0400 	and.w	r4, r2, r0
 800319e:	ea03 0501 	and.w	r5, r3, r1
 80031a2:	4620      	mov	r0, r4
 80031a4:	4629      	mov	r1, r5
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	014b      	lsls	r3, r1, #5
 80031b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031b4:	0142      	lsls	r2, r0, #5
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	1b00      	subs	r0, r0, r4
 80031bc:	eb61 0105 	sbc.w	r1, r1, r5
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	018b      	lsls	r3, r1, #6
 80031ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031ce:	0182      	lsls	r2, r0, #6
 80031d0:	1a12      	subs	r2, r2, r0
 80031d2:	eb63 0301 	sbc.w	r3, r3, r1
 80031d6:	f04f 0000 	mov.w	r0, #0
 80031da:	f04f 0100 	mov.w	r1, #0
 80031de:	00d9      	lsls	r1, r3, #3
 80031e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031e4:	00d0      	lsls	r0, r2, #3
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	1912      	adds	r2, r2, r4
 80031ec:	eb45 0303 	adc.w	r3, r5, r3
 80031f0:	f04f 0000 	mov.w	r0, #0
 80031f4:	f04f 0100 	mov.w	r1, #0
 80031f8:	0299      	lsls	r1, r3, #10
 80031fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031fe:	0290      	lsls	r0, r2, #10
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4610      	mov	r0, r2
 8003206:	4619      	mov	r1, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	461a      	mov	r2, r3
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	f7fc ffda 	bl	80001c8 <__aeabi_uldivmod>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4613      	mov	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	3301      	adds	r3, #1
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	60bb      	str	r3, [r7, #8]
      break;
 8003236:	e002      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800323a:	60bb      	str	r3, [r7, #8]
      break;
 800323c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800323e:	68bb      	ldr	r3, [r7, #8]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	00f42400 	.word	0x00f42400
 8003254:	007a1200 	.word	0x007a1200

08003258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e07b      	b.n	8003362 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	2b00      	cmp	r3, #0
 8003270:	d108      	bne.n	8003284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800327a:	d009      	beq.n	8003290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	61da      	str	r2, [r3, #28]
 8003282:	e005      	b.n	8003290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fd fd02 	bl	8000cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003314:	ea42 0103 	orr.w	r1, r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	f003 0104 	and.w	r1, r3, #4
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	f003 0210 	and.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003350:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b08c      	sub	sp, #48	; 0x30
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003378:	2301      	movs	r3, #1
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_SPI_TransmitReceive+0x26>
 800338c:	2302      	movs	r3, #2
 800338e:	e18a      	b.n	80036a6 <HAL_SPI_TransmitReceive+0x33c>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003398:	f7fd fdaa 	bl	8000ef0 <HAL_GetTick>
 800339c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d00f      	beq.n	80033da <HAL_SPI_TransmitReceive+0x70>
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033c0:	d107      	bne.n	80033d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <HAL_SPI_TransmitReceive+0x68>
 80033ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d003      	beq.n	80033da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
 80033d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033d8:	e15b      	b.n	8003692 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_SPI_TransmitReceive+0x82>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_SPI_TransmitReceive+0x82>
 80033e6:	887b      	ldrh	r3, [r7, #2]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d103      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033f2:	e14e      	b.n	8003692 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d003      	beq.n	8003408 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2205      	movs	r2, #5
 8003404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	887a      	ldrh	r2, [r7, #2]
 8003418:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	887a      	ldrh	r2, [r7, #2]
 800341e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	887a      	ldrh	r2, [r7, #2]
 800342a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	887a      	ldrh	r2, [r7, #2]
 8003430:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d007      	beq.n	800345c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800345a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003464:	d178      	bne.n	8003558 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <HAL_SPI_TransmitReceive+0x10a>
 800346e:	8b7b      	ldrh	r3, [r7, #26]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d166      	bne.n	8003542 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	881a      	ldrh	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	1c9a      	adds	r2, r3, #2
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003498:	e053      	b.n	8003542 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d11b      	bne.n	80034e0 <HAL_SPI_TransmitReceive+0x176>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d016      	beq.n	80034e0 <HAL_SPI_TransmitReceive+0x176>
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d113      	bne.n	80034e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	881a      	ldrh	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	1c9a      	adds	r2, r3, #2
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d119      	bne.n	8003522 <HAL_SPI_TransmitReceive+0x1b8>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d014      	beq.n	8003522 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	b292      	uxth	r2, r2
 8003504:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	1c9a      	adds	r2, r3, #2
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800351e:	2301      	movs	r3, #1
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003522:	f7fd fce5 	bl	8000ef0 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800352e:	429a      	cmp	r2, r3
 8003530:	d807      	bhi.n	8003542 <HAL_SPI_TransmitReceive+0x1d8>
 8003532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003538:	d003      	beq.n	8003542 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003540:	e0a7      	b.n	8003692 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1a6      	bne.n	800349a <HAL_SPI_TransmitReceive+0x130>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1a1      	bne.n	800349a <HAL_SPI_TransmitReceive+0x130>
 8003556:	e07c      	b.n	8003652 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <HAL_SPI_TransmitReceive+0x1fc>
 8003560:	8b7b      	ldrh	r3, [r7, #26]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d16b      	bne.n	800363e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	7812      	ldrb	r2, [r2, #0]
 8003572:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800358c:	e057      	b.n	800363e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b02      	cmp	r3, #2
 800359a:	d11c      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x26c>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d017      	beq.n	80035d6 <HAL_SPI_TransmitReceive+0x26c>
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d114      	bne.n	80035d6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	330c      	adds	r3, #12
 80035b6:	7812      	ldrb	r2, [r2, #0]
 80035b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d119      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x2ae>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d014      	beq.n	8003618 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003614:	2301      	movs	r3, #1
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003618:	f7fd fc6a 	bl	8000ef0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003624:	429a      	cmp	r2, r3
 8003626:	d803      	bhi.n	8003630 <HAL_SPI_TransmitReceive+0x2c6>
 8003628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800362e:	d102      	bne.n	8003636 <HAL_SPI_TransmitReceive+0x2cc>
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800363c:	e029      	b.n	8003692 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1a2      	bne.n	800358e <HAL_SPI_TransmitReceive+0x224>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d19d      	bne.n	800358e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003654:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f8b2 	bl	80037c0 <SPI_EndRxTxTransaction>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d006      	beq.n	8003670 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800366e:	e010      	b.n	8003692 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	e000      	b.n	8003692 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003690:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3730      	adds	r7, #48	; 0x30
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	4613      	mov	r3, r2
 80036be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036c0:	f7fd fc16 	bl	8000ef0 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	4413      	add	r3, r2
 80036ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036d0:	f7fd fc0e 	bl	8000ef0 <HAL_GetTick>
 80036d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036d6:	4b39      	ldr	r3, [pc, #228]	; (80037bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	015b      	lsls	r3, r3, #5
 80036dc:	0d1b      	lsrs	r3, r3, #20
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	fb02 f303 	mul.w	r3, r2, r3
 80036e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036e6:	e054      	b.n	8003792 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036ee:	d050      	beq.n	8003792 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036f0:	f7fd fbfe 	bl	8000ef0 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d902      	bls.n	8003706 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d13d      	bne.n	8003782 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003714:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800371e:	d111      	bne.n	8003744 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003728:	d004      	beq.n	8003734 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003732:	d107      	bne.n	8003744 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003742:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374c:	d10f      	bne.n	800376e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800376c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e017      	b.n	80037b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	3b01      	subs	r3, #1
 8003790:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4013      	ands	r3, r2
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d19b      	bne.n	80036e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000004 	.word	0x20000004

080037c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <SPI_EndRxTxTransaction+0x7c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <SPI_EndRxTxTransaction+0x80>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	0d5b      	lsrs	r3, r3, #21
 80037d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037dc:	fb02 f303 	mul.w	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ea:	d112      	bne.n	8003812 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2200      	movs	r2, #0
 80037f4:	2180      	movs	r1, #128	; 0x80
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f7ff ff5a 	bl	80036b0 <SPI_WaitFlagStateUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e00f      	b.n	8003832 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	3b01      	subs	r3, #1
 800381c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003828:	2b80      	cmp	r3, #128	; 0x80
 800382a:	d0f2      	beq.n	8003812 <SPI_EndRxTxTransaction+0x52>
 800382c:	e000      	b.n	8003830 <SPI_EndRxTxTransaction+0x70>
        break;
 800382e:	bf00      	nop
  }

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000004 	.word	0x20000004
 8003840:	165e9f81 	.word	0x165e9f81

08003844 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f043 0201 	orr.w	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 0201 	bic.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	019b      	lsls	r3, r3, #6
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3301      	adds	r3, #1
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	4a08      	ldr	r2, [pc, #32]	; (80038cc <USB_FlushTxFifo+0x44>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e006      	b.n	80038c0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d0f1      	beq.n	80038a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	00030d40 	.word	0x00030d40

080038d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2210      	movs	r2, #16
 80038e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3301      	adds	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	4a08      	ldr	r2, [pc, #32]	; (800390c <USB_FlushRxFifo+0x3c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d901      	bls.n	80038f2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e006      	b.n	8003900 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d0f1      	beq.n	80038e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	00030d40 	.word	0x00030d40

08003910 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003910:	b480      	push	{r7}
 8003912:	b08b      	sub	sp, #44	; 0x2c
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	089b      	lsrs	r3, r3, #2
 800392a:	b29b      	uxth	r3, r3
 800392c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003936:	2300      	movs	r3, #0
 8003938:	623b      	str	r3, [r7, #32]
 800393a:	e014      	b.n	8003966 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	601a      	str	r2, [r3, #0]
    pDest++;
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	3301      	adds	r3, #1
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	3301      	adds	r3, #1
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	3301      	adds	r3, #1
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	3301      	adds	r3, #1
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	3301      	adds	r3, #1
 8003964:	623b      	str	r3, [r7, #32]
 8003966:	6a3a      	ldr	r2, [r7, #32]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	429a      	cmp	r2, r3
 800396c:	d3e6      	bcc.n	800393c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800396e:	8bfb      	ldrh	r3, [r7, #30]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01e      	beq.n	80039b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800397e:	461a      	mov	r2, r3
 8003980:	f107 0310 	add.w	r3, r7, #16
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
 8003994:	b2da      	uxtb	r2, r3
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	701a      	strb	r2, [r3, #0]
      i++;
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	3301      	adds	r3, #1
 800399e:	623b      	str	r3, [r7, #32]
      pDest++;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	3301      	adds	r3, #1
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80039a6:	8bfb      	ldrh	r3, [r7, #30]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80039ac:	8bfb      	ldrh	r3, [r7, #30]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1ea      	bne.n	8003988 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	372c      	adds	r7, #44	; 0x2c
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4013      	ands	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80039d8:	68fb      	ldr	r3, [r7, #12]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0301 	and.w	r3, r3, #1
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a20:	f023 0303 	bic.w	r3, r3, #3
 8003a24:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	68f9      	ldr	r1, [r7, #12]
 8003a36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d107      	bne.n	8003a54 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003a50:	6053      	str	r3, [r2, #4]
 8003a52:	e009      	b.n	8003a68 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d106      	bne.n	8003a68 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a60:	461a      	mov	r2, r3
 8003a62:	f241 7370 	movw	r3, #6000	; 0x1770
 8003a66:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b085      	sub	sp, #20
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	b29b      	uxth	r3, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b089      	sub	sp, #36	; 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	0c9b      	lsrs	r3, r3, #18
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	0fdb      	lsrs	r3, r3, #31
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d104      	bne.n	8003af2 <USB_HC_Halt+0x5a>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e0e8      	b.n	8003cc4 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <USB_HC_Halt+0x66>
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d173      	bne.n	8003be6 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	0151      	lsls	r1, r2, #5
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	440a      	add	r2, r1
 8003b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b1c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f040 80cb 	bne.w	8003cc2 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d143      	bne.n	8003bc0 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b56:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	0151      	lsls	r1, r2, #5
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	440a      	add	r2, r1
 8003b6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b76:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	0151      	lsls	r1, r2, #5
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	440a      	add	r2, r1
 8003b8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b96:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba4:	d81d      	bhi.n	8003be2 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bbc:	d0ec      	beq.n	8003b98 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003bbe:	e080      	b.n	8003cc2 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	0151      	lsls	r1, r2, #5
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bde:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003be0:	e06f      	b.n	8003cc2 <USB_HC_Halt+0x22a>
            break;
 8003be2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003be4:	e06d      	b.n	8003cc2 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	0151      	lsls	r1, r2, #5
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	440a      	add	r2, r1
 8003bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c04:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d143      	bne.n	8003c9e <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	0151      	lsls	r1, r2, #5
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	440a      	add	r2, r1
 8003c2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c34:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c54:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c74:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c82:	d81d      	bhi.n	8003cc0 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c9a:	d0ec      	beq.n	8003c76 <USB_HC_Halt+0x1de>
 8003c9c:	e011      	b.n	8003cc2 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e000      	b.n	8003cc2 <USB_HC_Halt+0x22a>
          break;
 8003cc0:	bf00      	nop
    }
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3724      	adds	r7, #36	; 0x24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff fdc0 	bl	8003866 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8003ce6:	2110      	movs	r1, #16
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff fdcd 	bl	8003888 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff fdee 	bl	80038d0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	e01f      	b.n	8003d3a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d10:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d18:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d20:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	3301      	adds	r3, #1
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b0f      	cmp	r3, #15
 8003d3e:	d9dc      	bls.n	8003cfa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	e034      	b.n	8003db0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d5c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d6c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	3301      	adds	r3, #1
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d8c:	d80c      	bhi.n	8003da8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003da4:	d0ec      	beq.n	8003d80 <USB_StopHost+0xb0>
 8003da6:	e000      	b.n	8003daa <USB_StopHost+0xda>
        break;
 8003da8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	3301      	adds	r3, #1
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b0f      	cmp	r3, #15
 8003db4:	d9c7      	bls.n	8003d46 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dc2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff fd39 	bl	8003844 <USB_EnableGlobalInt>

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f804 	bl	8003e00 <USBH_HandleSof>
}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b0b      	cmp	r3, #11
 8003e10:	d10a      	bne.n	8003e28 <USBH_HandleSof+0x28>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	4798      	blx	r3
  }
}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8003e40:	bf00      	nop
}
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8003e5c:	bf00      	nop
}
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f883 	bl	8003fc2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	791b      	ldrb	r3, [r3, #4]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f80b 	bl	8003ede <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	795b      	ldrb	r3, [r3, #5]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f805 	bl	8003ede <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	2b0a      	cmp	r3, #10
 8003eee:	d80d      	bhi.n	8003f0c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	33e0      	adds	r3, #224	; 0xe0
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	33e0      	adds	r3, #224	; 0xe0
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff57 	bl	8003ddc <USBH_LL_IncTimer>
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ff8f 	bl	8003e68 <USBH_LL_Connect>
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff98 	bl	8003e96 <USBH_LL_Disconnect>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	460b      	mov	r3, r1
 8003f78:	70fb      	strb	r3, [r7, #3]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff49 	bl	8003e30 <USBH_LL_PortEnabled>
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff ff49 	bl	8003e4c <USBH_LL_PortDisabled>
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fd fb77 	bl	80016cc <HAL_HCD_Stop>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 f807 	bl	8003ff8 <USBH_Get_USB_Status>
 8003fea:	4603      	mov	r3, r0
 8003fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	2b03      	cmp	r3, #3
 800400a:	d817      	bhi.n	800403c <USBH_Get_USB_Status+0x44>
 800400c:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <USBH_Get_USB_Status+0x1c>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	08004025 	.word	0x08004025
 8004018:	0800402b 	.word	0x0800402b
 800401c:	08004031 	.word	0x08004031
 8004020:	08004037 	.word	0x08004037
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	73fb      	strb	r3, [r7, #15]
    break;
 8004028:	e00b      	b.n	8004042 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800402a:	2302      	movs	r3, #2
 800402c:	73fb      	strb	r3, [r7, #15]
    break;
 800402e:	e008      	b.n	8004042 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
    break;
 8004034:	e005      	b.n	8004042 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004036:	2302      	movs	r3, #2
 8004038:	73fb      	strb	r3, [r7, #15]
    break;
 800403a:	e002      	b.n	8004042 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800403c:	2302      	movs	r3, #2
 800403e:	73fb      	strb	r3, [r7, #15]
    break;
 8004040:	bf00      	nop
  }
  return usb_status;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <__libc_init_array>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	4d0d      	ldr	r5, [pc, #52]	; (8004088 <__libc_init_array+0x38>)
 8004054:	4c0d      	ldr	r4, [pc, #52]	; (800408c <__libc_init_array+0x3c>)
 8004056:	1b64      	subs	r4, r4, r5
 8004058:	10a4      	asrs	r4, r4, #2
 800405a:	2600      	movs	r6, #0
 800405c:	42a6      	cmp	r6, r4
 800405e:	d109      	bne.n	8004074 <__libc_init_array+0x24>
 8004060:	4d0b      	ldr	r5, [pc, #44]	; (8004090 <__libc_init_array+0x40>)
 8004062:	4c0c      	ldr	r4, [pc, #48]	; (8004094 <__libc_init_array+0x44>)
 8004064:	f000 f820 	bl	80040a8 <_init>
 8004068:	1b64      	subs	r4, r4, r5
 800406a:	10a4      	asrs	r4, r4, #2
 800406c:	2600      	movs	r6, #0
 800406e:	42a6      	cmp	r6, r4
 8004070:	d105      	bne.n	800407e <__libc_init_array+0x2e>
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	f855 3b04 	ldr.w	r3, [r5], #4
 8004078:	4798      	blx	r3
 800407a:	3601      	adds	r6, #1
 800407c:	e7ee      	b.n	800405c <__libc_init_array+0xc>
 800407e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004082:	4798      	blx	r3
 8004084:	3601      	adds	r6, #1
 8004086:	e7f2      	b.n	800406e <__libc_init_array+0x1e>
 8004088:	080040d8 	.word	0x080040d8
 800408c:	080040d8 	.word	0x080040d8
 8004090:	080040d8 	.word	0x080040d8
 8004094:	080040dc 	.word	0x080040dc

08004098 <memset>:
 8004098:	4402      	add	r2, r0
 800409a:	4603      	mov	r3, r0
 800409c:	4293      	cmp	r3, r2
 800409e:	d100      	bne.n	80040a2 <memset+0xa>
 80040a0:	4770      	bx	lr
 80040a2:	f803 1b01 	strb.w	r1, [r3], #1
 80040a6:	e7f9      	b.n	800409c <memset+0x4>

080040a8 <_init>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	bf00      	nop
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr

080040b4 <_fini>:
 80040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b6:	bf00      	nop
 80040b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ba:	bc08      	pop	{r3}
 80040bc:	469e      	mov	lr, r3
 80040be:	4770      	bx	lr
