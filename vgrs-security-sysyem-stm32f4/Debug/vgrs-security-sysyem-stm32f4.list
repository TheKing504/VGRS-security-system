
vgrs-security-sysyem-stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08004c18  08004c18  00014c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c34  08004c34  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c34  08004c34  00014c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c3c  08004c3c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c40  08004c40  00014c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004c44  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000043c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000498  20000498  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f7d  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002998  00000000  00000000  00031009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  000339a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ab0  00000000  00000000  00034580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225b1  00000000  00000000  00035030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f055  00000000  00000000  000575e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca2ad  00000000  00000000  00066636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001308e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ff4  00000000  00000000  00130938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c00 	.word	0x08004c00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08004c00 	.word	0x08004c00

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <updateButtonsCombState>:
int8_t bb_led2State = 0;
int8_t bb_led3State = 0;
int8_t bb_led4State = 0;

void updateButtonsCombState(uint8_t* buttonsCombState)
{
 80004e4:	b5b0      	push	{r4, r5, r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	if (lastTimeUpdated == -1)
 80004ec:	4b61      	ldr	r3, [pc, #388]	; (8000674 <updateButtonsCombState+0x190>)
 80004ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80004f6:	bf08      	it	eq
 80004f8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80004fc:	d108      	bne.n	8000510 <updateButtonsCombState+0x2c>
	{
		lastTimeUpdated = HAL_GetTick();
 80004fe:	f001 fa8f 	bl	8001a20 <HAL_GetTick>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	f04f 0300 	mov.w	r3, #0
 800050a:	495a      	ldr	r1, [pc, #360]	; (8000674 <updateButtonsCombState+0x190>)
 800050c:	e9c1 2300 	strd	r2, r3, [r1]
	}

    if (HAL_GetTick() - lastTimeUpdated >= BB_BOUNCING_FACTOR)
 8000510:	f001 fa86 	bl	8001a20 <HAL_GetTick>
 8000514:	4603      	mov	r3, r0
 8000516:	4618      	mov	r0, r3
 8000518:	f04f 0100 	mov.w	r1, #0
 800051c:	4b55      	ldr	r3, [pc, #340]	; (8000674 <updateButtonsCombState+0x190>)
 800051e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000522:	1a84      	subs	r4, r0, r2
 8000524:	eb61 0503 	sbc.w	r5, r1, r3
 8000528:	2cc8      	cmp	r4, #200	; 0xc8
 800052a:	f175 0300 	sbcs.w	r3, r5, #0
 800052e:	f2c0 8081 	blt.w	8000634 <updateButtonsCombState+0x150>
    {
    	int8_t bc1 = HAL_GPIO_ReadPin(BUTTONS_COMB_PORT, BB1_PIN);
 8000532:	2101      	movs	r1, #1
 8000534:	4850      	ldr	r0, [pc, #320]	; (8000678 <updateButtonsCombState+0x194>)
 8000536:	f001 fd25 	bl	8001f84 <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	73fb      	strb	r3, [r7, #15]
    	int8_t bc2 = HAL_GPIO_ReadPin(BUTTONS_COMB_PORT, BB2_PIN);
 800053e:	2102      	movs	r1, #2
 8000540:	484d      	ldr	r0, [pc, #308]	; (8000678 <updateButtonsCombState+0x194>)
 8000542:	f001 fd1f 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	73bb      	strb	r3, [r7, #14]
    	int8_t bc3 = HAL_GPIO_ReadPin(BUTTONS_COMB_PORT, BB3_PIN);
 800054a:	2104      	movs	r1, #4
 800054c:	484a      	ldr	r0, [pc, #296]	; (8000678 <updateButtonsCombState+0x194>)
 800054e:	f001 fd19 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	737b      	strb	r3, [r7, #13]
    	int8_t bc4 = HAL_GPIO_ReadPin(BUTTONS_COMB_PORT, BB4_PIN);
 8000556:	2108      	movs	r1, #8
 8000558:	4847      	ldr	r0, [pc, #284]	; (8000678 <updateButtonsCombState+0x194>)
 800055a:	f001 fd13 	bl	8001f84 <HAL_GPIO_ReadPin>
 800055e:	4603      	mov	r3, r0
 8000560:	733b      	strb	r3, [r7, #12]

    	if (bc1 == GPIO_PIN_SET)
 8000562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d109      	bne.n	800057e <updateButtonsCombState+0x9a>
    	{
    		bb_led1State = toogleBBState(bb_led1State);
 800056a:	4b44      	ldr	r3, [pc, #272]	; (800067c <updateButtonsCombState+0x198>)
 800056c:	f993 3000 	ldrsb.w	r3, [r3]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f88b 	bl	800068c <toogleBBState>
 8000576:	4603      	mov	r3, r0
 8000578:	461a      	mov	r2, r3
 800057a:	4b40      	ldr	r3, [pc, #256]	; (800067c <updateButtonsCombState+0x198>)
 800057c:	701a      	strb	r2, [r3, #0]
    	}

    	if (bc2 == GPIO_PIN_SET)
 800057e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d109      	bne.n	800059a <updateButtonsCombState+0xb6>
    	{
    		bb_led2State = toogleBBState(bb_led2State);
 8000586:	4b3e      	ldr	r3, [pc, #248]	; (8000680 <updateButtonsCombState+0x19c>)
 8000588:	f993 3000 	ldrsb.w	r3, [r3]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f87d 	bl	800068c <toogleBBState>
 8000592:	4603      	mov	r3, r0
 8000594:	461a      	mov	r2, r3
 8000596:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <updateButtonsCombState+0x19c>)
 8000598:	701a      	strb	r2, [r3, #0]
    	}

    	if (bc3 == GPIO_PIN_SET)
 800059a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d109      	bne.n	80005b6 <updateButtonsCombState+0xd2>
    	{
    		bb_led3State = toogleBBState(bb_led3State);
 80005a2:	4b38      	ldr	r3, [pc, #224]	; (8000684 <updateButtonsCombState+0x1a0>)
 80005a4:	f993 3000 	ldrsb.w	r3, [r3]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f86f 	bl	800068c <toogleBBState>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b34      	ldr	r3, [pc, #208]	; (8000684 <updateButtonsCombState+0x1a0>)
 80005b4:	701a      	strb	r2, [r3, #0]
    	}

    	if (bc4 == GPIO_PIN_SET)
 80005b6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d109      	bne.n	80005d2 <updateButtonsCombState+0xee>
    	{
    		bb_led4State = toogleBBState(bb_led4State);
 80005be:	4b32      	ldr	r3, [pc, #200]	; (8000688 <updateButtonsCombState+0x1a4>)
 80005c0:	f993 3000 	ldrsb.w	r3, [r3]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f861 	bl	800068c <toogleBBState>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <updateButtonsCombState+0x1a4>)
 80005d0:	701a      	strb	r2, [r3, #0]
    	}

    	HAL_GPIO_WritePin(BUTTONS_COMB_PORT, BL1_PIN, bb_led1State);
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <updateButtonsCombState+0x198>)
 80005d4:	f993 3000 	ldrsb.w	r3, [r3]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e0:	4825      	ldr	r0, [pc, #148]	; (8000678 <updateButtonsCombState+0x194>)
 80005e2:	f001 fce7 	bl	8001fb4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(BUTTONS_COMB_PORT, BL2_PIN, bb_led2State);
 80005e6:	4b26      	ldr	r3, [pc, #152]	; (8000680 <updateButtonsCombState+0x19c>)
 80005e8:	f993 3000 	ldrsb.w	r3, [r3]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	461a      	mov	r2, r3
 80005f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f4:	4820      	ldr	r0, [pc, #128]	; (8000678 <updateButtonsCombState+0x194>)
 80005f6:	f001 fcdd 	bl	8001fb4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(BUTTONS_COMB_PORT, BL3_PIN, bb_led3State);
 80005fa:	4b22      	ldr	r3, [pc, #136]	; (8000684 <updateButtonsCombState+0x1a0>)
 80005fc:	f993 3000 	ldrsb.w	r3, [r3]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	461a      	mov	r2, r3
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	481b      	ldr	r0, [pc, #108]	; (8000678 <updateButtonsCombState+0x194>)
 800060a:	f001 fcd3 	bl	8001fb4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(BUTTONS_COMB_PORT, BL4_PIN, bb_led4State);
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <updateButtonsCombState+0x1a4>)
 8000610:	f993 3000 	ldrsb.w	r3, [r3]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800061c:	4816      	ldr	r0, [pc, #88]	; (8000678 <updateButtonsCombState+0x194>)
 800061e:	f001 fcc9 	bl	8001fb4 <HAL_GPIO_WritePin>

    	lastTimeUpdated = HAL_GetTick();
 8000622:	f001 f9fd 	bl	8001a20 <HAL_GetTick>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	f04f 0300 	mov.w	r3, #0
 800062e:	4911      	ldr	r1, [pc, #68]	; (8000674 <updateButtonsCombState+0x190>)
 8000630:	e9c1 2300 	strd	r2, r3, [r1]
    }

	buttonsCombState[0] = bb_led1State;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <updateButtonsCombState+0x198>)
 8000636:	f993 3000 	ldrsb.w	r3, [r3]
 800063a:	b2da      	uxtb	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	701a      	strb	r2, [r3, #0]
	buttonsCombState[1] = bb_led2State;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <updateButtonsCombState+0x19c>)
 8000642:	f993 2000 	ldrsb.w	r2, [r3]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3301      	adds	r3, #1
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	701a      	strb	r2, [r3, #0]
	buttonsCombState[2] = bb_led3State;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <updateButtonsCombState+0x1a0>)
 8000650:	f993 2000 	ldrsb.w	r2, [r3]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3302      	adds	r3, #2
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	701a      	strb	r2, [r3, #0]
	buttonsCombState[3] = bb_led4State;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <updateButtonsCombState+0x1a4>)
 800065e:	f993 2000 	ldrsb.w	r2, [r3]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3303      	adds	r3, #3
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	701a      	strb	r2, [r3, #0]

}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bdb0      	pop	{r4, r5, r7, pc}
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000
 8000678:	40020c00 	.word	0x40020c00
 800067c:	20000078 	.word	0x20000078
 8000680:	20000079 	.word	0x20000079
 8000684:	2000007a 	.word	0x2000007a
 8000688:	2000007b 	.word	0x2000007b

0800068c <toogleBBState>:

int8_t toogleBBState(int8_t bb_ledState)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	if (bb_ledState == 0)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <toogleBBState+0x16>
	{
		return (int8_t)1;
 800069e:	2301      	movs	r3, #1
 80006a0:	e000      	b.n	80006a4 <toogleBBState+0x18>
	}
	return (int8_t)0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <readKeypad>:
#include "stm32f4xx_hal.h"
#include "keypad.h"


char readKeypad (void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	48b4      	ldr	r0, [pc, #720]	; (800098c <readKeypad+0x2dc>)
 80006ba:	f001 fc7b 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2140      	movs	r1, #64	; 0x40
 80006c2:	48b2      	ldr	r0, [pc, #712]	; (800098c <readKeypad+0x2dc>)
 80006c4:	f001 fc76 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2120      	movs	r1, #32
 80006cc:	48af      	ldr	r0, [pc, #700]	; (800098c <readKeypad+0x2dc>)
 80006ce:	f001 fc71 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2110      	movs	r1, #16
 80006d6:	48ad      	ldr	r0, [pc, #692]	; (800098c <readKeypad+0x2dc>)
 80006d8:	f001 fc6c 	bl	8001fb4 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 80006dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e0:	48aa      	ldr	r0, [pc, #680]	; (800098c <readKeypad+0x2dc>)
 80006e2:	f001 fc4f 	bl	8001f84 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00a      	beq.n	8000702 <readKeypad+0x52>
	{
		while (HAL_GPIO_ReadPin (C1_PORT, C1_PIN));
 80006ec:	bf00      	nop
 80006ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f2:	48a6      	ldr	r0, [pc, #664]	; (800098c <readKeypad+0x2dc>)
 80006f4:	f001 fc46 	bl	8001f84 <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d1f7      	bne.n	80006ee <readKeypad+0x3e>
		return '1';
 80006fe:	2331      	movs	r3, #49	; 0x31
 8000700:	e141      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 8000702:	2104      	movs	r1, #4
 8000704:	48a1      	ldr	r0, [pc, #644]	; (800098c <readKeypad+0x2dc>)
 8000706:	f001 fc3d 	bl	8001f84 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d009      	beq.n	8000724 <readKeypad+0x74>
	{
		while (HAL_GPIO_ReadPin (C2_PORT, C2_PIN));
 8000710:	bf00      	nop
 8000712:	2104      	movs	r1, #4
 8000714:	489d      	ldr	r0, [pc, #628]	; (800098c <readKeypad+0x2dc>)
 8000716:	f001 fc35 	bl	8001f84 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1f8      	bne.n	8000712 <readKeypad+0x62>
		return '2';
 8000720:	2332      	movs	r3, #50	; 0x32
 8000722:	e130      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 8000724:	2102      	movs	r1, #2
 8000726:	4899      	ldr	r0, [pc, #612]	; (800098c <readKeypad+0x2dc>)
 8000728:	f001 fc2c 	bl	8001f84 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d009      	beq.n	8000746 <readKeypad+0x96>
	{
		while (HAL_GPIO_ReadPin (C3_PORT, C3_PIN));
 8000732:	bf00      	nop
 8000734:	2102      	movs	r1, #2
 8000736:	4895      	ldr	r0, [pc, #596]	; (800098c <readKeypad+0x2dc>)
 8000738:	f001 fc24 	bl	8001f84 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1f8      	bne.n	8000734 <readKeypad+0x84>
		return '3';
 8000742:	2333      	movs	r3, #51	; 0x33
 8000744:	e11f      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 8000746:	2101      	movs	r1, #1
 8000748:	4890      	ldr	r0, [pc, #576]	; (800098c <readKeypad+0x2dc>)
 800074a:	f001 fc1b 	bl	8001f84 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d009      	beq.n	8000768 <readKeypad+0xb8>
	{
		while (HAL_GPIO_ReadPin (C4_PORT, C4_PIN));
 8000754:	bf00      	nop
 8000756:	2101      	movs	r1, #1
 8000758:	488c      	ldr	r0, [pc, #560]	; (800098c <readKeypad+0x2dc>)
 800075a:	f001 fc13 	bl	8001f84 <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1f8      	bne.n	8000756 <readKeypad+0xa6>
		return 'A';
 8000764:	2341      	movs	r3, #65	; 0x41
 8000766:	e10e      	b.n	8000986 <readKeypad+0x2d6>
	}

	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	4887      	ldr	r0, [pc, #540]	; (800098c <readKeypad+0x2dc>)
 800076e:	f001 fc21 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2140      	movs	r1, #64	; 0x40
 8000776:	4885      	ldr	r0, [pc, #532]	; (800098c <readKeypad+0x2dc>)
 8000778:	f001 fc1c 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2120      	movs	r1, #32
 8000780:	4882      	ldr	r0, [pc, #520]	; (800098c <readKeypad+0x2dc>)
 8000782:	f001 fc17 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2110      	movs	r1, #16
 800078a:	4880      	ldr	r0, [pc, #512]	; (800098c <readKeypad+0x2dc>)
 800078c:	f001 fc12 	bl	8001fb4 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 8000790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000794:	487d      	ldr	r0, [pc, #500]	; (800098c <readKeypad+0x2dc>)
 8000796:	f001 fbf5 	bl	8001f84 <HAL_GPIO_ReadPin>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00a      	beq.n	80007b6 <readKeypad+0x106>
	{
		while (HAL_GPIO_ReadPin (C1_PORT, C1_PIN));
 80007a0:	bf00      	nop
 80007a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a6:	4879      	ldr	r0, [pc, #484]	; (800098c <readKeypad+0x2dc>)
 80007a8:	f001 fbec 	bl	8001f84 <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f7      	bne.n	80007a2 <readKeypad+0xf2>
		return '4';
 80007b2:	2334      	movs	r3, #52	; 0x34
 80007b4:	e0e7      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 80007b6:	2104      	movs	r1, #4
 80007b8:	4874      	ldr	r0, [pc, #464]	; (800098c <readKeypad+0x2dc>)
 80007ba:	f001 fbe3 	bl	8001f84 <HAL_GPIO_ReadPin>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d009      	beq.n	80007d8 <readKeypad+0x128>
	{
		while (HAL_GPIO_ReadPin (C2_PORT, C2_PIN));
 80007c4:	bf00      	nop
 80007c6:	2104      	movs	r1, #4
 80007c8:	4870      	ldr	r0, [pc, #448]	; (800098c <readKeypad+0x2dc>)
 80007ca:	f001 fbdb 	bl	8001f84 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f8      	bne.n	80007c6 <readKeypad+0x116>
		return '5';
 80007d4:	2335      	movs	r3, #53	; 0x35
 80007d6:	e0d6      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 80007d8:	2102      	movs	r1, #2
 80007da:	486c      	ldr	r0, [pc, #432]	; (800098c <readKeypad+0x2dc>)
 80007dc:	f001 fbd2 	bl	8001f84 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d009      	beq.n	80007fa <readKeypad+0x14a>
	{
		while (HAL_GPIO_ReadPin (C3_PORT, C3_PIN));
 80007e6:	bf00      	nop
 80007e8:	2102      	movs	r1, #2
 80007ea:	4868      	ldr	r0, [pc, #416]	; (800098c <readKeypad+0x2dc>)
 80007ec:	f001 fbca 	bl	8001f84 <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1f8      	bne.n	80007e8 <readKeypad+0x138>
		return '6';
 80007f6:	2336      	movs	r3, #54	; 0x36
 80007f8:	e0c5      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 80007fa:	2101      	movs	r1, #1
 80007fc:	4863      	ldr	r0, [pc, #396]	; (800098c <readKeypad+0x2dc>)
 80007fe:	f001 fbc1 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d009      	beq.n	800081c <readKeypad+0x16c>
	{
		while (HAL_GPIO_ReadPin (C4_PORT, C4_PIN));
 8000808:	bf00      	nop
 800080a:	2101      	movs	r1, #1
 800080c:	485f      	ldr	r0, [pc, #380]	; (800098c <readKeypad+0x2dc>)
 800080e:	f001 fbb9 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1f8      	bne.n	800080a <readKeypad+0x15a>
		return 'B';
 8000818:	2342      	movs	r3, #66	; 0x42
 800081a:	e0b4      	b.n	8000986 <readKeypad+0x2d6>
	}

	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2180      	movs	r1, #128	; 0x80
 8000820:	485a      	ldr	r0, [pc, #360]	; (800098c <readKeypad+0x2dc>)
 8000822:	f001 fbc7 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	; 0x40
 800082a:	4858      	ldr	r0, [pc, #352]	; (800098c <readKeypad+0x2dc>)
 800082c:	f001 fbc2 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2120      	movs	r1, #32
 8000834:	4855      	ldr	r0, [pc, #340]	; (800098c <readKeypad+0x2dc>)
 8000836:	f001 fbbd 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2110      	movs	r1, #16
 800083e:	4853      	ldr	r0, [pc, #332]	; (800098c <readKeypad+0x2dc>)
 8000840:	f001 fbb8 	bl	8001fb4 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 8000844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000848:	4850      	ldr	r0, [pc, #320]	; (800098c <readKeypad+0x2dc>)
 800084a:	f001 fb9b 	bl	8001f84 <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00a      	beq.n	800086a <readKeypad+0x1ba>
	{
		while (HAL_GPIO_ReadPin (C1_PORT, C1_PIN));
 8000854:	bf00      	nop
 8000856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085a:	484c      	ldr	r0, [pc, #304]	; (800098c <readKeypad+0x2dc>)
 800085c:	f001 fb92 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1f7      	bne.n	8000856 <readKeypad+0x1a6>
		return '7';
 8000866:	2337      	movs	r3, #55	; 0x37
 8000868:	e08d      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 800086a:	2104      	movs	r1, #4
 800086c:	4847      	ldr	r0, [pc, #284]	; (800098c <readKeypad+0x2dc>)
 800086e:	f001 fb89 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d009      	beq.n	800088c <readKeypad+0x1dc>
	{
		while (HAL_GPIO_ReadPin (C2_PORT, C2_PIN));
 8000878:	bf00      	nop
 800087a:	2104      	movs	r1, #4
 800087c:	4843      	ldr	r0, [pc, #268]	; (800098c <readKeypad+0x2dc>)
 800087e:	f001 fb81 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1f8      	bne.n	800087a <readKeypad+0x1ca>
		return '8';
 8000888:	2338      	movs	r3, #56	; 0x38
 800088a:	e07c      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 800088c:	2102      	movs	r1, #2
 800088e:	483f      	ldr	r0, [pc, #252]	; (800098c <readKeypad+0x2dc>)
 8000890:	f001 fb78 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d009      	beq.n	80008ae <readKeypad+0x1fe>
	{
		while (HAL_GPIO_ReadPin (C3_PORT, C3_PIN));
 800089a:	bf00      	nop
 800089c:	2102      	movs	r1, #2
 800089e:	483b      	ldr	r0, [pc, #236]	; (800098c <readKeypad+0x2dc>)
 80008a0:	f001 fb70 	bl	8001f84 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1f8      	bne.n	800089c <readKeypad+0x1ec>
		return '9';
 80008aa:	2339      	movs	r3, #57	; 0x39
 80008ac:	e06b      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 80008ae:	2101      	movs	r1, #1
 80008b0:	4836      	ldr	r0, [pc, #216]	; (800098c <readKeypad+0x2dc>)
 80008b2:	f001 fb67 	bl	8001f84 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d009      	beq.n	80008d0 <readKeypad+0x220>
	{
		while (HAL_GPIO_ReadPin (C4_PORT, C4_PIN));
 80008bc:	bf00      	nop
 80008be:	2101      	movs	r1, #1
 80008c0:	4832      	ldr	r0, [pc, #200]	; (800098c <readKeypad+0x2dc>)
 80008c2:	f001 fb5f 	bl	8001f84 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1f8      	bne.n	80008be <readKeypad+0x20e>
		return 'C';
 80008cc:	2343      	movs	r3, #67	; 0x43
 80008ce:	e05a      	b.n	8000986 <readKeypad+0x2d6>
	}

	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	482d      	ldr	r0, [pc, #180]	; (800098c <readKeypad+0x2dc>)
 80008d6:	f001 fb6d 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	482b      	ldr	r0, [pc, #172]	; (800098c <readKeypad+0x2dc>)
 80008e0:	f001 fb68 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2120      	movs	r1, #32
 80008e8:	4828      	ldr	r0, [pc, #160]	; (800098c <readKeypad+0x2dc>)
 80008ea:	f001 fb63 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2110      	movs	r1, #16
 80008f2:	4826      	ldr	r0, [pc, #152]	; (800098c <readKeypad+0x2dc>)
 80008f4:	f001 fb5e 	bl	8001fb4 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin (C1_PORT, C1_PIN))
 80008f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fc:	4823      	ldr	r0, [pc, #140]	; (800098c <readKeypad+0x2dc>)
 80008fe:	f001 fb41 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00a      	beq.n	800091e <readKeypad+0x26e>
	{
		while (HAL_GPIO_ReadPin (C1_PORT, C1_PIN));
 8000908:	bf00      	nop
 800090a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090e:	481f      	ldr	r0, [pc, #124]	; (800098c <readKeypad+0x2dc>)
 8000910:	f001 fb38 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d1f7      	bne.n	800090a <readKeypad+0x25a>
		return '*';
 800091a:	232a      	movs	r3, #42	; 0x2a
 800091c:	e033      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C2_PORT, C2_PIN))
 800091e:	2104      	movs	r1, #4
 8000920:	481a      	ldr	r0, [pc, #104]	; (800098c <readKeypad+0x2dc>)
 8000922:	f001 fb2f 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d009      	beq.n	8000940 <readKeypad+0x290>
	{
		while (HAL_GPIO_ReadPin (C2_PORT, C2_PIN));
 800092c:	bf00      	nop
 800092e:	2104      	movs	r1, #4
 8000930:	4816      	ldr	r0, [pc, #88]	; (800098c <readKeypad+0x2dc>)
 8000932:	f001 fb27 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1f8      	bne.n	800092e <readKeypad+0x27e>
		return '0';
 800093c:	2330      	movs	r3, #48	; 0x30
 800093e:	e022      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C3_PORT, C3_PIN))
 8000940:	2102      	movs	r1, #2
 8000942:	4812      	ldr	r0, [pc, #72]	; (800098c <readKeypad+0x2dc>)
 8000944:	f001 fb1e 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d009      	beq.n	8000962 <readKeypad+0x2b2>
	{
		while (HAL_GPIO_ReadPin (C3_PORT, C3_PIN));
 800094e:	bf00      	nop
 8000950:	2102      	movs	r1, #2
 8000952:	480e      	ldr	r0, [pc, #56]	; (800098c <readKeypad+0x2dc>)
 8000954:	f001 fb16 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1f8      	bne.n	8000950 <readKeypad+0x2a0>
		return '#';
 800095e:	2323      	movs	r3, #35	; 0x23
 8000960:	e011      	b.n	8000986 <readKeypad+0x2d6>
	}
	if (HAL_GPIO_ReadPin (C4_PORT, C4_PIN))
 8000962:	2101      	movs	r1, #1
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <readKeypad+0x2dc>)
 8000966:	f001 fb0d 	bl	8001f84 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d009      	beq.n	8000984 <readKeypad+0x2d4>
	{
		while (HAL_GPIO_ReadPin (C4_PORT, C4_PIN));
 8000970:	bf00      	nop
 8000972:	2101      	movs	r1, #1
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <readKeypad+0x2dc>)
 8000976:	f001 fb05 	bl	8001f84 <HAL_GPIO_ReadPin>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1f8      	bne.n	8000972 <readKeypad+0x2c2>
		return 'D';
 8000980:	2344      	movs	r3, #68	; 0x44
 8000982:	e000      	b.n	8000986 <readKeypad+0x2d6>
	}

	return '-';
 8000984:	232d      	movs	r3, #45	; 0x2d
}
 8000986:	4618      	mov	r0, r3
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020400 	.word	0x40020400

08000990 <setLedbar>:

#include "stm32f4xx_hal.h"
#include "ledbar.h"

void setLedbar(uint8_t conf[])
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin (LEDBAR_PORT, L1_PIN, conf[0] != 0);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf14      	ite	ne
 80009a0:	2301      	movne	r3, #1
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	2101      	movs	r1, #1
 80009aa:	483f      	ldr	r0, [pc, #252]	; (8000aa8 <setLedbar+0x118>)
 80009ac:	f001 fb02 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L2_PIN, conf[1] != 0);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	bf14      	ite	ne
 80009ba:	2301      	movne	r3, #1
 80009bc:	2300      	moveq	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	2102      	movs	r1, #2
 80009c4:	4838      	ldr	r0, [pc, #224]	; (8000aa8 <setLedbar+0x118>)
 80009c6:	f001 faf5 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L3_PIN, conf[2] != 0);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3302      	adds	r3, #2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	bf14      	ite	ne
 80009d4:	2301      	movne	r3, #1
 80009d6:	2300      	moveq	r3, #0
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	2104      	movs	r1, #4
 80009de:	4832      	ldr	r0, [pc, #200]	; (8000aa8 <setLedbar+0x118>)
 80009e0:	f001 fae8 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L4_PIN, conf[3] != 0);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3303      	adds	r3, #3
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	bf14      	ite	ne
 80009ee:	2301      	movne	r3, #1
 80009f0:	2300      	moveq	r3, #0
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	461a      	mov	r2, r3
 80009f6:	2108      	movs	r1, #8
 80009f8:	482b      	ldr	r0, [pc, #172]	; (8000aa8 <setLedbar+0x118>)
 80009fa:	f001 fadb 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L5_PIN, conf[4] != 0);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3304      	adds	r3, #4
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf14      	ite	ne
 8000a08:	2301      	movne	r3, #1
 8000a0a:	2300      	moveq	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	461a      	mov	r2, r3
 8000a10:	2110      	movs	r1, #16
 8000a12:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <setLedbar+0x118>)
 8000a14:	f001 face 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L6_PIN, conf[5] != 0);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3305      	adds	r3, #5
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bf14      	ite	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	2300      	moveq	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	481e      	ldr	r0, [pc, #120]	; (8000aa8 <setLedbar+0x118>)
 8000a2e:	f001 fac1 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L7_PIN, conf[6] != 0);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3306      	adds	r3, #6
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bf14      	ite	ne
 8000a3c:	2301      	movne	r3, #1
 8000a3e:	2300      	moveq	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	461a      	mov	r2, r3
 8000a44:	2140      	movs	r1, #64	; 0x40
 8000a46:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <setLedbar+0x118>)
 8000a48:	f001 fab4 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L8_PIN, conf[7] != 0);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3307      	adds	r3, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bf14      	ite	ne
 8000a56:	2301      	movne	r3, #1
 8000a58:	2300      	moveq	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <setLedbar+0x118>)
 8000a62:	f001 faa7 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L9_PIN, conf[8] != 0);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3308      	adds	r3, #8
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	bf14      	ite	ne
 8000a70:	2301      	movne	r3, #1
 8000a72:	2300      	moveq	r3, #0
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7c:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <setLedbar+0x118>)
 8000a7e:	f001 fa99 	bl	8001fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (LEDBAR_PORT, L10_PIN, conf[9] != 0);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3309      	adds	r3, #9
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	2301      	movne	r3, #1
 8000a8e:	2300      	moveq	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <setLedbar+0x118>)
 8000a9a:	f001 fa8b 	bl	8001fb4 <HAL_GPIO_WritePin>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40020800 	.word	0x40020800

08000aac <setLedbarTo>:

void setLedbarTo(int8_t to) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	uint8_t conf[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <setLedbarTo+0x4c>)
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000abe:	c303      	stmia	r3!, {r0, r1}
 8000ac0:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < to; i++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	e008      	b.n	8000ada <setLedbarTo+0x2e>
	{
		conf[i] = 1;
 8000ac8:	f107 0208 	add.w	r2, r7, #8
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	4413      	add	r3, r2
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < to; i++)
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf1      	blt.n	8000ac8 <setLedbarTo+0x1c>
	}
	setLedbar(conf);
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff51 	bl	8000990 <setLedbar>
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	08004c18 	.word	0x08004c18

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 ff28 	bl	8001954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f9fc 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f000 fa9a 	bl	8001040 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b0c:	f000 fa62 	bl	8000fd4 <MX_SPI1_Init>
  MFRC522_Init();
 8000b10:	f000 fde4 	bl	80016dc <MFRC522_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000b14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b18:	f000 ff8e 	bl	8001a38 <HAL_Delay>
  /* USER CODE END 2 */

  makeSound2Beeb();
 8000b1c:	f000 f986 	bl	8000e2c <makeSound2Beeb>

  makeSound1Beeb();
 8000b20:	f000 f9c8 	bl	8000eb4 <makeSound1Beeb>

  makeSound1Beeb();
 8000b24:	f000 f9c6 	bl	8000eb4 <makeSound1Beeb>

  makeSound2Beeb();
 8000b28:	f000 f980 	bl	8000e2c <makeSound2Beeb>

  setLedbarTo(0);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff ffbd 	bl	8000aac <setLedbarTo>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  PIRSensorState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b32:	2101      	movs	r1, #1
 8000b34:	4821      	ldr	r0, [pc, #132]	; (8000bbc <main+0xc0>)
 8000b36:	f001 fa25 	bl	8001f84 <HAL_GPIO_ReadPin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b25a      	sxtb	r2, r3
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <main+0xc4>)
 8000b40:	701a      	strb	r2, [r3, #0]

	  /* USER CODE END WHILE */
	  readButtonCombLockState();
 8000b42:	f000 f847 	bl	8000bd4 <readButtonCombLockState>
	  readKeypadLockState();
 8000b46:	f000 f87b 	bl	8000c40 <readKeypadLockState>
	  readRFIDLockState();
 8000b4a:	f000 f907 	bl	8000d5c <readRFIDLockState>

	  if (rfidLockState == UNLOCKED)
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <main+0xc8>)
 8000b50:	f993 3000 	ldrsb.w	r3, [r3]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d106      	bne.n	8000b66 <main+0x6a>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5e:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <main+0xcc>)
 8000b60:	f001 fa28 	bl	8001fb4 <HAL_GPIO_WritePin>
 8000b64:	e005      	b.n	8000b72 <main+0x76>
	  } else {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b6c:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <main+0xcc>)
 8000b6e:	f001 fa21 	bl	8001fb4 <HAL_GPIO_WritePin>
	  }

	  if (keypadLockState == UNLOCKED)
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <main+0xd0>)
 8000b74:	f993 3000 	ldrsb.w	r3, [r3]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d106      	bne.n	8000b8a <main+0x8e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b82:	4811      	ldr	r0, [pc, #68]	; (8000bc8 <main+0xcc>)
 8000b84:	f001 fa16 	bl	8001fb4 <HAL_GPIO_WritePin>
 8000b88:	e005      	b.n	8000b96 <main+0x9a>
	  } else {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <main+0xcc>)
 8000b92:	f001 fa0f 	bl	8001fb4 <HAL_GPIO_WritePin>
	  }

	  if (buttonsCombLockState == UNLOCKED)
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <main+0xd4>)
 8000b98:	f993 3000 	ldrsb.w	r3, [r3]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d106      	bne.n	8000bae <main+0xb2>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <main+0xcc>)
 8000ba8:	f001 fa04 	bl	8001fb4 <HAL_GPIO_WritePin>
 8000bac:	e7c1      	b.n	8000b32 <main+0x36>
	  } else {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <main+0xcc>)
 8000bb6:	f001 f9fd 	bl	8001fb4 <HAL_GPIO_WritePin>
  {
 8000bba:	e7ba      	b.n	8000b32 <main+0x36>
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	20000085 	.word	0x20000085
 8000bc4:	2000007c 	.word	0x2000007c
 8000bc8:	40020c00 	.word	0x40020c00
 8000bcc:	2000007d 	.word	0x2000007d
 8000bd0:	20000084 	.word	0x20000084

08000bd4 <readButtonCombLockState>:
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

void readButtonCombLockState()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
	updateButtonsCombState(&buttonsCombInput);
 8000bda:	4816      	ldr	r0, [pc, #88]	; (8000c34 <readButtonCombLockState+0x60>)
 8000bdc:	f7ff fc82 	bl	80004e4 <updateButtonsCombState>
	int8_t isValidCombState = 1;
 8000be0:	2301      	movs	r3, #1
 8000be2:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < NUM_OF_BB_SIZE; i++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	e011      	b.n	8000c0e <readButtonCombLockState+0x3a>
	{
		if (buttonsCombInput[i] != validButtonsComb[i])
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <readButtonCombLockState+0x60>)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	f993 2000 	ldrsb.w	r2, [r3]
 8000bf4:	4910      	ldr	r1, [pc, #64]	; (8000c38 <readButtonCombLockState+0x64>)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	440b      	add	r3, r1
 8000bfa:	f993 3000 	ldrsb.w	r3, [r3]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d002      	beq.n	8000c08 <readButtonCombLockState+0x34>
		{
			isValidCombState = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	71fb      	strb	r3, [r7, #7]
			break;
 8000c06:	e005      	b.n	8000c14 <readButtonCombLockState+0x40>
	for (int i = 0; i < NUM_OF_BB_SIZE; i++)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	ddea      	ble.n	8000bea <readButtonCombLockState+0x16>
		}
	}
	if (isValidCombState == 1)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d103      	bne.n	8000c24 <readButtonCombLockState+0x50>
	{
		buttonsCombLockState = UNLOCKED;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <readButtonCombLockState+0x68>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
	} else
	{
		buttonsCombLockState = LOCKED;
	}
}
 8000c22:	e002      	b.n	8000c2a <readButtonCombLockState+0x56>
		buttonsCombLockState = LOCKED;
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <readButtonCombLockState+0x68>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000080 	.word	0x20000080
 8000c38:	2000004c 	.word	0x2000004c
 8000c3c:	20000084 	.word	0x20000084

08000c40 <readKeypadLockState>:

void readKeypadLockState()
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	if (keypadLastTimeValidated != -1 && HAL_GetTick() - keypadLastTimeValidated <= EXPIRE_KEYPAD_LOCK_VALIDATION_TIME && keypadLockState == UNLOCKED)
 8000c44:	4b3f      	ldr	r3, [pc, #252]	; (8000d44 <readKeypadLockState+0x104>)
 8000c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c4e:	bf08      	it	eq
 8000c50:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8000c54:	d017      	beq.n	8000c86 <readKeypadLockState+0x46>
 8000c56:	f000 fee3 	bl	8001a20 <HAL_GetTick>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f04f 0100 	mov.w	r1, #0
 8000c62:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <readKeypadLockState+0x104>)
 8000c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb61 0503 	sbc.w	r5, r1, r3
 8000c6e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000c72:	f04f 0300 	mov.w	r3, #0
 8000c76:	42a2      	cmp	r2, r4
 8000c78:	41ab      	sbcs	r3, r5
 8000c7a:	db04      	blt.n	8000c86 <readKeypadLockState+0x46>
 8000c7c:	4b32      	ldr	r3, [pc, #200]	; (8000d48 <readKeypadLockState+0x108>)
 8000c7e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d057      	beq.n	8000d36 <readKeypadLockState+0xf6>
	{
		return;
	} else {
		keypadLockState = LOCKED;
 8000c86:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <readKeypadLockState+0x108>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
	}

	c = readKeypad();
 8000c8c:	f7ff fd10 	bl	80006b0 <readKeypad>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <readKeypadLockState+0x10c>)
 8000c96:	701a      	strb	r2, [r3, #0]

	if (c == '#') {
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <readKeypadLockState+0x10c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b23      	cmp	r3, #35	; 0x23
 8000c9e:	d128      	bne.n	8000cf2 <readKeypadLockState+0xb2>
		if (strcmp(passwordInput, validPassword_1) == 0 || strcmp(passwordInput, validPassword_2) == 0)
 8000ca0:	492b      	ldr	r1, [pc, #172]	; (8000d50 <readKeypadLockState+0x110>)
 8000ca2:	482c      	ldr	r0, [pc, #176]	; (8000d54 <readKeypadLockState+0x114>)
 8000ca4:	f7ff fa90 	bl	80001c8 <strcmp>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d006      	beq.n	8000cbc <readKeypadLockState+0x7c>
 8000cae:	492a      	ldr	r1, [pc, #168]	; (8000d58 <readKeypadLockState+0x118>)
 8000cb0:	4828      	ldr	r0, [pc, #160]	; (8000d54 <readKeypadLockState+0x114>)
 8000cb2:	f7ff fa89 	bl	80001c8 <strcmp>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10e      	bne.n	8000cda <readKeypadLockState+0x9a>
		{
			makeSound1Beeb();	// ok
 8000cbc:	f000 f8fa 	bl	8000eb4 <makeSound1Beeb>
			keypadLockState = UNLOCKED;
 8000cc0:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <readKeypadLockState+0x108>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
			keypadLastTimeValidated = HAL_GetTick();
 8000cc6:	f000 feab 	bl	8001a20 <HAL_GetTick>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	491c      	ldr	r1, [pc, #112]	; (8000d44 <readKeypadLockState+0x104>)
 8000cd4:	e9c1 2300 	strd	r2, r3, [r1]
		{
 8000cd8:	e004      	b.n	8000ce4 <readKeypadLockState+0xa4>
		} else {
			makeSound2Beeb(); 	// wrong
 8000cda:	f000 f8a7 	bl	8000e2c <makeSound2Beeb>
			keypadLockState = LOCKED;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <readKeypadLockState+0x108>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
		}
		passwordInput[0] = '\0';
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <readKeypadLockState+0x114>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
		setLedbarTo(0);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff fede 	bl	8000aac <setLedbarTo>
		return;
 8000cf0:	e026      	b.n	8000d40 <readKeypadLockState+0x100>
	}

	if (c == 'C') {
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <readKeypadLockState+0x10c>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b43      	cmp	r3, #67	; 0x43
 8000cf8:	d106      	bne.n	8000d08 <readKeypadLockState+0xc8>
		// clear password
		passwordInput[0] = '\0';
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <readKeypadLockState+0x114>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
		setLedbarTo(0);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fed3 	bl	8000aac <setLedbarTo>
		return;
 8000d06:	e01b      	b.n	8000d40 <readKeypadLockState+0x100>
	}

	if (strlen(passwordInput) == KEYPAD_PASSWORD_LENGTH)
 8000d08:	4812      	ldr	r0, [pc, #72]	; (8000d54 <readKeypadLockState+0x114>)
 8000d0a:	f7ff fa67 	bl	80001dc <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b09      	cmp	r3, #9
 8000d12:	d012      	beq.n	8000d3a <readKeypadLockState+0xfa>
	{
		return;
	}

	// nothing clicked
	if (c == '-') {
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <readKeypadLockState+0x10c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b2d      	cmp	r3, #45	; 0x2d
 8000d1a:	d010      	beq.n	8000d3e <readKeypadLockState+0xfe>
		return;
	}

	strncat(passwordInput, &c, 1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	490b      	ldr	r1, [pc, #44]	; (8000d4c <readKeypadLockState+0x10c>)
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <readKeypadLockState+0x114>)
 8000d22:	f003 ff59 	bl	8004bd8 <strncat>
	setLedbarTo(strlen(passwordInput));
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <readKeypadLockState+0x114>)
 8000d28:	f7ff fa58 	bl	80001dc <strlen>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff febc 	bl	8000aac <setLedbarTo>
 8000d34:	e004      	b.n	8000d40 <readKeypadLockState+0x100>
		return;
 8000d36:	bf00      	nop
 8000d38:	e002      	b.n	8000d40 <readKeypadLockState+0x100>
		return;
 8000d3a:	bf00      	nop
 8000d3c:	e000      	b.n	8000d40 <readKeypadLockState+0x100>
		return;
 8000d3e:	bf00      	nop

}
 8000d40:	bdb0      	pop	{r4, r5, r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000040 	.word	0x20000040
 8000d48:	2000007d 	.word	0x2000007d
 8000d4c:	20000048 	.word	0x20000048
 8000d50:	20000028 	.word	0x20000028
 8000d54:	200000dc 	.word	0x200000dc
 8000d58:	20000034 	.word	0x20000034

08000d5c <readRFIDLockState>:

void readRFIDLockState()
{
 8000d5c:	b5b0      	push	{r4, r5, r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	if (rfidLastTimeValidated != -1 && HAL_GetTick() - rfidLastTimeValidated <= EXPIRE_RFID_LOCK_VALIDATION_TIME && rfidLockState == UNLOCKED)
 8000d60:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <readRFIDLockState+0xb8>)
 8000d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d6a:	bf08      	it	eq
 8000d6c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8000d70:	d017      	beq.n	8000da2 <readRFIDLockState+0x46>
 8000d72:	f000 fe55 	bl	8001a20 <HAL_GetTick>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f04f 0100 	mov.w	r1, #0
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <readRFIDLockState+0xb8>)
 8000d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d84:	1a84      	subs	r4, r0, r2
 8000d86:	eb61 0503 	sbc.w	r5, r1, r3
 8000d8a:	f241 7270 	movw	r2, #6000	; 0x1770
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	42a2      	cmp	r2, r4
 8000d94:	41ab      	sbcs	r3, r5
 8000d96:	db04      	blt.n	8000da2 <readRFIDLockState+0x46>
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <readRFIDLockState+0xbc>)
 8000d9a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d035      	beq.n	8000e0e <readRFIDLockState+0xb2>
	{
		return;
	}
	rc522State = MFRC522_Check(cardID);
 8000da2:	481e      	ldr	r0, [pc, #120]	; (8000e1c <readRFIDLockState+0xc0>)
 8000da4:	f000 faae 	bl	8001304 <MFRC522_Check>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b25a      	sxtb	r2, r3
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <readRFIDLockState+0xc4>)
 8000dae:	701a      	strb	r2, [r3, #0]
	if (rc522State == MI_OK)
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <readRFIDLockState+0xc4>)
 8000db2:	f993 3000 	ldrsb.w	r3, [r3]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d122      	bne.n	8000e00 <readRFIDLockState+0xa4>
	{
		if (MFRC522_Compare(cardID, validID_1) == MI_OK || MFRC522_Compare(cardID, validID_2) == MI_OK)
 8000dba:	491a      	ldr	r1, [pc, #104]	; (8000e24 <readRFIDLockState+0xc8>)
 8000dbc:	4817      	ldr	r0, [pc, #92]	; (8000e1c <readRFIDLockState+0xc0>)
 8000dbe:	f000 faba 	bl	8001336 <MFRC522_Compare>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <readRFIDLockState+0x7a>
 8000dc8:	4917      	ldr	r1, [pc, #92]	; (8000e28 <readRFIDLockState+0xcc>)
 8000dca:	4814      	ldr	r0, [pc, #80]	; (8000e1c <readRFIDLockState+0xc0>)
 8000dcc:	f000 fab3 	bl	8001336 <MFRC522_Compare>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10e      	bne.n	8000df4 <readRFIDLockState+0x98>
		{
			makeSound1Beeb();	// ok
 8000dd6:	f000 f86d 	bl	8000eb4 <makeSound1Beeb>
			rfidLockState = UNLOCKED;
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <readRFIDLockState+0xbc>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
			rfidLastTimeValidated = HAL_GetTick();
 8000de0:	f000 fe1e 	bl	8001a20 <HAL_GetTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	4909      	ldr	r1, [pc, #36]	; (8000e14 <readRFIDLockState+0xb8>)
 8000dee:	e9c1 2300 	strd	r2, r3, [r1]
		{
 8000df2:	e008      	b.n	8000e06 <readRFIDLockState+0xaa>
		} else
		{
			makeSound2Beeb();	// wrong card
 8000df4:	f000 f81a 	bl	8000e2c <makeSound2Beeb>
			rfidLockState = LOCKED;
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <readRFIDLockState+0xbc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	e002      	b.n	8000e06 <readRFIDLockState+0xaa>
		}
	} else {
		// no card detected
		rfidLockState = LOCKED;
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <readRFIDLockState+0xbc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(10);
 8000e06:	200a      	movs	r0, #10
 8000e08:	f000 fe16 	bl	8001a38 <HAL_Delay>
 8000e0c:	e000      	b.n	8000e10 <readRFIDLockState+0xb4>
		return;
 8000e0e:	bf00      	nop

}
 8000e10:	bdb0      	pop	{r4, r5, r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000020 	.word	0x20000020
 8000e18:	2000007c 	.word	0x2000007c
 8000e1c:	200000e8 	.word	0x200000e8
 8000e20:	20000008 	.word	0x20000008
 8000e24:	2000000c 	.word	0x2000000c
 8000e28:	20000014 	.word	0x20000014

08000e2c <makeSound2Beeb>:

void makeSound2Beeb()
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
	for(int i = 0; i < 40; i++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	e014      	b.n	8000e62 <makeSound2Beeb+0x36>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3e:	481c      	ldr	r0, [pc, #112]	; (8000eb0 <makeSound2Beeb+0x84>)
 8000e40:	f001 f8b8 	bl	8001fb4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8000e44:	2005      	movs	r0, #5
 8000e46:	f000 fdf7 	bl	8001a38 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e50:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <makeSound2Beeb+0x84>)
 8000e52:	f001 f8af 	bl	8001fb4 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000e56:	2002      	movs	r0, #2
 8000e58:	f000 fdee 	bl	8001a38 <HAL_Delay>
	for(int i = 0; i < 40; i++)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b27      	cmp	r3, #39	; 0x27
 8000e66:	dde7      	ble.n	8000e38 <makeSound2Beeb+0xc>
	}

	HAL_Delay(200);
 8000e68:	20c8      	movs	r0, #200	; 0xc8
 8000e6a:	f000 fde5 	bl	8001a38 <HAL_Delay>

	for(int i = 0; i < 40; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	e014      	b.n	8000e9e <makeSound2Beeb+0x72>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <makeSound2Beeb+0x84>)
 8000e7c:	f001 f89a 	bl	8001fb4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8000e80:	2005      	movs	r0, #5
 8000e82:	f000 fdd9 	bl	8001a38 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <makeSound2Beeb+0x84>)
 8000e8e:	f001 f891 	bl	8001fb4 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000e92:	2002      	movs	r0, #2
 8000e94:	f000 fdd0 	bl	8001a38 <HAL_Delay>
	for(int i = 0; i < 40; i++)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	2b27      	cmp	r3, #39	; 0x27
 8000ea2:	dde7      	ble.n	8000e74 <makeSound2Beeb+0x48>
	}
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <makeSound1Beeb>:

void makeSound1Beeb()
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 100; i++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	e014      	b.n	8000eea <makeSound1Beeb+0x36>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec6:	480d      	ldr	r0, [pc, #52]	; (8000efc <makeSound1Beeb+0x48>)
 8000ec8:	f001 f874 	bl	8001fb4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8000ecc:	2005      	movs	r0, #5
 8000ece:	f000 fdb3 	bl	8001a38 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed8:	4808      	ldr	r0, [pc, #32]	; (8000efc <makeSound1Beeb+0x48>)
 8000eda:	f001 f86b 	bl	8001fb4 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f000 fdaa 	bl	8001a38 <HAL_Delay>
	for(int i = 0; i < 100; i++)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b63      	cmp	r3, #99	; 0x63
 8000eee:	dde7      	ble.n	8000ec0 <makeSound1Beeb+0xc>
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40020000 	.word	0x40020000

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fe5a 	bl	8004bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <SystemClock_Config+0xcc>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <SystemClock_Config+0xd0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f66:	2302      	movs	r3, #2
 8000f68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f70:	2308      	movs	r3, #8
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fabe 	bl	8003508 <HAL_RCC_OscConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f92:	f000 f927 	bl	80011e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f96:	230f      	movs	r3, #15
 8000f98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fa2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2105      	movs	r1, #5
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fd1f 	bl	80039f8 <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fc0:	f000 f910 	bl	80011e4 <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3750      	adds	r7, #80	; 0x50
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_SPI1_Init+0x64>)
 8000fda:	4a18      	ldr	r2, [pc, #96]	; (800103c <MX_SPI1_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_SPI1_Init+0x64>)
 8000fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_SPI1_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_SPI1_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_SPI1_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_SPI1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_SPI1_Init+0x64>)
 8001000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001004:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_SPI1_Init+0x64>)
 8001008:	2218      	movs	r2, #24
 800100a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_SPI1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_SPI1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_SPI1_Init+0x64>)
 8001020:	220a      	movs	r2, #10
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_SPI1_Init+0x64>)
 8001026:	f002 feaf 	bl	8003d88 <HAL_SPI_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001030:	f000 f8d8 	bl	80011e4 <Error_Handler>
  }

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200000f0 	.word	0x200000f0
 800103c:	40013000 	.word	0x40013000

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0ac      	sub	sp, #176	; 0xb0
 8001044:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b61      	ldr	r3, [pc, #388]	; (80011d0 <MX_GPIO_Init+0x190>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a60      	ldr	r2, [pc, #384]	; (80011d0 <MX_GPIO_Init+0x190>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b5e      	ldr	r3, [pc, #376]	; (80011d0 <MX_GPIO_Init+0x190>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b5a      	ldr	r3, [pc, #360]	; (80011d0 <MX_GPIO_Init+0x190>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a59      	ldr	r2, [pc, #356]	; (80011d0 <MX_GPIO_Init+0x190>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <MX_GPIO_Init+0x190>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b53      	ldr	r3, [pc, #332]	; (80011d0 <MX_GPIO_Init+0x190>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a52      	ldr	r2, [pc, #328]	; (80011d0 <MX_GPIO_Init+0x190>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <MX_GPIO_Init+0x190>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <MX_GPIO_Init+0x190>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a4b      	ldr	r2, [pc, #300]	; (80011d0 <MX_GPIO_Init+0x190>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b49      	ldr	r3, [pc, #292]	; (80011d0 <MX_GPIO_Init+0x190>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 - CS PIN for RC522(SPI1)*/
  GPIO_InitStruct.Pin = CS_PIN;
 80010b6:	2310      	movs	r3, #16
 80010b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  HAL_GPIO_Init(CS_PORT, &GPIO_InitStruct);
 80010ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010d2:	4619      	mov	r1, r3
 80010d4:	483f      	ldr	r0, [pc, #252]	; (80011d4 <MX_GPIO_Init+0x194>)
 80010d6:	f000 fdb9 	bl	8001c4c <HAL_GPIO_Init>


  /*Configure GPIO pins : PD12 PD13 PD14 PD15 - BOARD LEDs*/
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80010da:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f8:	4619      	mov	r1, r3
 80010fa:	4837      	ldr	r0, [pc, #220]	; (80011d8 <MX_GPIO_Init+0x198>)
 80010fc:	f000 fda6 	bl	8001c4c <HAL_GPIO_Init>


  /*Configure GPIO pins for keypad  */
  GPIO_InitTypeDef keypadRows;
  keypadRows.Pin =  R1_PIN | R2_PIN | R3_PIN | R4_PIN;
 8001100:	23f0      	movs	r3, #240	; 0xf0
 8001102:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  keypadRows.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  keypadRows.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  keypadRows.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  HAL_GPIO_Init(R1_PORT, &keypadRows);
 8001118:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800111c:	4619      	mov	r1, r3
 800111e:	482f      	ldr	r0, [pc, #188]	; (80011dc <MX_GPIO_Init+0x19c>)
 8001120:	f000 fd94 	bl	8001c4c <HAL_GPIO_Init>

  GPIO_InitTypeDef keypadColumns;
  keypadColumns.Pin =  C1_PIN | C2_PIN | C3_PIN | C4_PIN;
 8001124:	f240 1307 	movw	r3, #263	; 0x107
 8001128:	677b      	str	r3, [r7, #116]	; 0x74
  keypadColumns.Mode = GPIO_MODE_INPUT;
 800112a:	2300      	movs	r3, #0
 800112c:	67bb      	str	r3, [r7, #120]	; 0x78
  keypadColumns.Pull = GPIO_PULLDOWN;
 800112e:	2302      	movs	r3, #2
 8001130:	67fb      	str	r3, [r7, #124]	; 0x7c

  HAL_GPIO_Init(C1_PORT,&keypadColumns);
 8001132:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001136:	4619      	mov	r1, r3
 8001138:	4828      	ldr	r0, [pc, #160]	; (80011dc <MX_GPIO_Init+0x19c>)
 800113a:	f000 fd87 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins for ledbar  */
  GPIO_InitTypeDef ledbar;
  ledbar.Pin =  L1_PIN | L2_PIN | L3_PIN | L4_PIN | L5_PIN | L6_PIN | L7_PIN | L8_PIN | L9_PIN | L10_PIN;
 800113e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001142:	663b      	str	r3, [r7, #96]	; 0x60
  ledbar.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	667b      	str	r3, [r7, #100]	; 0x64
  ledbar.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	66bb      	str	r3, [r7, #104]	; 0x68
  ledbar.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	66fb      	str	r3, [r7, #108]	; 0x6c

  HAL_GPIO_Init(LEDBAR_PORT, &ledbar);
 8001150:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001154:	4619      	mov	r1, r3
 8001156:	4822      	ldr	r0, [pc, #136]	; (80011e0 <MX_GPIO_Init+0x1a0>)
 8001158:	f000 fd78 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins for ledcomb  */
  GPIO_InitTypeDef ledcombButtons;
  ledcombButtons.Pin =  BB1_PIN | BB2_PIN | BB3_PIN | BB4_PIN;
 800115c:	230f      	movs	r3, #15
 800115e:	64fb      	str	r3, [r7, #76]	; 0x4c
  ledcombButtons.Mode = GPIO_MODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	653b      	str	r3, [r7, #80]	; 0x50
  ledcombButtons.Pull = GPIO_PULLDOWN;
 8001164:	2302      	movs	r3, #2
 8001166:	657b      	str	r3, [r7, #84]	; 0x54

  HAL_GPIO_Init(BUTTONS_COMB_PORT, &ledcombButtons);
 8001168:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800116c:	4619      	mov	r1, r3
 800116e:	481a      	ldr	r0, [pc, #104]	; (80011d8 <MX_GPIO_Init+0x198>)
 8001170:	f000 fd6c 	bl	8001c4c <HAL_GPIO_Init>

  GPIO_InitTypeDef ledcombLeds;
  ledcombLeds.Pin =  BL1_PIN | BL2_PIN | BL3_PIN | BL4_PIN;
 8001174:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001178:	63bb      	str	r3, [r7, #56]	; 0x38
  ledcombLeds.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	63fb      	str	r3, [r7, #60]	; 0x3c
  ledcombLeds.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	643b      	str	r3, [r7, #64]	; 0x40
  ledcombLeds.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	647b      	str	r3, [r7, #68]	; 0x44

  HAL_GPIO_Init(BUTTONS_COMB_PORT, &ledcombLeds);
 8001186:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800118a:	4619      	mov	r1, r3
 800118c:	4812      	ldr	r0, [pc, #72]	; (80011d8 <MX_GPIO_Init+0x198>)
 800118e:	f000 fd5d 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin for PIR sensor  */
  GPIO_InitTypeDef pirsensor;
  pirsensor.Pin =  GPIO_PIN_0;
 8001192:	2301      	movs	r3, #1
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  pirsensor.Mode = GPIO_MODE_INPUT;
 8001196:	2300      	movs	r3, #0
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  pirsensor.Pull = GPIO_PULLDOWN;
 800119a:	2302      	movs	r3, #2
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c

  HAL_GPIO_Init(GPIOA, &pirsensor);
 800119e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a2:	4619      	mov	r1, r3
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <MX_GPIO_Init+0x194>)
 80011a6:	f000 fd51 	bl	8001c4c <HAL_GPIO_Init>


  /*Configure GPIO pin for buzzer  */
  GPIO_InitTypeDef buzzer;
  buzzer.Pin =  GPIO_PIN_8;
 80011aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ae:	613b      	str	r3, [r7, #16]
  buzzer.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
  buzzer.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  buzzer.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOA, &buzzer);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MX_GPIO_Init+0x194>)
 80011c4:	f000 fd42 	bl	8001c4c <HAL_GPIO_Init>

}
 80011c8:	bf00      	nop
 80011ca:	37b0      	adds	r7, #176	; 0xb0
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020c00 	.word	0x40020c00
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800

080011e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
}
 80011ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ec:	e7fe      	b.n	80011ec <Error_Handler+0x8>
	...

080011f0 <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 80011fe:	f107 0208 	add.w	r2, r7, #8
 8001202:	f107 010c 	add.w	r1, r7, #12
 8001206:	230a      	movs	r3, #10
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <SPI1SendByte+0x2c>)
 800120e:	f002 fe44 	bl	8003e9a <HAL_SPI_TransmitReceive>
	return readValue[0];
 8001212:	7a3b      	ldrb	r3, [r7, #8]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200000f0 	.word	0x200000f0

08001220 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	460a      	mov	r2, r1
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	4613      	mov	r3, r2
 800122e:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8001230:	2200      	movs	r2, #0
 8001232:	2110      	movs	r1, #16
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <SPI1_WriteReg+0x3c>)
 8001236:	f000 febd 	bl	8001fb4 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ffd7 	bl	80011f0 <SPI1SendByte>
	SPI1SendByte(value);
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ffd3 	bl	80011f0 <SPI1SendByte>
	cs_set();
 800124a:	2201      	movs	r2, #1
 800124c:	2110      	movs	r1, #16
 800124e:	4803      	ldr	r0, [pc, #12]	; (800125c <SPI1_WriteReg+0x3c>)
 8001250:	f000 feb0 	bl	8001fb4 <HAL_GPIO_WritePin>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020000 	.word	0x40020000

08001260 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 800126a:	2200      	movs	r2, #0
 800126c:	2110      	movs	r1, #16
 800126e:	480b      	ldr	r0, [pc, #44]	; (800129c <SPI1_ReadReg+0x3c>)
 8001270:	f000 fea0 	bl	8001fb4 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ffba 	bl	80011f0 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff ffb7 	bl	80011f0 <SPI1SendByte>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8001286:	2201      	movs	r2, #1
 8001288:	2110      	movs	r1, #16
 800128a:	4804      	ldr	r0, [pc, #16]	; (800129c <SPI1_ReadReg+0x3c>)
 800128c:	f000 fe92 	bl	8001fb4 <HAL_GPIO_WritePin>
	return val;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40020000 	.word	0x40020000

080012a0 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	460a      	mov	r2, r1
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	4613      	mov	r3, r2
 80012ae:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80012ba:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 80012bc:	79ba      	ldrb	r2, [r7, #6]
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ffac 	bl	8001220 <SPI1_WriteReg>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ffb5 	bl	8001260 <SPI1_ReadReg>
 80012f6:	4603      	mov	r3, r0
 80012f8:	73fb      	strb	r3, [r7, #15]
	return val;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	2026      	movs	r0, #38	; 0x26
 8001310:	f000 f86a 	bl	80013e8 <MFRC522_Request>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d104      	bne.n	8001328 <MFRC522_Check+0x24>
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f956 	bl	80015d0 <MFRC522_Anticoll>
 8001324:	4603      	mov	r3, r0
 8001326:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation
 8001328:	f000 fa19 	bl	800175e <MFRC522_Halt>
	return status;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <MFRC522_Compare>:

uint8_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
 8001336:	b480      	push	{r7}
 8001338:	b085      	sub	sp, #20
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	e00e      	b.n	8001364 <MFRC522_Compare+0x2e>
		if (CardID[i] != CompareID[i]) return MI_ERR;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	781a      	ldrb	r2, [r3, #0]
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	6839      	ldr	r1, [r7, #0]
 8001352:	440b      	add	r3, r1
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d001      	beq.n	800135e <MFRC522_Compare+0x28>
 800135a:	2302      	movs	r3, #2
 800135c:	e006      	b.n	800136c <MFRC522_Compare+0x36>
	for (i = 0; i < 5; i++) {
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	3301      	adds	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	2b04      	cmp	r3, #4
 8001368:	d9ed      	bls.n	8001346 <MFRC522_Compare+0x10>
	}
	return MI_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <MFRC522_SetBitMask>:

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	4613      	mov	r3, r2
 8001386:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ffa0 	bl	80012d0 <MFRC522_ReadRegister>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	79bb      	ldrb	r3, [r7, #6]
 8001396:	4313      	orrs	r3, r2
 8001398:	b2da      	uxtb	r2, r3
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff7e 	bl	80012a0 <MFRC522_WriteRegister>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	460a      	mov	r2, r1
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	4613      	mov	r3, r2
 80013ba:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff86 	bl	80012d0 <MFRC522_ReadRegister>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b25a      	sxtb	r2, r3
 80013c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	4013      	ands	r3, r2
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff60 	bl	80012a0 <MFRC522_WriteRegister>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 80013f4:	2107      	movs	r1, #7
 80013f6:	200d      	movs	r0, #13
 80013f8:	f7ff ff52 	bl	80012a0 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	79fa      	ldrb	r2, [r7, #7]
 8001400:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2201      	movs	r2, #1
 800140c:	6839      	ldr	r1, [r7, #0]
 800140e:	200c      	movs	r0, #12
 8001410:	f000 f80f 	bl	8001432 <MFRC522_ToCard>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d102      	bne.n	8001424 <MFRC522_Request+0x3c>
 800141e:	89bb      	ldrh	r3, [r7, #12]
 8001420:	2b10      	cmp	r3, #16
 8001422:	d001      	beq.n	8001428 <MFRC522_Request+0x40>
 8001424:	2302      	movs	r3, #2
 8001426:	73fb      	strb	r3, [r7, #15]
	return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001432:	b590      	push	{r4, r7, lr}
 8001434:	b087      	sub	sp, #28
 8001436:	af00      	add	r7, sp, #0
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	4603      	mov	r3, r0
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	4613      	mov	r3, r2
 8001442:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8001444:	2302      	movs	r3, #2
 8001446:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001448:	2300      	movs	r3, #0
 800144a:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800144c:	2300      	movs	r3, #0
 800144e:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d006      	beq.n	8001464 <MFRC522_ToCard+0x32>
 8001456:	2b0e      	cmp	r3, #14
 8001458:	d109      	bne.n	800146e <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 800145a:	2312      	movs	r3, #18
 800145c:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800145e:	2310      	movs	r3, #16
 8001460:	757b      	strb	r3, [r7, #21]
			break;
 8001462:	e005      	b.n	8001470 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001464:	2377      	movs	r3, #119	; 0x77
 8001466:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001468:	2330      	movs	r3, #48	; 0x30
 800146a:	757b      	strb	r3, [r7, #21]
			break;
 800146c:	e000      	b.n	8001470 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800146e:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001470:	7dbb      	ldrb	r3, [r7, #22]
 8001472:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4619      	mov	r1, r3
 800147a:	2002      	movs	r0, #2
 800147c:	f7ff ff10 	bl	80012a0 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	2004      	movs	r0, #4
 8001484:	f7ff ff92 	bl	80013ac <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001488:	2180      	movs	r1, #128	; 0x80
 800148a:	200a      	movs	r0, #10
 800148c:	f7ff ff74 	bl	8001378 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001490:	2100      	movs	r1, #0
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff ff04 	bl	80012a0 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001498:	2300      	movs	r3, #0
 800149a:	827b      	strh	r3, [r7, #18]
 800149c:	e00a      	b.n	80014b4 <MFRC522_ToCard+0x82>
 800149e:	8a7b      	ldrh	r3, [r7, #18]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	4619      	mov	r1, r3
 80014a8:	2009      	movs	r0, #9
 80014aa:	f7ff fef9 	bl	80012a0 <MFRC522_WriteRegister>
 80014ae:	8a7b      	ldrh	r3, [r7, #18]
 80014b0:	3301      	adds	r3, #1
 80014b2:	827b      	strh	r3, [r7, #18]
 80014b4:	7bbb      	ldrb	r3, [r7, #14]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	8a7a      	ldrh	r2, [r7, #18]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d3ef      	bcc.n	800149e <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	4619      	mov	r1, r3
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff feec 	bl	80012a0 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	d103      	bne.n	80014d6 <MFRC522_ToCard+0xa4>
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	200d      	movs	r0, #13
 80014d2:	f7ff ff51 	bl	8001378 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80014d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80014da:	827b      	strh	r3, [r7, #18]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 80014dc:	2004      	movs	r0, #4
 80014de:	f7ff fef7 	bl	80012d0 <MFRC522_ReadRegister>
 80014e2:	4603      	mov	r3, r0
 80014e4:	753b      	strb	r3, [r7, #20]
		i--;
 80014e6:	8a7b      	ldrh	r3, [r7, #18]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80014ec:	8a7b      	ldrh	r3, [r7, #18]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00a      	beq.n	8001508 <MFRC522_ToCard+0xd6>
 80014f2:	7d3b      	ldrb	r3, [r7, #20]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d105      	bne.n	8001508 <MFRC522_ToCard+0xd6>
 80014fc:	7d3a      	ldrb	r2, [r7, #20]
 80014fe:	7d7b      	ldrb	r3, [r7, #21]
 8001500:	4013      	ands	r3, r2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0e9      	beq.n	80014dc <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	200d      	movs	r0, #13
 800150c:	f7ff ff4e 	bl	80013ac <MFRC522_ClearBitMask>

	if (i != 0)  {
 8001510:	8a7b      	ldrh	r3, [r7, #18]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d057      	beq.n	80015c6 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001516:	2006      	movs	r0, #6
 8001518:	f7ff feda 	bl	80012d0 <MFRC522_ReadRegister>
 800151c:	4603      	mov	r3, r0
 800151e:	f003 031b 	and.w	r3, r3, #27
 8001522:	2b00      	cmp	r3, #0
 8001524:	d14d      	bne.n	80015c2 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 800152a:	7d3a      	ldrb	r2, [r7, #20]
 800152c:	7dbb      	ldrb	r3, [r7, #22]
 800152e:	4013      	ands	r3, r2
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MFRC522_ToCard+0x10c>
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d140      	bne.n	80015c6 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001544:	200a      	movs	r0, #10
 8001546:	f7ff fec3 	bl	80012d0 <MFRC522_ReadRegister>
 800154a:	4603      	mov	r3, r0
 800154c:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800154e:	200c      	movs	r0, #12
 8001550:	f7ff febe 	bl	80012d0 <MFRC522_ReadRegister>
 8001554:	4603      	mov	r3, r0
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 800155c:	7c7b      	ldrb	r3, [r7, #17]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00b      	beq.n	800157a <MFRC522_ToCard+0x148>
 8001562:	7d3b      	ldrb	r3, [r7, #20]
 8001564:	3b01      	subs	r3, #1
 8001566:	b29b      	uxth	r3, r3
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	b29a      	uxth	r2, r3
 800156c:	7c7b      	ldrb	r3, [r7, #17]
 800156e:	b29b      	uxth	r3, r3
 8001570:	4413      	add	r3, r2
 8001572:	b29a      	uxth	r2, r3
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001576:	801a      	strh	r2, [r3, #0]
 8001578:	e005      	b.n	8001586 <MFRC522_ToCard+0x154>
 800157a:	7d3b      	ldrb	r3, [r7, #20]
 800157c:	b29b      	uxth	r3, r3
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	b29a      	uxth	r2, r3
 8001582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001584:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8001586:	7d3b      	ldrb	r3, [r7, #20]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <MFRC522_ToCard+0x15e>
 800158c:	2301      	movs	r3, #1
 800158e:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8001590:	7d3b      	ldrb	r3, [r7, #20]
 8001592:	2b10      	cmp	r3, #16
 8001594:	d901      	bls.n	800159a <MFRC522_ToCard+0x168>
 8001596:	2310      	movs	r3, #16
 8001598:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 800159a:	2300      	movs	r3, #0
 800159c:	827b      	strh	r3, [r7, #18]
 800159e:	e00a      	b.n	80015b6 <MFRC522_ToCard+0x184>
 80015a0:	8a7b      	ldrh	r3, [r7, #18]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	18d4      	adds	r4, r2, r3
 80015a6:	2009      	movs	r0, #9
 80015a8:	f7ff fe92 	bl	80012d0 <MFRC522_ReadRegister>
 80015ac:	4603      	mov	r3, r0
 80015ae:	7023      	strb	r3, [r4, #0]
 80015b0:	8a7b      	ldrh	r3, [r7, #18]
 80015b2:	3301      	adds	r3, #1
 80015b4:	827b      	strh	r3, [r7, #18]
 80015b6:	7d3b      	ldrb	r3, [r7, #20]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	8a7a      	ldrh	r2, [r7, #18]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d3ef      	bcc.n	80015a0 <MFRC522_ToCard+0x16e>
 80015c0:	e001      	b.n	80015c6 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 80015c2:	2302      	movs	r3, #2
 80015c4:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd90      	pop	{r4, r7, pc}

080015d0 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 80015dc:	2100      	movs	r1, #0
 80015de:	200d      	movs	r0, #13
 80015e0:	f7ff fe5e 	bl	80012a0 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2293      	movs	r2, #147	; 0x93
 80015e8:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3301      	adds	r3, #1
 80015ee:	2220      	movs	r2, #32
 80015f0:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80015f2:	f107 030a 	add.w	r3, r7, #10
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2202      	movs	r2, #2
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	200c      	movs	r0, #12
 8001600:	f7ff ff17 	bl	8001432 <MFRC522_ToCard>
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d118      	bne.n	8001640 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 800160e:	2300      	movs	r3, #0
 8001610:	73bb      	strb	r3, [r7, #14]
 8001612:	e009      	b.n	8001628 <MFRC522_Anticoll+0x58>
 8001614:	7bbb      	ldrb	r3, [r7, #14]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	781a      	ldrb	r2, [r3, #0]
 800161c:	7b7b      	ldrb	r3, [r7, #13]
 800161e:	4053      	eors	r3, r2
 8001620:	737b      	strb	r3, [r7, #13]
 8001622:	7bbb      	ldrb	r3, [r7, #14]
 8001624:	3301      	adds	r3, #1
 8001626:	73bb      	strb	r3, [r7, #14]
 8001628:	7bbb      	ldrb	r3, [r7, #14]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d9f2      	bls.n	8001614 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 800162e:	7bbb      	ldrb	r3, [r7, #14]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	7b7a      	ldrb	r2, [r7, #13]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <MFRC522_Anticoll+0x70>
 800163c:	2302      	movs	r3, #2
 800163e:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800164a:	b590      	push	{r4, r7, lr}
 800164c:	b087      	sub	sp, #28
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	460b      	mov	r3, r1
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8001658:	2104      	movs	r1, #4
 800165a:	2005      	movs	r0, #5
 800165c:	f7ff fea6 	bl	80013ac <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	200a      	movs	r0, #10
 8001664:	f7ff fe88 	bl	8001378 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001668:	2300      	movs	r3, #0
 800166a:	75fb      	strb	r3, [r7, #23]
 800166c:	e00a      	b.n	8001684 <MFRC522_CalculateCRC+0x3a>
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	2009      	movs	r0, #9
 800167a:	f7ff fe11 	bl	80012a0 <MFRC522_WriteRegister>
 800167e:	7dfb      	ldrb	r3, [r7, #23]
 8001680:	3301      	adds	r3, #1
 8001682:	75fb      	strb	r3, [r7, #23]
 8001684:	7dfa      	ldrb	r2, [r7, #23]
 8001686:	7afb      	ldrb	r3, [r7, #11]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3f0      	bcc.n	800166e <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800168c:	2103      	movs	r1, #3
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff fe06 	bl	80012a0 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8001694:	23ff      	movs	r3, #255	; 0xff
 8001696:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001698:	2005      	movs	r0, #5
 800169a:	f7ff fe19 	bl	80012d0 <MFRC522_ReadRegister>
 800169e:	4603      	mov	r3, r0
 80016a0:	75bb      	strb	r3, [r7, #22]
		i--;
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																		// CRCIrq = 1
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <MFRC522_CalculateCRC+0x6e>
 80016ae:	7dbb      	ldrb	r3, [r7, #22]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ef      	beq.n	8001698 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80016b8:	2022      	movs	r0, #34	; 0x22
 80016ba:	f7ff fe09 	bl	80012d0 <MFRC522_ReadRegister>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	1c5c      	adds	r4, r3, #1
 80016ca:	2021      	movs	r0, #33	; 0x21
 80016cc:	f7ff fe00 	bl	80012d0 <MFRC522_ReadRegister>
 80016d0:	4603      	mov	r3, r0
 80016d2:	7023      	strb	r3, [r4, #0]
}
 80016d4:	bf00      	nop
 80016d6:	371c      	adds	r7, #28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd90      	pop	{r4, r7, pc}

080016dc <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 80016e0:	f000 f820 	bl	8001724 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80016e4:	218d      	movs	r1, #141	; 0x8d
 80016e6:	202a      	movs	r0, #42	; 0x2a
 80016e8:	f7ff fdda 	bl	80012a0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80016ec:	213e      	movs	r1, #62	; 0x3e
 80016ee:	202b      	movs	r0, #43	; 0x2b
 80016f0:	f7ff fdd6 	bl	80012a0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 80016f4:	211e      	movs	r1, #30
 80016f6:	202d      	movs	r0, #45	; 0x2d
 80016f8:	f7ff fdd2 	bl	80012a0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80016fc:	2100      	movs	r1, #0
 80016fe:	202c      	movs	r0, #44	; 0x2c
 8001700:	f7ff fdce 	bl	80012a0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain
 8001704:	2170      	movs	r1, #112	; 0x70
 8001706:	2026      	movs	r0, #38	; 0x26
 8001708:	f7ff fdca 	bl	80012a0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	2015      	movs	r0, #21
 8001710:	f7ff fdc6 	bl	80012a0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001714:	213d      	movs	r1, #61	; 0x3d
 8001716:	2011      	movs	r0, #17
 8001718:	f7ff fdc2 	bl	80012a0 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();											// Open the antenna
 800171c:	f000 f80a 	bl	8001734 <MFRC522_AntennaOn>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001728:	210f      	movs	r1, #15
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff fdb8 	bl	80012a0 <MFRC522_WriteRegister>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800173a:	2014      	movs	r0, #20
 800173c:	f7ff fdc8 	bl	80012d0 <MFRC522_ReadRegister>
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d103      	bne.n	8001756 <MFRC522_AntennaOn+0x22>
 800174e:	2103      	movs	r1, #3
 8001750:	2014      	movs	r0, #20
 8001752:	f7ff fe11 	bl	8001378 <MFRC522_SetBitMask>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8001764:	2350      	movs	r3, #80	; 0x50
 8001766:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 800176c:	463b      	mov	r3, r7
 800176e:	1c9a      	adds	r2, r3, #2
 8001770:	463b      	mov	r3, r7
 8001772:	2102      	movs	r1, #2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff68 	bl	800164a <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 800177a:	463a      	mov	r2, r7
 800177c:	4639      	mov	r1, r7
 800177e:	1dbb      	adds	r3, r7, #6
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4613      	mov	r3, r2
 8001784:	2204      	movs	r2, #4
 8001786:	200c      	movs	r0, #12
 8001788:	f7ff fe53 	bl	8001432 <MFRC522_ToCard>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_MspInit+0x4c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017d2:	2007      	movs	r0, #7
 80017d4:	f000 fa06 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800

080017e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a19      	ldr	r2, [pc, #100]	; (8001868 <HAL_SPI_MspInit+0x84>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d12b      	bne.n	800185e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_SPI_MspInit+0x88>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a17      	ldr	r2, [pc, #92]	; (800186c <HAL_SPI_MspInit+0x88>)
 8001810:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_SPI_MspInit+0x88>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_SPI_MspInit+0x88>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <HAL_SPI_MspInit+0x88>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_SPI_MspInit+0x88>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800183e:	23e0      	movs	r3, #224	; 0xe0
 8001840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800184e:	2305      	movs	r3, #5
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_SPI_MspInit+0x8c>)
 800185a:	f000 f9f7 	bl	8001c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800185e:	bf00      	nop
 8001860:	3728      	adds	r7, #40	; 0x28
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40013000 	.word	0x40013000
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c0:	f000 f89a 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <OTG_FS_IRQHandler+0x10>)
 80018ce:	f000 fb8a 	bl	8001fe6 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000194 	.word	0x20000194

080018dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001938 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001906:	490e      	ldr	r1, [pc, #56]	; (8001940 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800191c:	4c0b      	ldr	r4, [pc, #44]	; (800194c <LoopFillZerobss+0x26>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800192a:	f7ff ffd7 	bl	80018dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192e:	f003 f927 	bl	8004b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001932:	f7ff f8e3 	bl	8000afc <main>
  bx  lr    
 8001936:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001944:	08004c44 	.word	0x08004c44
  ldr r2, =_sbss
 8001948:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800194c:	20000498 	.word	0x20000498

08001950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC_IRQHandler>
	...

08001954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <HAL_Init+0x40>)
 800195e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <HAL_Init+0x40>)
 800196a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_Init+0x40>)
 8001976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 f931 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001982:	2000      	movs	r0, #0
 8001984:	f000 f808 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001988:	f7ff ff04 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023c00 	.word	0x40023c00

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x54>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x58>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f93b 	bl	8001c32 <HAL_SYSTICK_Config>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00e      	b.n	80019e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d80a      	bhi.n	80019e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019cc:	2200      	movs	r2, #0
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019d4:	f000 f911 	bl	8001bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <HAL_InitTick+0x5c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e000      	b.n	80019e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000050 	.word	0x20000050
 80019f0:	20000058 	.word	0x20000058
 80019f4:	20000054 	.word	0x20000054

080019f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x20>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x24>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_IncTick+0x24>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000058 	.word	0x20000058
 8001a1c:	20000190 	.word	0x20000190

08001a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_GetTick+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000190 	.word	0x20000190

08001a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff ffee 	bl	8001a20 <HAL_GetTick>
 8001a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a50:	d005      	beq.n	8001a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_Delay+0x44>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a5e:	bf00      	nop
 8001a60:	f7ff ffde 	bl	8001a20 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d8f7      	bhi.n	8001a60 <HAL_Delay+0x28>
  {
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000058 	.word	0x20000058

08001a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db0a      	blt.n	8001b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	490c      	ldr	r1, [pc, #48]	; (8001b30 <__NVIC_SetPriority+0x4c>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b0c:	e00a      	b.n	8001b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4908      	ldr	r1, [pc, #32]	; (8001b34 <__NVIC_SetPriority+0x50>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	440b      	add	r3, r1
 8001b22:	761a      	strb	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000e100 	.word	0xe000e100
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f1c3 0307 	rsb	r3, r3, #7
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	bf28      	it	cs
 8001b56:	2304      	movcs	r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d902      	bls.n	8001b68 <NVIC_EncodePriority+0x30>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3b03      	subs	r3, #3
 8001b66:	e000      	b.n	8001b6a <NVIC_EncodePriority+0x32>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43d9      	mvns	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	4313      	orrs	r3, r2
         );
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb0:	d301      	bcc.n	8001bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00f      	b.n	8001bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <SysTick_Config+0x40>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bc4:	f7ff ff8e 	bl	8001ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <SysTick_Config+0x40>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <SysTick_Config+0x40>)
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	e000e010 	.word	0xe000e010

08001be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff47 	bl	8001a80 <__NVIC_SetPriorityGrouping>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0c:	f7ff ff5c 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8001c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f7ff ff8e 	bl	8001b38 <NVIC_EncodePriority>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff5d 	bl	8001ae4 <__NVIC_SetPriority>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffb0 	bl	8001ba0 <SysTick_Config>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e16b      	b.n	8001f40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f040 815a 	bne.w	8001f3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d005      	beq.n	8001c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d130      	bne.n	8001d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 0201 	and.w	r2, r3, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d017      	beq.n	8001d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d123      	bne.n	8001d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	08da      	lsrs	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3208      	adds	r2, #8
 8001d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	220f      	movs	r2, #15
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	08da      	lsrs	r2, r3, #3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3208      	adds	r2, #8
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0203 	and.w	r2, r3, #3
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80b4 	beq.w	8001f3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b60      	ldr	r3, [pc, #384]	; (8001f58 <HAL_GPIO_Init+0x30c>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a5f      	ldr	r2, [pc, #380]	; (8001f58 <HAL_GPIO_Init+0x30c>)
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b5d      	ldr	r3, [pc, #372]	; (8001f58 <HAL_GPIO_Init+0x30c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dee:	4a5b      	ldr	r2, [pc, #364]	; (8001f5c <HAL_GPIO_Init+0x310>)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a52      	ldr	r2, [pc, #328]	; (8001f60 <HAL_GPIO_Init+0x314>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d02b      	beq.n	8001e72 <HAL_GPIO_Init+0x226>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a51      	ldr	r2, [pc, #324]	; (8001f64 <HAL_GPIO_Init+0x318>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d025      	beq.n	8001e6e <HAL_GPIO_Init+0x222>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a50      	ldr	r2, [pc, #320]	; (8001f68 <HAL_GPIO_Init+0x31c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d01f      	beq.n	8001e6a <HAL_GPIO_Init+0x21e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4f      	ldr	r2, [pc, #316]	; (8001f6c <HAL_GPIO_Init+0x320>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d019      	beq.n	8001e66 <HAL_GPIO_Init+0x21a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4e      	ldr	r2, [pc, #312]	; (8001f70 <HAL_GPIO_Init+0x324>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0x216>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4d      	ldr	r2, [pc, #308]	; (8001f74 <HAL_GPIO_Init+0x328>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00d      	beq.n	8001e5e <HAL_GPIO_Init+0x212>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4c      	ldr	r2, [pc, #304]	; (8001f78 <HAL_GPIO_Init+0x32c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d007      	beq.n	8001e5a <HAL_GPIO_Init+0x20e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4b      	ldr	r2, [pc, #300]	; (8001f7c <HAL_GPIO_Init+0x330>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_GPIO_Init+0x20a>
 8001e52:	2307      	movs	r3, #7
 8001e54:	e00e      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e56:	2308      	movs	r3, #8
 8001e58:	e00c      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	e00a      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e5e:	2305      	movs	r3, #5
 8001e60:	e008      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e62:	2304      	movs	r3, #4
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e66:	2303      	movs	r3, #3
 8001e68:	e004      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e002      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e72:	2300      	movs	r3, #0
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	f002 0203 	and.w	r2, r2, #3
 8001e7a:	0092      	lsls	r2, r2, #2
 8001e7c:	4093      	lsls	r3, r2
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e84:	4935      	ldr	r1, [pc, #212]	; (8001f5c <HAL_GPIO_Init+0x310>)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	089b      	lsrs	r3, r3, #2
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e92:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <HAL_GPIO_Init+0x334>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb6:	4a32      	ldr	r2, [pc, #200]	; (8001f80 <HAL_GPIO_Init+0x334>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ebc:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <HAL_GPIO_Init+0x334>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ee0:	4a27      	ldr	r2, [pc, #156]	; (8001f80 <HAL_GPIO_Init+0x334>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <HAL_GPIO_Init+0x334>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <HAL_GPIO_Init+0x334>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_GPIO_Init+0x334>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f34:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <HAL_GPIO_Init+0x334>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b0f      	cmp	r3, #15
 8001f44:	f67f ae90 	bls.w	8001c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40013800 	.word	0x40013800
 8001f60:	40020000 	.word	0x40020000
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40020800 	.word	0x40020800
 8001f6c:	40020c00 	.word	0x40020c00
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40021400 	.word	0x40021400
 8001f78:	40021800 	.word	0x40021800
 8001f7c:	40021c00 	.word	0x40021c00
 8001f80:	40013c00 	.word	0x40013c00

08001f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	e001      	b.n	8001fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f002 fa8a 	bl	8004516 <USB_GetMode>
 8002002:	4603      	mov	r3, r0
 8002004:	2b01      	cmp	r3, #1
 8002006:	f040 80f6 	bne.w	80021f6 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f002 fa6e 	bl	80044f0 <USB_ReadInterrupts>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80ec 	beq.w	80021f4 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f002 fa65 	bl	80044f0 <USB_ReadInterrupts>
 8002026:	4603      	mov	r3, r0
 8002028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800202c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002030:	d104      	bne.n	800203c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800203a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f002 fa55 	bl	80044f0 <USB_ReadInterrupts>
 8002046:	4603      	mov	r3, r0
 8002048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002050:	d104      	bne.n	800205c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800205a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f002 fa45 	bl	80044f0 <USB_ReadInterrupts>
 8002066:	4603      	mov	r3, r0
 8002068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800206c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002070:	d104      	bne.n	800207c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800207a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f002 fa35 	bl	80044f0 <USB_ReadInterrupts>
 8002086:	4603      	mov	r3, r0
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b02      	cmp	r3, #2
 800208e:	d103      	bne.n	8002098 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2202      	movs	r2, #2
 8002096:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f002 fa27 	bl	80044f0 <USB_ReadInterrupts>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ac:	d11c      	bne.n	80020e8 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80020b6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10f      	bne.n	80020e8 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80020c8:	2110      	movs	r1, #16
 80020ca:	6938      	ldr	r0, [r7, #16]
 80020cc:	f002 f974 	bl	80043b8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80020d0:	6938      	ldr	r0, [r7, #16]
 80020d2:	f002 f995 	bl	8004400 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2101      	movs	r1, #1
 80020dc:	4618      	mov	r0, r3
 80020de:	f002 fa28 	bl	8004532 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f002 fccd 	bl	8004a82 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 f9ff 	bl	80044f0 <USB_ReadInterrupts>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d102      	bne.n	8002104 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f001 f98e 	bl	8003420 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f002 f9f1 	bl	80044f0 <USB_ReadInterrupts>
 800210e:	4603      	mov	r3, r0
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b08      	cmp	r3, #8
 8002116:	d106      	bne.n	8002126 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f002 fc96 	bl	8004a4a <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2208      	movs	r2, #8
 8002124:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f002 f9e0 	bl	80044f0 <USB_ReadInterrupts>
 8002130:	4603      	mov	r3, r0
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b10      	cmp	r3, #16
 8002138:	d101      	bne.n	800213e <HAL_HCD_IRQHandler+0x158>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_HCD_IRQHandler+0x15a>
 800213e:	2300      	movs	r3, #0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d012      	beq.n	800216a <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0210 	bic.w	r2, r2, #16
 8002152:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f001 f891 	bl	800327c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0210 	orr.w	r2, r2, #16
 8002168:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f002 f9be 	bl	80044f0 <USB_ReadInterrupts>
 8002174:	4603      	mov	r3, r0
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800217e:	d13a      	bne.n	80021f6 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fa0e 	bl	80045a6 <USB_HC_ReadInterrupt>
 800218a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e025      	b.n	80021de <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	fa22 f303 	lsr.w	r3, r2, r3
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d018      	beq.n	80021d8 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021bc:	d106      	bne.n	80021cc <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	4619      	mov	r1, r3
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f836 	bl	8002236 <HCD_HC_IN_IRQHandler>
 80021ca:	e005      	b.n	80021d8 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fc51 	bl	8002a7a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3301      	adds	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d3d4      	bcc.n	8002192 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f0:	615a      	str	r2, [r3, #20]
 80021f2:	e000      	b.n	80021f6 <HAL_HCD_IRQHandler+0x210>
      return;
 80021f4:	bf00      	nop
    }
  }
}
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_HCD_Stop+0x16>
 800220e:	2302      	movs	r3, #2
 8002210:	e00d      	b.n	800222e <HAL_HCD_Stop+0x32>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f002 faee 	bl	8004800 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b04      	cmp	r3, #4
 8002264:	d119      	bne.n	800229a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002272:	461a      	mov	r2, r3
 8002274:	2304      	movs	r3, #4
 8002276:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	0151      	lsls	r1, r2, #5
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	440a      	add	r2, r1
 800228e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002292:	f043 0302 	orr.w	r3, r3, #2
 8002296:	60d3      	str	r3, [r2, #12]
 8002298:	e101      	b.n	800249e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b0:	d12b      	bne.n	800230a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022be:	461a      	mov	r2, r3
 80022c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	3361      	adds	r3, #97	; 0x61
 80022d4:	2207      	movs	r2, #7
 80022d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	0151      	lsls	r1, r2, #5
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	440a      	add	r2, r1
 80022ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f002 f960 	bl	80045c8 <USB_HC_Halt>
 8002308:	e0c9      	b.n	800249e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4413      	add	r3, r2
 8002312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b20      	cmp	r3, #32
 800231e:	d109      	bne.n	8002334 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232c:	461a      	mov	r2, r3
 800232e:	2320      	movs	r3, #32
 8002330:	6093      	str	r3, [r2, #8]
 8002332:	e0b4      	b.n	800249e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b08      	cmp	r3, #8
 8002348:	d133      	bne.n	80023b2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	0151      	lsls	r1, r2, #5
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	440a      	add	r2, r1
 8002360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	3361      	adds	r3, #97	; 0x61
 8002378:	2205      	movs	r2, #5
 800237a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	461a      	mov	r2, r3
 800238a:	2310      	movs	r3, #16
 800238c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4413      	add	r3, r2
 8002396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239a:	461a      	mov	r2, r3
 800239c:	2308      	movs	r3, #8
 800239e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 f90c 	bl	80045c8 <USB_HC_Halt>
 80023b0:	e075      	b.n	800249e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c8:	d134      	bne.n	8002434 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	0151      	lsls	r1, r2, #5
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	440a      	add	r2, r1
 80023e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	3361      	adds	r3, #97	; 0x61
 80023f8:	2208      	movs	r2, #8
 80023fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	461a      	mov	r2, r3
 800240a:	2310      	movs	r3, #16
 800240c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	461a      	mov	r2, r3
 800241c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002420:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f002 f8cb 	bl	80045c8 <USB_HC_Halt>
 8002432:	e034      	b.n	800249e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002446:	2b80      	cmp	r3, #128	; 0x80
 8002448:	d129      	bne.n	800249e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	0151      	lsls	r1, r2, #5
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	440a      	add	r2, r1
 8002460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	3361      	adds	r3, #97	; 0x61
 8002478:	2206      	movs	r2, #6
 800247a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f002 f89e 	bl	80045c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	461a      	mov	r2, r3
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b4:	d122      	bne.n	80024fc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	0151      	lsls	r1, r2, #5
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	440a      	add	r2, r1
 80024cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f002 f871 	bl	80045c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f2:	461a      	mov	r2, r3
 80024f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80024fa:	e2ba      	b.n	8002a72 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 811b 	bne.w	800274a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d019      	beq.n	8002550 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3348      	adds	r3, #72	; 0x48
 800252a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	0159      	lsls	r1, r3, #5
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	440b      	add	r3, r1
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800253e:	1ad2      	subs	r2, r2, r3
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	202c      	movs	r0, #44	; 0x2c
 8002546:	fb00 f303 	mul.w	r3, r0, r3
 800254a:	440b      	add	r3, r1
 800254c:	3350      	adds	r3, #80	; 0x50
 800254e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3361      	adds	r3, #97	; 0x61
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	335c      	adds	r3, #92	; 0x5c
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	461a      	mov	r2, r3
 8002582:	2301      	movs	r3, #1
 8002584:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	333f      	adds	r3, #63	; 0x3f
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	333f      	adds	r3, #63	; 0x3f
 80025a8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d121      	bne.n	80025f2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	0151      	lsls	r1, r2, #5
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	440a      	add	r2, r1
 80025c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 fff5 	bl	80045c8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	461a      	mov	r2, r3
 80025ec:	2310      	movs	r3, #16
 80025ee:	6093      	str	r3, [r2, #8]
 80025f0:	e066      	b.n	80026c0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	333f      	adds	r3, #63	; 0x3f
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d127      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	0151      	lsls	r1, r2, #5
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	440a      	add	r2, r1
 800261c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002620:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002624:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	3360      	adds	r3, #96	; 0x60
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	b2d9      	uxtb	r1, r3
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	202c      	movs	r0, #44	; 0x2c
 8002642:	fb00 f303 	mul.w	r3, r0, r3
 8002646:	4413      	add	r3, r2
 8002648:	3360      	adds	r3, #96	; 0x60
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f002 fa25 	bl	8004a9e <HAL_HCD_HC_NotifyURBChange_Callback>
 8002654:	e034      	b.n	80026c0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	333f      	adds	r3, #63	; 0x3f
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d12a      	bne.n	80026c0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3360      	adds	r3, #96	; 0x60
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3354      	adds	r3, #84	; 0x54
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	f083 0301 	eor.w	r3, r3, #1
 8002690:	b2d8      	uxtb	r0, r3
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3354      	adds	r3, #84	; 0x54
 80026a0:	4602      	mov	r2, r0
 80026a2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	b2d9      	uxtb	r1, r3
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	202c      	movs	r0, #44	; 0x2c
 80026ae:	fb00 f303 	mul.w	r3, r0, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3360      	adds	r3, #96	; 0x60
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f002 f9ef 	bl	8004a9e <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d12b      	bne.n	8002720 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3348      	adds	r3, #72	; 0x48
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	202c      	movs	r0, #44	; 0x2c
 80026de:	fb00 f202 	mul.w	r2, r0, r2
 80026e2:	440a      	add	r2, r1
 80026e4:	3240      	adds	r2, #64	; 0x40
 80026e6:	8812      	ldrh	r2, [r2, #0]
 80026e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 81be 	beq.w	8002a72 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3354      	adds	r3, #84	; 0x54
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	f083 0301 	eor.w	r3, r3, #1
 800270a:	b2d8      	uxtb	r0, r3
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	212c      	movs	r1, #44	; 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	3354      	adds	r3, #84	; 0x54
 800271a:	4602      	mov	r2, r0
 800271c:	701a      	strb	r2, [r3, #0]
}
 800271e:	e1a8      	b.n	8002a72 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3354      	adds	r3, #84	; 0x54
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	f083 0301 	eor.w	r3, r3, #1
 8002734:	b2d8      	uxtb	r0, r3
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3354      	adds	r3, #84	; 0x54
 8002744:	4602      	mov	r2, r0
 8002746:	701a      	strb	r2, [r3, #0]
}
 8002748:	e193      	b.n	8002a72 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b02      	cmp	r3, #2
 800275e:	f040 8106 	bne.w	800296e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	0151      	lsls	r1, r2, #5
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	440a      	add	r2, r1
 8002778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277c:	f023 0302 	bic.w	r3, r3, #2
 8002780:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	3361      	adds	r3, #97	; 0x61
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d109      	bne.n	80027aa <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	3360      	adds	r3, #96	; 0x60
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e0c9      	b.n	800293e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	3361      	adds	r3, #97	; 0x61
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d109      	bne.n	80027d2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	3360      	adds	r3, #96	; 0x60
 80027cc:	2205      	movs	r2, #5
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e0b5      	b.n	800293e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3361      	adds	r3, #97	; 0x61
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b06      	cmp	r3, #6
 80027e4:	d009      	beq.n	80027fa <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	3361      	adds	r3, #97	; 0x61
 80027f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d150      	bne.n	800289c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	335c      	adds	r3, #92	; 0x5c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	202c      	movs	r0, #44	; 0x2c
 8002812:	fb00 f303 	mul.w	r3, r0, r3
 8002816:	440b      	add	r3, r1
 8002818:	335c      	adds	r3, #92	; 0x5c
 800281a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	335c      	adds	r3, #92	; 0x5c
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d912      	bls.n	8002856 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	335c      	adds	r3, #92	; 0x5c
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3360      	adds	r3, #96	; 0x60
 8002850:	2204      	movs	r2, #4
 8002852:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002854:	e073      	b.n	800293e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	3360      	adds	r3, #96	; 0x60
 8002864:	2202      	movs	r2, #2
 8002866:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800287e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002886:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800289a:	e050      	b.n	800293e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3361      	adds	r3, #97	; 0x61
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d122      	bne.n	80028f6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3360      	adds	r3, #96	; 0x60
 80028be:	2202      	movs	r2, #2
 80028c0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028d8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028e0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	e023      	b.n	800293e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	3361      	adds	r3, #97	; 0x61
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b07      	cmp	r3, #7
 8002908:	d119      	bne.n	800293e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	335c      	adds	r3, #92	; 0x5c
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	202c      	movs	r0, #44	; 0x2c
 8002922:	fb00 f303 	mul.w	r3, r0, r3
 8002926:	440b      	add	r3, r1
 8002928:	335c      	adds	r3, #92	; 0x5c
 800292a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3360      	adds	r3, #96	; 0x60
 800293a:	2204      	movs	r2, #4
 800293c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	461a      	mov	r2, r3
 800294c:	2302      	movs	r3, #2
 800294e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	b2d9      	uxtb	r1, r3
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	202c      	movs	r0, #44	; 0x2c
 800295a:	fb00 f303 	mul.w	r3, r0, r3
 800295e:	4413      	add	r3, r2
 8002960:	3360      	adds	r3, #96	; 0x60
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f002 f899 	bl	8004a9e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800296c:	e081      	b.n	8002a72 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b10      	cmp	r3, #16
 8002982:	d176      	bne.n	8002a72 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	333f      	adds	r3, #63	; 0x3f
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d121      	bne.n	80029dc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	335c      	adds	r3, #92	; 0x5c
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	0151      	lsls	r1, r2, #5
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	440a      	add	r2, r1
 80029c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 fdf7 	bl	80045c8 <USB_HC_Halt>
 80029da:	e041      	b.n	8002a60 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	333f      	adds	r3, #63	; 0x3f
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	333f      	adds	r3, #63	; 0x3f
 80029fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d12d      	bne.n	8002a60 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	335c      	adds	r3, #92	; 0x5c
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d120      	bne.n	8002a60 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3361      	adds	r3, #97	; 0x61
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	0151      	lsls	r1, r2, #5
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	440a      	add	r2, r1
 8002a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 fdb4 	bl	80045c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2310      	movs	r3, #16
 8002a70:	6093      	str	r3, [r2, #8]
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b088      	sub	sp, #32
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d119      	bne.n	8002ade <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2304      	movs	r3, #4
 8002aba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	0151      	lsls	r1, r2, #5
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	440a      	add	r2, r1
 8002ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ad6:	f043 0302 	orr.w	r3, r3, #2
 8002ada:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002adc:	e3ca      	b.n	8003274 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d13e      	bne.n	8002b72 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	461a      	mov	r2, r3
 8002b02:	2320      	movs	r3, #32
 8002b04:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	212c      	movs	r1, #44	; 0x2c
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	333d      	adds	r3, #61	; 0x3d
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	f040 83ac 	bne.w	8003274 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	333d      	adds	r3, #61	; 0x3d
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3360      	adds	r3, #96	; 0x60
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	0151      	lsls	r1, r2, #5
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	440a      	add	r2, r1
 8002b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 fd2c 	bl	80045c8 <USB_HC_Halt>
}
 8002b70:	e380      	b.n	8003274 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b88:	d122      	bne.n	8002bd0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	0151      	lsls	r1, r2, #5
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	440a      	add	r2, r1
 8002ba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 fd07 	bl	80045c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bcc:	6093      	str	r3, [r2, #8]
}
 8002bce:	e351      	b.n	8003274 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d150      	bne.n	8002c88 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	335c      	adds	r3, #92	; 0x5c
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d111      	bne.n	8002c32 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	333d      	adds	r3, #61	; 0x3d
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	2340      	movs	r3, #64	; 0x40
 8002c30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	0151      	lsls	r1, r2, #5
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	440a      	add	r2, r1
 8002c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 fcb3 	bl	80045c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2301      	movs	r3, #1
 8002c72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3361      	adds	r3, #97	; 0x61
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
}
 8002c86:	e2f5      	b.n	8003274 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d13c      	bne.n	8002d18 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3361      	adds	r3, #97	; 0x61
 8002cac:	2204      	movs	r2, #4
 8002cae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	333d      	adds	r3, #61	; 0x3d
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	335c      	adds	r3, #92	; 0x5c
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	0151      	lsls	r1, r2, #5
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	440a      	add	r2, r1
 8002cea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cee:	f043 0302 	orr.w	r3, r3, #2
 8002cf2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 fc62 	bl	80045c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d10:	461a      	mov	r2, r3
 8002d12:	2340      	movs	r3, #64	; 0x40
 8002d14:	6093      	str	r3, [r2, #8]
}
 8002d16:	e2ad      	b.n	8003274 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d12a      	bne.n	8002d84 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	0151      	lsls	r1, r2, #5
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	440a      	add	r2, r1
 8002d56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d5a:	f043 0302 	orr.w	r3, r3, #2
 8002d5e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 fc2c 	bl	80045c8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3361      	adds	r3, #97	; 0x61
 8002d7e:	2205      	movs	r2, #5
 8002d80:	701a      	strb	r2, [r3, #0]
}
 8002d82:	e277      	b.n	8003274 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d150      	bne.n	8002e3c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	335c      	adds	r3, #92	; 0x5c
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3361      	adds	r3, #97	; 0x61
 8002dba:	2203      	movs	r2, #3
 8002dbc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	333d      	adds	r3, #61	; 0x3d
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d112      	bne.n	8002df8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	333c      	adds	r3, #60	; 0x3c
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d108      	bne.n	8002df8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	333d      	adds	r3, #61	; 0x3d
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	0151      	lsls	r1, r2, #5
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	440a      	add	r2, r1
 8002e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e12:	f043 0302 	orr.w	r3, r3, #2
 8002e16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 fbd0 	bl	80045c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	2310      	movs	r3, #16
 8002e38:	6093      	str	r3, [r2, #8]
}
 8002e3a:	e21b      	b.n	8003274 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b80      	cmp	r3, #128	; 0x80
 8002e50:	d174      	bne.n	8002f3c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d121      	bne.n	8002e9e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	3361      	adds	r3, #97	; 0x61
 8002e68:	2206      	movs	r2, #6
 8002e6a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	0151      	lsls	r1, r2, #5
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	440a      	add	r2, r1
 8002e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 fb96 	bl	80045c8 <USB_HC_Halt>
 8002e9c:	e044      	b.n	8002f28 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	335c      	adds	r3, #92	; 0x5c
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	202c      	movs	r0, #44	; 0x2c
 8002eb6:	fb00 f303 	mul.w	r3, r0, r3
 8002eba:	440b      	add	r3, r1
 8002ebc:	335c      	adds	r3, #92	; 0x5c
 8002ebe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	335c      	adds	r3, #92	; 0x5c
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d920      	bls.n	8002f16 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	335c      	adds	r3, #92	; 0x5c
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3360      	adds	r3, #96	; 0x60
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	b2d9      	uxtb	r1, r3
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	202c      	movs	r0, #44	; 0x2c
 8002f02:	fb00 f303 	mul.w	r3, r0, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3360      	adds	r3, #96	; 0x60
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f001 fdc5 	bl	8004a9e <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f14:	e008      	b.n	8002f28 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3360      	adds	r3, #96	; 0x60
 8002f24:	2202      	movs	r2, #2
 8002f26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	461a      	mov	r2, r3
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	6093      	str	r3, [r2, #8]
}
 8002f3a:	e19b      	b.n	8003274 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f52:	d134      	bne.n	8002fbe <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	0151      	lsls	r1, r2, #5
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	440a      	add	r2, r1
 8002f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f6e:	f043 0302 	orr.w	r3, r3, #2
 8002f72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 fb22 	bl	80045c8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f90:	461a      	mov	r2, r3
 8002f92:	2310      	movs	r3, #16
 8002f94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3361      	adds	r3, #97	; 0x61
 8002fb8:	2208      	movs	r2, #8
 8002fba:	701a      	strb	r2, [r3, #0]
}
 8002fbc:	e15a      	b.n	8003274 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	f040 814f 	bne.w	8003274 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	0151      	lsls	r1, r2, #5
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	440a      	add	r2, r1
 8002fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ff0:	f023 0302 	bic.w	r3, r3, #2
 8002ff4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	212c      	movs	r1, #44	; 0x2c
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	3361      	adds	r3, #97	; 0x61
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d17d      	bne.n	8003106 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	3360      	adds	r3, #96	; 0x60
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	333f      	adds	r3, #63	; 0x3f
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d00a      	beq.n	8003046 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	333f      	adds	r3, #63	; 0x3f
 800303e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003040:	2b03      	cmp	r3, #3
 8003042:	f040 8100 	bne.w	8003246 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d113      	bne.n	8003076 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3355      	adds	r3, #85	; 0x55
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	f083 0301 	eor.w	r3, r3, #1
 8003062:	b2d8      	uxtb	r0, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	3355      	adds	r3, #85	; 0x55
 8003072:	4602      	mov	r2, r0
 8003074:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b01      	cmp	r3, #1
 800307c:	f040 80e3 	bne.w	8003246 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	212c      	movs	r1, #44	; 0x2c
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	4413      	add	r3, r2
 800308c:	334c      	adds	r3, #76	; 0x4c
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80d8 	beq.w	8003246 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	334c      	adds	r3, #76	; 0x4c
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	202c      	movs	r0, #44	; 0x2c
 80030ac:	fb00 f202 	mul.w	r2, r0, r2
 80030b0:	440a      	add	r2, r1
 80030b2:	3240      	adds	r2, #64	; 0x40
 80030b4:	8812      	ldrh	r2, [r2, #0]
 80030b6:	4413      	add	r3, r2
 80030b8:	3b01      	subs	r3, #1
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	202c      	movs	r0, #44	; 0x2c
 80030c0:	fb00 f202 	mul.w	r2, r0, r2
 80030c4:	440a      	add	r2, r1
 80030c6:	3240      	adds	r2, #64	; 0x40
 80030c8:	8812      	ldrh	r2, [r2, #0]
 80030ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80b5 	beq.w	8003246 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3355      	adds	r3, #85	; 0x55
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	f083 0301 	eor.w	r3, r3, #1
 80030f0:	b2d8      	uxtb	r0, r3
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3355      	adds	r3, #85	; 0x55
 8003100:	4602      	mov	r2, r0
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e09f      	b.n	8003246 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	212c      	movs	r1, #44	; 0x2c
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	3361      	adds	r3, #97	; 0x61
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d109      	bne.n	800312e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	212c      	movs	r1, #44	; 0x2c
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	3360      	adds	r3, #96	; 0x60
 8003128:	2202      	movs	r2, #2
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e08b      	b.n	8003246 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	3361      	adds	r3, #97	; 0x61
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b04      	cmp	r3, #4
 8003140:	d109      	bne.n	8003156 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	3360      	adds	r3, #96	; 0x60
 8003150:	2202      	movs	r2, #2
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e077      	b.n	8003246 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3361      	adds	r3, #97	; 0x61
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b05      	cmp	r3, #5
 8003168:	d109      	bne.n	800317e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	3360      	adds	r3, #96	; 0x60
 8003178:	2205      	movs	r2, #5
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e063      	b.n	8003246 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	3361      	adds	r3, #97	; 0x61
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b06      	cmp	r3, #6
 8003190:	d009      	beq.n	80031a6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3361      	adds	r3, #97	; 0x61
 80031a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d14f      	bne.n	8003246 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	212c      	movs	r1, #44	; 0x2c
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	335c      	adds	r3, #92	; 0x5c
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	202c      	movs	r0, #44	; 0x2c
 80031be:	fb00 f303 	mul.w	r3, r0, r3
 80031c2:	440b      	add	r3, r1
 80031c4:	335c      	adds	r3, #92	; 0x5c
 80031c6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	335c      	adds	r3, #92	; 0x5c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d912      	bls.n	8003202 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	212c      	movs	r1, #44	; 0x2c
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	4413      	add	r3, r2
 80031e8:	335c      	adds	r3, #92	; 0x5c
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	3360      	adds	r3, #96	; 0x60
 80031fc:	2204      	movs	r2, #4
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e021      	b.n	8003246 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3360      	adds	r3, #96	; 0x60
 8003210:	2202      	movs	r2, #2
 8003212:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800322a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003232:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003240:	461a      	mov	r2, r3
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	4413      	add	r3, r2
 800324e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003252:	461a      	mov	r2, r3
 8003254:	2302      	movs	r3, #2
 8003256:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	b2d9      	uxtb	r1, r3
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	202c      	movs	r0, #44	; 0x2c
 8003262:	fb00 f303 	mul.w	r3, r0, r3
 8003266:	4413      	add	r3, r2
 8003268:	3360      	adds	r3, #96	; 0x60
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f001 fc15 	bl	8004a9e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003274:	bf00      	nop
 8003276:	3720      	adds	r7, #32
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	0c5b      	lsrs	r3, r3, #17
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032b0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d004      	beq.n	80032c2 <HCD_RXQLVL_IRQHandler+0x46>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	f000 80a9 	beq.w	8003412 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80032c0:	e0aa      	b.n	8003418 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80a6 	beq.w	8003416 <HCD_RXQLVL_IRQHandler+0x19a>
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	3344      	adds	r3, #68	; 0x44
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 809b 	beq.w	8003416 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	3350      	adds	r3, #80	; 0x50
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	441a      	add	r2, r3
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	202c      	movs	r0, #44	; 0x2c
 80032fa:	fb00 f303 	mul.w	r3, r0, r3
 80032fe:	440b      	add	r3, r1
 8003300:	334c      	adds	r3, #76	; 0x4c
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d87a      	bhi.n	80033fe <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	3344      	adds	r3, #68	; 0x44
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	b292      	uxth	r2, r2
 8003320:	4619      	mov	r1, r3
 8003322:	f001 f88d 	bl	8004440 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	3344      	adds	r3, #68	; 0x44
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	441a      	add	r2, r3
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	202c      	movs	r0, #44	; 0x2c
 8003340:	fb00 f303 	mul.w	r3, r0, r3
 8003344:	440b      	add	r3, r1
 8003346:	3344      	adds	r3, #68	; 0x44
 8003348:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	3350      	adds	r3, #80	; 0x50
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	441a      	add	r2, r3
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	202c      	movs	r0, #44	; 0x2c
 8003364:	fb00 f303 	mul.w	r3, r0, r3
 8003368:	440b      	add	r3, r1
 800336a:	3350      	adds	r3, #80	; 0x50
 800336c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	0cdb      	lsrs	r3, r3, #19
 800337e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003382:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3340      	adds	r3, #64	; 0x40
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4293      	cmp	r3, r2
 800339a:	d13c      	bne.n	8003416 <HCD_RXQLVL_IRQHandler+0x19a>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d039      	beq.n	8003416 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033b8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033c0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	461a      	mov	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3354      	adds	r3, #84	; 0x54
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	f083 0301 	eor.w	r3, r3, #1
 80033e8:	b2d8      	uxtb	r0, r3
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3354      	adds	r3, #84	; 0x54
 80033f8:	4602      	mov	r2, r0
 80033fa:	701a      	strb	r2, [r3, #0]
      break;
 80033fc:	e00b      	b.n	8003416 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	212c      	movs	r1, #44	; 0x2c
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	3360      	adds	r3, #96	; 0x60
 800340c:	2204      	movs	r2, #4
 800340e:	701a      	strb	r2, [r3, #0]
      break;
 8003410:	e001      	b.n	8003416 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003412:	bf00      	nop
 8003414:	e000      	b.n	8003418 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003416:	bf00      	nop
  }
}
 8003418:	bf00      	nop
 800341a:	3728      	adds	r7, #40	; 0x28
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800344c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b02      	cmp	r3, #2
 8003456:	d10b      	bne.n	8003470 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f001 faff 	bl	8004a66 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f043 0302 	orr.w	r3, r3, #2
 800346e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b08      	cmp	r3, #8
 8003478:	d132      	bne.n	80034e0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f043 0308 	orr.w	r3, r3, #8
 8003480:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b04      	cmp	r3, #4
 800348a:	d126      	bne.n	80034da <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d113      	bne.n	80034bc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800349a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800349e:	d106      	bne.n	80034ae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2102      	movs	r1, #2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 f843 	bl	8004532 <USB_InitFSLSPClkSel>
 80034ac:	e011      	b.n	80034d2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 f83c 	bl	8004532 <USB_InitFSLSPClkSel>
 80034ba:	e00a      	b.n	80034d2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d106      	bne.n	80034d2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ca:	461a      	mov	r2, r3
 80034cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034d0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f001 faf1 	bl	8004aba <HAL_HCD_PortEnabled_Callback>
 80034d8:	e002      	b.n	80034e0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f001 fafb 	bl	8004ad6 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d103      	bne.n	80034f2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f043 0320 	orr.w	r3, r3, #32
 80034f0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034f8:	461a      	mov	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	6013      	str	r3, [r2, #0]
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e264      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d075      	beq.n	8003612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003526:	4ba3      	ldr	r3, [pc, #652]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b04      	cmp	r3, #4
 8003530:	d00c      	beq.n	800354c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003532:	4ba0      	ldr	r3, [pc, #640]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353a:	2b08      	cmp	r3, #8
 800353c:	d112      	bne.n	8003564 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353e:	4b9d      	ldr	r3, [pc, #628]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800354a:	d10b      	bne.n	8003564 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800354c:	4b99      	ldr	r3, [pc, #612]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d05b      	beq.n	8003610 <HAL_RCC_OscConfig+0x108>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d157      	bne.n	8003610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e23f      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356c:	d106      	bne.n	800357c <HAL_RCC_OscConfig+0x74>
 800356e:	4b91      	ldr	r3, [pc, #580]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a90      	ldr	r2, [pc, #576]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e01d      	b.n	80035b8 <HAL_RCC_OscConfig+0xb0>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x98>
 8003586:	4b8b      	ldr	r3, [pc, #556]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a8a      	ldr	r2, [pc, #552]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4b88      	ldr	r3, [pc, #544]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a87      	ldr	r2, [pc, #540]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e00b      	b.n	80035b8 <HAL_RCC_OscConfig+0xb0>
 80035a0:	4b84      	ldr	r3, [pc, #528]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a83      	ldr	r2, [pc, #524]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b81      	ldr	r3, [pc, #516]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a80      	ldr	r2, [pc, #512]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 80035b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d013      	beq.n	80035e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fe fa2e 	bl	8001a20 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fe fa2a 	bl	8001a20 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e204      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	4b76      	ldr	r3, [pc, #472]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0xc0>
 80035e6:	e014      	b.n	8003612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7fe fa1a 	bl	8001a20 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fe fa16 	bl	8001a20 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e1f0      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003602:	4b6c      	ldr	r3, [pc, #432]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0xe8>
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d063      	beq.n	80036e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800361e:	4b65      	ldr	r3, [pc, #404]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362a:	4b62      	ldr	r3, [pc, #392]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003632:	2b08      	cmp	r3, #8
 8003634:	d11c      	bne.n	8003670 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003636:	4b5f      	ldr	r3, [pc, #380]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d116      	bne.n	8003670 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	4b5c      	ldr	r3, [pc, #368]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_RCC_OscConfig+0x152>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d001      	beq.n	800365a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e1c4      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365a:	4b56      	ldr	r3, [pc, #344]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4952      	ldr	r1, [pc, #328]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	e03a      	b.n	80036e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003678:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <HAL_RCC_OscConfig+0x2b0>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fe f9cf 	bl	8001a20 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003686:	f7fe f9cb 	bl	8001a20 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1a5      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	4b46      	ldr	r3, [pc, #280]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	4b43      	ldr	r3, [pc, #268]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4940      	ldr	r1, [pc, #256]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]
 80036b8:	e015      	b.n	80036e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ba:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <HAL_RCC_OscConfig+0x2b0>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe f9ae 	bl	8001a20 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c8:	f7fe f9aa 	bl	8001a20 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e184      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d030      	beq.n	8003754 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d016      	beq.n	8003728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fa:	4b30      	ldr	r3, [pc, #192]	; (80037bc <HAL_RCC_OscConfig+0x2b4>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7fe f98e 	bl	8001a20 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003708:	f7fe f98a 	bl	8001a20 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e164      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 800371c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x200>
 8003726:	e015      	b.n	8003754 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003728:	4b24      	ldr	r3, [pc, #144]	; (80037bc <HAL_RCC_OscConfig+0x2b4>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372e:	f7fe f977 	bl	8001a20 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003736:	f7fe f973 	bl	8001a20 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e14d      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 800374a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80a0 	beq.w	80038a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003766:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10f      	bne.n	8003792 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	4a0e      	ldr	r2, [pc, #56]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003780:	6413      	str	r3, [r2, #64]	; 0x40
 8003782:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_OscConfig+0x2b8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d121      	bne.n	80037e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379e:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <HAL_RCC_OscConfig+0x2b8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <HAL_RCC_OscConfig+0x2b8>)
 80037a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037aa:	f7fe f939 	bl	8001a20 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b0:	e011      	b.n	80037d6 <HAL_RCC_OscConfig+0x2ce>
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
 80037b8:	42470000 	.word	0x42470000
 80037bc:	42470e80 	.word	0x42470e80
 80037c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c4:	f7fe f92c 	bl	8001a20 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e106      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d6:	4b85      	ldr	r3, [pc, #532]	; (80039ec <HAL_RCC_OscConfig+0x4e4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d106      	bne.n	80037f8 <HAL_RCC_OscConfig+0x2f0>
 80037ea:	4b81      	ldr	r3, [pc, #516]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	4a80      	ldr	r2, [pc, #512]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70
 80037f6:	e01c      	b.n	8003832 <HAL_RCC_OscConfig+0x32a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d10c      	bne.n	800381a <HAL_RCC_OscConfig+0x312>
 8003800:	4b7b      	ldr	r3, [pc, #492]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a7a      	ldr	r2, [pc, #488]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	4b78      	ldr	r3, [pc, #480]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a77      	ldr	r2, [pc, #476]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
 8003818:	e00b      	b.n	8003832 <HAL_RCC_OscConfig+0x32a>
 800381a:	4b75      	ldr	r3, [pc, #468]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a74      	ldr	r2, [pc, #464]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	4b72      	ldr	r3, [pc, #456]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	4a71      	ldr	r2, [pc, #452]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 800382c:	f023 0304 	bic.w	r3, r3, #4
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d015      	beq.n	8003866 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fe f8f1 	bl	8001a20 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fe f8ed 	bl	8001a20 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e0c5      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003858:	4b65      	ldr	r3, [pc, #404]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ee      	beq.n	8003842 <HAL_RCC_OscConfig+0x33a>
 8003864:	e014      	b.n	8003890 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003866:	f7fe f8db 	bl	8001a20 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fe f8d7 	bl	8001a20 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0af      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003884:	4b5a      	ldr	r3, [pc, #360]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1ee      	bne.n	800386e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d105      	bne.n	80038a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003896:	4b56      	ldr	r3, [pc, #344]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	4a55      	ldr	r2, [pc, #340]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 800389c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 809b 	beq.w	80039e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ac:	4b50      	ldr	r3, [pc, #320]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d05c      	beq.n	8003972 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d141      	bne.n	8003944 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c0:	4b4c      	ldr	r3, [pc, #304]	; (80039f4 <HAL_RCC_OscConfig+0x4ec>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c6:	f7fe f8ab 	bl	8001a20 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fe f8a7 	bl	8001a20 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e081      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e0:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	019b      	lsls	r3, r3, #6
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	3b01      	subs	r3, #1
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	061b      	lsls	r3, r3, #24
 8003910:	4937      	ldr	r1, [pc, #220]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003916:	4b37      	ldr	r3, [pc, #220]	; (80039f4 <HAL_RCC_OscConfig+0x4ec>)
 8003918:	2201      	movs	r2, #1
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fe f880 	bl	8001a20 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003924:	f7fe f87c 	bl	8001a20 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e056      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003936:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0x41c>
 8003942:	e04e      	b.n	80039e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003944:	4b2b      	ldr	r3, [pc, #172]	; (80039f4 <HAL_RCC_OscConfig+0x4ec>)
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394a:	f7fe f869 	bl	8001a20 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003952:	f7fe f865 	bl	8001a20 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e03f      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003964:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f0      	bne.n	8003952 <HAL_RCC_OscConfig+0x44a>
 8003970:	e037      	b.n	80039e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e032      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800397e:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <HAL_RCC_OscConfig+0x4e8>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d028      	beq.n	80039de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d121      	bne.n	80039de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d11a      	bne.n	80039de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039ae:	4013      	ands	r3, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d111      	bne.n	80039de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	3b01      	subs	r3, #1
 80039c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d107      	bne.n	80039de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d001      	beq.n	80039e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40007000 	.word	0x40007000
 80039f0:	40023800 	.word	0x40023800
 80039f4:	42470060 	.word	0x42470060

080039f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0cc      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b68      	ldr	r3, [pc, #416]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d90c      	bls.n	8003a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b65      	ldr	r3, [pc, #404]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b63      	ldr	r3, [pc, #396]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0b8      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d020      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a4c:	4b59      	ldr	r3, [pc, #356]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4a58      	ldr	r2, [pc, #352]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a64:	4b53      	ldr	r3, [pc, #332]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a52      	ldr	r2, [pc, #328]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a70:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	494d      	ldr	r1, [pc, #308]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d044      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	4b47      	ldr	r3, [pc, #284]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d119      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e07f      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d107      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab6:	4b3f      	ldr	r3, [pc, #252]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e06f      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac6:	4b3b      	ldr	r3, [pc, #236]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e067      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad6:	4b37      	ldr	r3, [pc, #220]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f023 0203 	bic.w	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4934      	ldr	r1, [pc, #208]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae8:	f7fd ff9a 	bl	8001a20 <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af0:	f7fd ff96 	bl	8001a20 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e04f      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b06:	4b2b      	ldr	r3, [pc, #172]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 020c 	and.w	r2, r3, #12
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d1eb      	bne.n	8003af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b18:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d20c      	bcs.n	8003b40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e032      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b4c:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4916      	ldr	r1, [pc, #88]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	490e      	ldr	r1, [pc, #56]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b7e:	f000 f821 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003b82:	4602      	mov	r2, r0
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	490a      	ldr	r1, [pc, #40]	; (8003bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b90:	5ccb      	ldrb	r3, [r1, r3]
 8003b92:	fa22 f303 	lsr.w	r3, r2, r3
 8003b96:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fd fefa 	bl	8001998 <HAL_InitTick>

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023c00 	.word	0x40023c00
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	08004c24 	.word	0x08004c24
 8003bbc:	20000050 	.word	0x20000050
 8003bc0:	20000054 	.word	0x20000054

08003bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	607b      	str	r3, [r7, #4]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bdc:	4b67      	ldr	r3, [pc, #412]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d00d      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0x40>
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	f200 80bd 	bhi.w	8003d68 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8003bf6:	e0b7      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4b61      	ldr	r3, [pc, #388]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003bfa:	60bb      	str	r3, [r7, #8]
       break;
 8003bfc:	e0b7      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bfe:	4b61      	ldr	r3, [pc, #388]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003c00:	60bb      	str	r3, [r7, #8]
      break;
 8003c02:	e0b4      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c04:	4b5d      	ldr	r3, [pc, #372]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c0e:	4b5b      	ldr	r3, [pc, #364]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d04d      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1a:	4b58      	ldr	r3, [pc, #352]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	099b      	lsrs	r3, r3, #6
 8003c20:	461a      	mov	r2, r3
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	ea02 0800 	and.w	r8, r2, r0
 8003c32:	ea03 0901 	and.w	r9, r3, r1
 8003c36:	4640      	mov	r0, r8
 8003c38:	4649      	mov	r1, r9
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	014b      	lsls	r3, r1, #5
 8003c44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c48:	0142      	lsls	r2, r0, #5
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	ebb0 0008 	subs.w	r0, r0, r8
 8003c52:	eb61 0109 	sbc.w	r1, r1, r9
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	018b      	lsls	r3, r1, #6
 8003c60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c64:	0182      	lsls	r2, r0, #6
 8003c66:	1a12      	subs	r2, r2, r0
 8003c68:	eb63 0301 	sbc.w	r3, r3, r1
 8003c6c:	f04f 0000 	mov.w	r0, #0
 8003c70:	f04f 0100 	mov.w	r1, #0
 8003c74:	00d9      	lsls	r1, r3, #3
 8003c76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c7a:	00d0      	lsls	r0, r2, #3
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	eb12 0208 	adds.w	r2, r2, r8
 8003c84:	eb43 0309 	adc.w	r3, r3, r9
 8003c88:	f04f 0000 	mov.w	r0, #0
 8003c8c:	f04f 0100 	mov.w	r1, #0
 8003c90:	0259      	lsls	r1, r3, #9
 8003c92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c96:	0250      	lsls	r0, r2, #9
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	f7fc faa0 	bl	80001ec <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e04a      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb6:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	ea02 0400 	and.w	r4, r2, r0
 8003cce:	ea03 0501 	and.w	r5, r3, r1
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	014b      	lsls	r3, r1, #5
 8003ce0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ce4:	0142      	lsls	r2, r0, #5
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	1b00      	subs	r0, r0, r4
 8003cec:	eb61 0105 	sbc.w	r1, r1, r5
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	018b      	lsls	r3, r1, #6
 8003cfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cfe:	0182      	lsls	r2, r0, #6
 8003d00:	1a12      	subs	r2, r2, r0
 8003d02:	eb63 0301 	sbc.w	r3, r3, r1
 8003d06:	f04f 0000 	mov.w	r0, #0
 8003d0a:	f04f 0100 	mov.w	r1, #0
 8003d0e:	00d9      	lsls	r1, r3, #3
 8003d10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d14:	00d0      	lsls	r0, r2, #3
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	1912      	adds	r2, r2, r4
 8003d1c:	eb45 0303 	adc.w	r3, r5, r3
 8003d20:	f04f 0000 	mov.w	r0, #0
 8003d24:	f04f 0100 	mov.w	r1, #0
 8003d28:	0299      	lsls	r1, r3, #10
 8003d2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d2e:	0290      	lsls	r0, r2, #10
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4610      	mov	r0, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	f7fc fa54 	bl	80001ec <__aeabi_uldivmod>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4613      	mov	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0c1b      	lsrs	r3, r3, #16
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	60bb      	str	r3, [r7, #8]
      break;
 8003d66:	e002      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d6a:	60bb      	str	r3, [r7, #8]
      break;
 8003d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	00f42400 	.word	0x00f42400
 8003d84:	007a1200 	.word	0x007a1200

08003d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e07b      	b.n	8003e92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d108      	bne.n	8003db4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003daa:	d009      	beq.n	8003dc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	61da      	str	r2, [r3, #28]
 8003db2:	e005      	b.n	8003dc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd fd02 	bl	80017e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e44:	ea42 0103 	orr.w	r1, r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	0c1b      	lsrs	r3, r3, #16
 8003e5e:	f003 0104 	and.w	r1, r3, #4
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	f003 0210 	and.w	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b08c      	sub	sp, #48	; 0x30
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x26>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e18a      	b.n	80041d6 <HAL_SPI_TransmitReceive+0x33c>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ec8:	f7fd fdaa 	bl	8001a20 <HAL_GetTick>
 8003ecc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ede:	887b      	ldrh	r3, [r7, #2]
 8003ee0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ee2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d00f      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0x70>
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef0:	d107      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <HAL_SPI_TransmitReceive+0x68>
 8003efa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d003      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
 8003f04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f08:	e15b      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_SPI_TransmitReceive+0x82>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_SPI_TransmitReceive+0x82>
 8003f16:	887b      	ldrh	r3, [r7, #2]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f22:	e14e      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d003      	beq.n	8003f38 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2205      	movs	r2, #5
 8003f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	887a      	ldrh	r2, [r7, #2]
 8003f4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	887a      	ldrh	r2, [r7, #2]
 8003f5a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b40      	cmp	r3, #64	; 0x40
 8003f7a:	d007      	beq.n	8003f8c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f94:	d178      	bne.n	8004088 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_SPI_TransmitReceive+0x10a>
 8003f9e:	8b7b      	ldrh	r3, [r7, #26]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d166      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	881a      	ldrh	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	1c9a      	adds	r2, r3, #2
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fc8:	e053      	b.n	8004072 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d11b      	bne.n	8004010 <HAL_SPI_TransmitReceive+0x176>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d016      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x176>
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d113      	bne.n	8004010 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	881a      	ldrh	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	1c9a      	adds	r2, r3, #2
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b01      	cmp	r3, #1
 800401c:	d119      	bne.n	8004052 <HAL_SPI_TransmitReceive+0x1b8>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d014      	beq.n	8004052 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	b292      	uxth	r2, r2
 8004034:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	1c9a      	adds	r2, r3, #2
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800404e:	2301      	movs	r3, #1
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004052:	f7fd fce5 	bl	8001a20 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800405e:	429a      	cmp	r2, r3
 8004060:	d807      	bhi.n	8004072 <HAL_SPI_TransmitReceive+0x1d8>
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004068:	d003      	beq.n	8004072 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004070:	e0a7      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1a6      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x130>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1a1      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x130>
 8004086:	e07c      	b.n	8004182 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_SPI_TransmitReceive+0x1fc>
 8004090:	8b7b      	ldrh	r3, [r7, #26]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d16b      	bne.n	800416e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	330c      	adds	r3, #12
 80040a0:	7812      	ldrb	r2, [r2, #0]
 80040a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040bc:	e057      	b.n	800416e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d11c      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x26c>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d017      	beq.n	8004106 <HAL_SPI_TransmitReceive+0x26c>
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d114      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	7812      	ldrb	r2, [r2, #0]
 80040e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d119      	bne.n	8004148 <HAL_SPI_TransmitReceive+0x2ae>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d014      	beq.n	8004148 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004144:	2301      	movs	r3, #1
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004148:	f7fd fc6a 	bl	8001a20 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004154:	429a      	cmp	r2, r3
 8004156:	d803      	bhi.n	8004160 <HAL_SPI_TransmitReceive+0x2c6>
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800415e:	d102      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x2cc>
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800416c:	e029      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1a2      	bne.n	80040be <HAL_SPI_TransmitReceive+0x224>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d19d      	bne.n	80040be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004184:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f8b2 	bl	80042f0 <SPI_EndRxTxTransaction>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d006      	beq.n	80041a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800419e:	e010      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	e000      	b.n	80041c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80041c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3730      	adds	r7, #48	; 0x30
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041f0:	f7fd fc16 	bl	8001a20 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	4413      	add	r3, r2
 80041fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004200:	f7fd fc0e 	bl	8001a20 <HAL_GetTick>
 8004204:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	015b      	lsls	r3, r3, #5
 800420c:	0d1b      	lsrs	r3, r3, #20
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	fb02 f303 	mul.w	r3, r2, r3
 8004214:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004216:	e054      	b.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800421e:	d050      	beq.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004220:	f7fd fbfe 	bl	8001a20 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	429a      	cmp	r2, r3
 800422e:	d902      	bls.n	8004236 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d13d      	bne.n	80042b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800424e:	d111      	bne.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004258:	d004      	beq.n	8004264 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004262:	d107      	bne.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427c:	d10f      	bne.n	800429e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800429c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e017      	b.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	3b01      	subs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d19b      	bne.n	8004218 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000050 	.word	0x20000050

080042f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042fc:	4b1b      	ldr	r3, [pc, #108]	; (800436c <SPI_EndRxTxTransaction+0x7c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <SPI_EndRxTxTransaction+0x80>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	0d5b      	lsrs	r3, r3, #21
 8004308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800430c:	fb02 f303 	mul.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800431a:	d112      	bne.n	8004342 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2200      	movs	r2, #0
 8004324:	2180      	movs	r1, #128	; 0x80
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff ff5a 	bl	80041e0 <SPI_WaitFlagStateUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e00f      	b.n	8004362 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	3b01      	subs	r3, #1
 800434c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004358:	2b80      	cmp	r3, #128	; 0x80
 800435a:	d0f2      	beq.n	8004342 <SPI_EndRxTxTransaction+0x52>
 800435c:	e000      	b.n	8004360 <SPI_EndRxTxTransaction+0x70>
        break;
 800435e:	bf00      	nop
  }

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000050 	.word	0x20000050
 8004370:	165e9f81 	.word	0x165e9f81

08004374 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f043 0201 	orr.w	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f023 0201 	bic.w	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	019b      	lsls	r3, r3, #6
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	4a08      	ldr	r2, [pc, #32]	; (80043fc <USB_FlushTxFifo+0x44>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e006      	b.n	80043f0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d0f1      	beq.n	80043d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	00030d40 	.word	0x00030d40

08004400 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2210      	movs	r2, #16
 8004410:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3301      	adds	r3, #1
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	4a08      	ldr	r2, [pc, #32]	; (800443c <USB_FlushRxFifo+0x3c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e006      	b.n	8004430 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b10      	cmp	r3, #16
 800442c:	d0f1      	beq.n	8004412 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	00030d40 	.word	0x00030d40

08004440 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004440:	b480      	push	{r7}
 8004442:	b08b      	sub	sp, #44	; 0x2c
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	089b      	lsrs	r3, r3, #2
 800445a:	b29b      	uxth	r3, r3
 800445c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800445e:	88fb      	ldrh	r3, [r7, #6]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004466:	2300      	movs	r3, #0
 8004468:	623b      	str	r3, [r7, #32]
 800446a:	e014      	b.n	8004496 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	601a      	str	r2, [r3, #0]
    pDest++;
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	3301      	adds	r3, #1
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	3301      	adds	r3, #1
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	3301      	adds	r3, #1
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	3301      	adds	r3, #1
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	3301      	adds	r3, #1
 8004494:	623b      	str	r3, [r7, #32]
 8004496:	6a3a      	ldr	r2, [r7, #32]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	429a      	cmp	r2, r3
 800449c:	d3e6      	bcc.n	800446c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800449e:	8bfb      	ldrh	r3, [r7, #30]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01e      	beq.n	80044e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ae:	461a      	mov	r2, r3
 80044b0:	f107 0310 	add.w	r3, r7, #16
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	701a      	strb	r2, [r3, #0]
      i++;
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	3301      	adds	r3, #1
 80044ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	3301      	adds	r3, #1
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80044d6:	8bfb      	ldrh	r3, [r7, #30]
 80044d8:	3b01      	subs	r3, #1
 80044da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80044dc:	8bfb      	ldrh	r3, [r7, #30]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1ea      	bne.n	80044b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	372c      	adds	r7, #44	; 0x2c
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4013      	ands	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004508:	68fb      	ldr	r3, [r7, #12]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0301 	and.w	r3, r3, #1
}
 8004526:	4618      	mov	r0, r3
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004532:	b480      	push	{r7}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	460b      	mov	r3, r1
 800453c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004550:	f023 0303 	bic.w	r3, r3, #3
 8004554:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	68f9      	ldr	r1, [r7, #12]
 8004566:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800456e:	78fb      	ldrb	r3, [r7, #3]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d107      	bne.n	8004584 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800457a:	461a      	mov	r2, r3
 800457c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004580:	6053      	str	r3, [r2, #4]
 8004582:	e009      	b.n	8004598 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d106      	bne.n	8004598 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004590:	461a      	mov	r2, r3
 8004592:	f241 7370 	movw	r3, #6000	; 0x1770
 8004596:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b085      	sub	sp, #20
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	b29b      	uxth	r3, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b089      	sub	sp, #36	; 0x24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	0c9b      	lsrs	r3, r3, #18
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	0fdb      	lsrs	r3, r3, #31
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b20      	cmp	r3, #32
 8004616:	d104      	bne.n	8004622 <USB_HC_Halt+0x5a>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	e0e8      	b.n	80047f4 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <USB_HC_Halt+0x66>
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d173      	bne.n	8004716 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	4413      	add	r3, r2
 8004636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	0151      	lsls	r1, r2, #5
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	440a      	add	r2, r1
 8004644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004648:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800464c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	f040 80cb 	bne.w	80047f2 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d143      	bne.n	80046f0 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	4413      	add	r3, r2
 8004670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	0151      	lsls	r1, r2, #5
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	440a      	add	r2, r1
 800467e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004682:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004686:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	4413      	add	r3, r2
 8004690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	440a      	add	r2, r1
 800469e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046a6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046c6:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	3301      	adds	r3, #1
 80046cc:	61fb      	str	r3, [r7, #28]
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d4:	d81d      	bhi.n	8004712 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ec:	d0ec      	beq.n	80046c8 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80046ee:	e080      	b.n	80047f2 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	440a      	add	r2, r1
 8004706:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800470a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800470e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004710:	e06f      	b.n	80047f2 <USB_HC_Halt+0x22a>
            break;
 8004712:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004714:	e06d      	b.n	80047f2 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	4413      	add	r3, r2
 800471e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	0151      	lsls	r1, r2, #5
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	440a      	add	r2, r1
 800472c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004734:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d143      	bne.n	80047ce <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	4413      	add	r3, r2
 800474e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	0151      	lsls	r1, r2, #5
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	440a      	add	r2, r1
 800475c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004764:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	4413      	add	r3, r2
 800476e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	0151      	lsls	r1, r2, #5
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	440a      	add	r2, r1
 800477c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004780:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004784:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	4413      	add	r3, r2
 800478e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	0151      	lsls	r1, r2, #5
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	440a      	add	r2, r1
 800479c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047a4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	3301      	adds	r3, #1
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047b2:	d81d      	bhi.n	80047f0 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ca:	d0ec      	beq.n	80047a6 <USB_HC_Halt+0x1de>
 80047cc:	e011      	b.n	80047f2 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	0151      	lsls	r1, r2, #5
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	440a      	add	r2, r1
 80047e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e000      	b.n	80047f2 <USB_HC_Halt+0x22a>
          break;
 80047f0:	bf00      	nop
    }
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3724      	adds	r7, #36	; 0x24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff fdc0 	bl	8004396 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004816:	2110      	movs	r1, #16
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fdcd 	bl	80043b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fdee 	bl	8004400 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	e01f      	b.n	800486a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004840:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004848:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004850:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485e:	461a      	mov	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	3301      	adds	r3, #1
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b0f      	cmp	r3, #15
 800486e:	d9dc      	bls.n	800482a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004870:	2300      	movs	r3, #0
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	e034      	b.n	80048e0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800488c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004894:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800489c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048aa:	461a      	mov	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	3301      	adds	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048bc:	d80c      	bhi.n	80048d8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d4:	d0ec      	beq.n	80048b0 <USB_StopHost+0xb0>
 80048d6:	e000      	b.n	80048da <USB_StopHost+0xda>
        break;
 80048d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	3301      	adds	r3, #1
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b0f      	cmp	r3, #15
 80048e4:	d9c7      	bls.n	8004876 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ec:	461a      	mov	r2, r3
 80048ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff fd39 	bl	8004374 <USB_EnableGlobalInt>

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f804 	bl	8004930 <USBH_HandleSof>
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b0b      	cmp	r3, #11
 8004940:	d10a      	bne.n	8004958 <USBH_HandleSof+0x28>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4798      	blx	r3
  }
}
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8004970:	bf00      	nop
}
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800498c:	bf00      	nop
}
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f883 	bl	8004af2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	791b      	ldrb	r3, [r3, #4]
 80049f0:	4619      	mov	r1, r3
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f80b 	bl	8004a0e <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	795b      	ldrb	r3, [r3, #5]
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f805 	bl	8004a0e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	460b      	mov	r3, r1
 8004a18:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	2b0a      	cmp	r3, #10
 8004a1e:	d80d      	bhi.n	8004a3c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	33e0      	adds	r3, #224	; 0xe0
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	33e0      	adds	r3, #224	; 0xe0
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff ff57 	bl	800490c <USBH_LL_IncTimer>
}
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff ff8f 	bl	8004998 <USBH_LL_Connect>
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff ff98 	bl	80049c6 <USBH_LL_Disconnect>
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	70fb      	strb	r3, [r7, #3]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff ff49 	bl	8004960 <USBH_LL_PortEnabled>
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff ff49 	bl	800497c <USBH_LL_PortDisabled>
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fd fb77 	bl	80021fc <HAL_HCD_Stop>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 f807 	bl	8004b28 <USBH_Get_USB_Status>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d817      	bhi.n	8004b6c <USBH_Get_USB_Status+0x44>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <USBH_Get_USB_Status+0x1c>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b5b 	.word	0x08004b5b
 8004b4c:	08004b61 	.word	0x08004b61
 8004b50:	08004b67 	.word	0x08004b67
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	73fb      	strb	r3, [r7, #15]
    break;
 8004b58:	e00b      	b.n	8004b72 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8004b5e:	e008      	b.n	8004b72 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
    break;
 8004b64:	e005      	b.n	8004b72 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004b66:	2302      	movs	r3, #2
 8004b68:	73fb      	strb	r3, [r7, #15]
    break;
 8004b6a:	e002      	b.n	8004b72 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8004b70:	bf00      	nop
  }
  return usb_status;
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <__libc_init_array>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	4d0d      	ldr	r5, [pc, #52]	; (8004bb8 <__libc_init_array+0x38>)
 8004b84:	4c0d      	ldr	r4, [pc, #52]	; (8004bbc <__libc_init_array+0x3c>)
 8004b86:	1b64      	subs	r4, r4, r5
 8004b88:	10a4      	asrs	r4, r4, #2
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	42a6      	cmp	r6, r4
 8004b8e:	d109      	bne.n	8004ba4 <__libc_init_array+0x24>
 8004b90:	4d0b      	ldr	r5, [pc, #44]	; (8004bc0 <__libc_init_array+0x40>)
 8004b92:	4c0c      	ldr	r4, [pc, #48]	; (8004bc4 <__libc_init_array+0x44>)
 8004b94:	f000 f834 	bl	8004c00 <_init>
 8004b98:	1b64      	subs	r4, r4, r5
 8004b9a:	10a4      	asrs	r4, r4, #2
 8004b9c:	2600      	movs	r6, #0
 8004b9e:	42a6      	cmp	r6, r4
 8004ba0:	d105      	bne.n	8004bae <__libc_init_array+0x2e>
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba8:	4798      	blx	r3
 8004baa:	3601      	adds	r6, #1
 8004bac:	e7ee      	b.n	8004b8c <__libc_init_array+0xc>
 8004bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb2:	4798      	blx	r3
 8004bb4:	3601      	adds	r6, #1
 8004bb6:	e7f2      	b.n	8004b9e <__libc_init_array+0x1e>
 8004bb8:	08004c3c 	.word	0x08004c3c
 8004bbc:	08004c3c 	.word	0x08004c3c
 8004bc0:	08004c3c 	.word	0x08004c3c
 8004bc4:	08004c40 	.word	0x08004c40

08004bc8 <memset>:
 8004bc8:	4402      	add	r2, r0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d100      	bne.n	8004bd2 <memset+0xa>
 8004bd0:	4770      	bx	lr
 8004bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd6:	e7f9      	b.n	8004bcc <memset+0x4>

08004bd8 <strncat>:
 8004bd8:	b530      	push	{r4, r5, lr}
 8004bda:	4604      	mov	r4, r0
 8004bdc:	7825      	ldrb	r5, [r4, #0]
 8004bde:	4623      	mov	r3, r4
 8004be0:	3401      	adds	r4, #1
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	d1fa      	bne.n	8004bdc <strncat+0x4>
 8004be6:	3a01      	subs	r2, #1
 8004be8:	d304      	bcc.n	8004bf4 <strncat+0x1c>
 8004bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bee:	f803 4b01 	strb.w	r4, [r3], #1
 8004bf2:	b904      	cbnz	r4, 8004bf6 <strncat+0x1e>
 8004bf4:	bd30      	pop	{r4, r5, pc}
 8004bf6:	2a00      	cmp	r2, #0
 8004bf8:	d1f5      	bne.n	8004be6 <strncat+0xe>
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	e7f3      	b.n	8004be6 <strncat+0xe>
	...

08004c00 <_init>:
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c02:	bf00      	nop
 8004c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c06:	bc08      	pop	{r3}
 8004c08:	469e      	mov	lr, r3
 8004c0a:	4770      	bx	lr

08004c0c <_fini>:
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	bf00      	nop
 8004c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c12:	bc08      	pop	{r3}
 8004c14:	469e      	mov	lr, r3
 8004c16:	4770      	bx	lr
