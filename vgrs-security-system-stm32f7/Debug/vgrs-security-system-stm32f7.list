
vgrs-security-system-stm32f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004238  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004490  08004490  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004490  08004490  00014490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004498  08004498  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800449c  0800449c  0001449c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080044a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004970  20000010  080044b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004980  080044b0  00024980  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001357f  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285a  00000000  00000000  000335bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00035e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00036a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c6f  00000000  00000000  00037520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9d7  00000000  00000000  0003b18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012c0c0  00000000  00000000  00049b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175c26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000300c  00000000  00000000  00175c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08004420 	.word	0x08004420

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08004420 	.word	0x08004420

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b96e 	b.w	8000534 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468c      	mov	ip, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	f040 8083 	bne.w	8000386 <__udivmoddi4+0x116>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d947      	bls.n	8000316 <__udivmoddi4+0xa6>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b142      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028c:	f1c2 0020 	rsb	r0, r2, #32
 8000290:	fa24 f000 	lsr.w	r0, r4, r0
 8000294:	4091      	lsls	r1, r2
 8000296:	4097      	lsls	r7, r2
 8000298:	ea40 0c01 	orr.w	ip, r0, r1
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbbc f6f8 	udiv	r6, ip, r8
 80002a8:	fa1f fe87 	uxth.w	lr, r7
 80002ac:	fb08 c116 	mls	r1, r8, r6, ip
 80002b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b4:	fb06 f10e 	mul.w	r1, r6, lr
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002c2:	f080 8119 	bcs.w	80004f8 <__udivmoddi4+0x288>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8116 	bls.w	80004f8 <__udivmoddi4+0x288>
 80002cc:	3e02      	subs	r6, #2
 80002ce:	443b      	add	r3, r7
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	193c      	adds	r4, r7, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ee:	f080 8105 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f240 8102 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002f8:	3802      	subs	r0, #2
 80002fa:	443c      	add	r4, r7
 80002fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000300:	eba4 040e 	sub.w	r4, r4, lr
 8000304:	2600      	movs	r6, #0
 8000306:	b11d      	cbz	r5, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c5 4300 	strd	r4, r3, [r5]
 8000310:	4631      	mov	r1, r6
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xaa>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	2a00      	cmp	r2, #0
 8000320:	d150      	bne.n	80003c4 <__udivmoddi4+0x154>
 8000322:	1bcb      	subs	r3, r1, r7
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	fa1f f887 	uxth.w	r8, r7
 800032c:	2601      	movs	r6, #1
 800032e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000332:	0c21      	lsrs	r1, r4, #16
 8000334:	fb0e 331c 	mls	r3, lr, ip, r3
 8000338:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800033c:	fb08 f30c 	mul.w	r3, r8, ip
 8000340:	428b      	cmp	r3, r1
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000344:	1879      	adds	r1, r7, r1
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0xe2>
 800034c:	428b      	cmp	r3, r1
 800034e:	f200 80e9 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 8000352:	4684      	mov	ip, r0
 8000354:	1ac9      	subs	r1, r1, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x10c>
 800036c:	193c      	adds	r4, r7, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x10a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80d9 	bhi.w	800052c <__udivmoddi4+0x2bc>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e7bf      	b.n	8000306 <__udivmoddi4+0x96>
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x12e>
 800038a:	2d00      	cmp	r5, #0
 800038c:	f000 80b1 	beq.w	80004f2 <__udivmoddi4+0x282>
 8000390:	2600      	movs	r6, #0
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	4630      	mov	r0, r6
 8000398:	4631      	mov	r1, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f683 	clz	r6, r3
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d14a      	bne.n	800043c <__udivmoddi4+0x1cc>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0x140>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80b8 	bhi.w	8000520 <__udivmoddi4+0x2b0>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0103 	sbc.w	r1, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	468c      	mov	ip, r1
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d0a8      	beq.n	8000310 <__udivmoddi4+0xa0>
 80003be:	e9c5 4c00 	strd	r4, ip, [r5]
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0xa0>
 80003c4:	f1c2 0320 	rsb	r3, r2, #32
 80003c8:	fa20 f603 	lsr.w	r6, r0, r3
 80003cc:	4097      	lsls	r7, r2
 80003ce:	fa01 f002 	lsl.w	r0, r1, r2
 80003d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d6:	40d9      	lsrs	r1, r3
 80003d8:	4330      	orrs	r0, r6
 80003da:	0c03      	lsrs	r3, r0, #16
 80003dc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e0:	fa1f f887 	uxth.w	r8, r7
 80003e4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb06 f108 	mul.w	r1, r6, r8
 80003f0:	4299      	cmp	r1, r3
 80003f2:	fa04 f402 	lsl.w	r4, r4, r2
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x19c>
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003fe:	f080 808d 	bcs.w	800051c <__udivmoddi4+0x2ac>
 8000402:	4299      	cmp	r1, r3
 8000404:	f240 808a 	bls.w	800051c <__udivmoddi4+0x2ac>
 8000408:	3e02      	subs	r6, #2
 800040a:	443b      	add	r3, r7
 800040c:	1a5b      	subs	r3, r3, r1
 800040e:	b281      	uxth	r1, r0
 8000410:	fbb3 f0fe 	udiv	r0, r3, lr
 8000414:	fb0e 3310 	mls	r3, lr, r0, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb00 f308 	mul.w	r3, r0, r8
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x1c4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800042a:	d273      	bcs.n	8000514 <__udivmoddi4+0x2a4>
 800042c:	428b      	cmp	r3, r1
 800042e:	d971      	bls.n	8000514 <__udivmoddi4+0x2a4>
 8000430:	3802      	subs	r0, #2
 8000432:	4439      	add	r1, r7
 8000434:	1acb      	subs	r3, r1, r3
 8000436:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800043a:	e778      	b.n	800032e <__udivmoddi4+0xbe>
 800043c:	f1c6 0c20 	rsb	ip, r6, #32
 8000440:	fa03 f406 	lsl.w	r4, r3, r6
 8000444:	fa22 f30c 	lsr.w	r3, r2, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	fa20 f70c 	lsr.w	r7, r0, ip
 800044e:	fa01 f306 	lsl.w	r3, r1, r6
 8000452:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000456:	fa21 f10c 	lsr.w	r1, r1, ip
 800045a:	431f      	orrs	r7, r3
 800045c:	0c3b      	lsrs	r3, r7, #16
 800045e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000462:	fa1f f884 	uxth.w	r8, r4
 8000466:	fb0e 1119 	mls	r1, lr, r9, r1
 800046a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800046e:	fb09 fa08 	mul.w	sl, r9, r8
 8000472:	458a      	cmp	sl, r1
 8000474:	fa02 f206 	lsl.w	r2, r2, r6
 8000478:	fa00 f306 	lsl.w	r3, r0, r6
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x220>
 800047e:	1861      	adds	r1, r4, r1
 8000480:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000484:	d248      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 8000486:	458a      	cmp	sl, r1
 8000488:	d946      	bls.n	8000518 <__udivmoddi4+0x2a8>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4421      	add	r1, r4
 8000490:	eba1 010a 	sub.w	r1, r1, sl
 8000494:	b2bf      	uxth	r7, r7
 8000496:	fbb1 f0fe 	udiv	r0, r1, lr
 800049a:	fb0e 1110 	mls	r1, lr, r0, r1
 800049e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004a2:	fb00 f808 	mul.w	r8, r0, r8
 80004a6:	45b8      	cmp	r8, r7
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x24a>
 80004aa:	19e7      	adds	r7, r4, r7
 80004ac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004b0:	d22e      	bcs.n	8000510 <__udivmoddi4+0x2a0>
 80004b2:	45b8      	cmp	r8, r7
 80004b4:	d92c      	bls.n	8000510 <__udivmoddi4+0x2a0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4427      	add	r7, r4
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	eba7 0708 	sub.w	r7, r7, r8
 80004c2:	fba0 8902 	umull	r8, r9, r0, r2
 80004c6:	454f      	cmp	r7, r9
 80004c8:	46c6      	mov	lr, r8
 80004ca:	4649      	mov	r1, r9
 80004cc:	d31a      	bcc.n	8000504 <__udivmoddi4+0x294>
 80004ce:	d017      	beq.n	8000500 <__udivmoddi4+0x290>
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x27a>
 80004d2:	ebb3 020e 	subs.w	r2, r3, lr
 80004d6:	eb67 0701 	sbc.w	r7, r7, r1
 80004da:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004de:	40f2      	lsrs	r2, r6
 80004e0:	ea4c 0202 	orr.w	r2, ip, r2
 80004e4:	40f7      	lsrs	r7, r6
 80004e6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ea:	2600      	movs	r6, #0
 80004ec:	4631      	mov	r1, r6
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e70b      	b.n	8000310 <__udivmoddi4+0xa0>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0x60>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fd      	b.n	80002fc <__udivmoddi4+0x8c>
 8000500:	4543      	cmp	r3, r8
 8000502:	d2e5      	bcs.n	80004d0 <__udivmoddi4+0x260>
 8000504:	ebb8 0e02 	subs.w	lr, r8, r2
 8000508:	eb69 0104 	sbc.w	r1, r9, r4
 800050c:	3801      	subs	r0, #1
 800050e:	e7df      	b.n	80004d0 <__udivmoddi4+0x260>
 8000510:	4608      	mov	r0, r1
 8000512:	e7d2      	b.n	80004ba <__udivmoddi4+0x24a>
 8000514:	4660      	mov	r0, ip
 8000516:	e78d      	b.n	8000434 <__udivmoddi4+0x1c4>
 8000518:	4681      	mov	r9, r0
 800051a:	e7b9      	b.n	8000490 <__udivmoddi4+0x220>
 800051c:	4666      	mov	r6, ip
 800051e:	e775      	b.n	800040c <__udivmoddi4+0x19c>
 8000520:	4630      	mov	r0, r6
 8000522:	e74a      	b.n	80003ba <__udivmoddi4+0x14a>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	4439      	add	r1, r7
 800052a:	e713      	b.n	8000354 <__udivmoddi4+0xe4>
 800052c:	3802      	subs	r0, #2
 800052e:	443c      	add	r4, r7
 8000530:	e724      	b.n	800037c <__udivmoddi4+0x10c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 f9d7 	bl	80008ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f8a2 	bl	8000688 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 8000544:	f000 f842 	bl	80005cc <MX_GPIO_Init>
  BSP_LCD_DisplayStringAtLine(7, strptr);

  BSP_LCD_SetTextColor(LCD_COLOR_DARKRED);
	*/

  keypadLockState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000548:	2140      	movs	r1, #64	; 0x40
 800054a:	4816      	ldr	r0, [pc, #88]	; (80005a4 <main+0x6c>)
 800054c:	f000 fce2 	bl	8000f14 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	461a      	mov	r2, r3
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <main+0x70>)
 8000556:	701a      	strb	r2, [r3, #0]
  rfidLockState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000558:	2110      	movs	r1, #16
 800055a:	4812      	ldr	r0, [pc, #72]	; (80005a4 <main+0x6c>)
 800055c:	f000 fcda 	bl	8000f14 <HAL_GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	461a      	mov	r2, r3
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <main+0x74>)
 8000566:	701a      	strb	r2, [r3, #0]
  buttonsCombLockState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000568:	2104      	movs	r1, #4
 800056a:	4811      	ldr	r0, [pc, #68]	; (80005b0 <main+0x78>)
 800056c:	f000 fcd2 	bl	8000f14 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <main+0x7c>)
 8000576:	701a      	strb	r2, [r3, #0]
  pirSensorState = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8000578:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057c:	480e      	ldr	r0, [pc, #56]	; (80005b8 <main+0x80>)
 800057e:	f000 fcc9 	bl	8000f14 <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <main+0x84>)
 8000588:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800058a:	f001 f9a7 	bl	80018dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  mainTaskHandle = osThreadNew(mainTask, NULL, &mainTask_attributes);
 800058e:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <main+0x88>)
 8000590:	2100      	movs	r1, #0
 8000592:	480c      	ldr	r0, [pc, #48]	; (80005c4 <main+0x8c>)
 8000594:	f001 fa0c 	bl	80019b0 <osThreadNew>
 8000598:	4603      	mov	r3, r0
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <main+0x90>)
 800059c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800059e:	f001 f9d1 	bl	8001944 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <main+0x6a>
 80005a4:	40020000 	.word	0x40020000
 80005a8:	2000002c 	.word	0x2000002c
 80005ac:	2000002d 	.word	0x2000002d
 80005b0:	40020800 	.word	0x40020800
 80005b4:	2000002e 	.word	0x2000002e
 80005b8:	40021400 	.word	0x40021400
 80005bc:	2000002f 	.word	0x2000002f
 80005c0:	0800445c 	.word	0x0800445c
 80005c4:	08000761 	.word	0x08000761
 80005c8:	20004938 	.word	0x20004938

080005cc <MX_GPIO_Init>:
  }
  /* USER CODE END 3 */
}

void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b29      	ldr	r3, [pc, #164]	; (8000678 <MX_GPIO_Init+0xac>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a28      	ldr	r2, [pc, #160]	; (8000678 <MX_GPIO_Init+0xac>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <MX_GPIO_Init+0xac>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <MX_GPIO_Init+0xac>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a22      	ldr	r2, [pc, #136]	; (8000678 <MX_GPIO_Init+0xac>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_GPIO_Init+0xac>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000602:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_GPIO_Init+0xac>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <MX_GPIO_Init+0xac>)
 8000608:	f043 0320 	orr.w	r3, r3, #32
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_GPIO_Init+0xac>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0320 	and.w	r3, r3, #32
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pins*/
	  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 800061a:	2350      	movs	r3, #80	; 0x50
 800061c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4619      	mov	r1, r3
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <MX_GPIO_Init+0xb0>)
 8000632:	f000 fac3 	bl	8000bbc <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000636:	2304      	movs	r3, #4
 8000638:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	4619      	mov	r1, r3
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <MX_GPIO_Init+0xb4>)
 800064e:	f000 fab5 	bl	8000bbc <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000656:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_GPIO_Init+0xb8>)
 800066c:	f000 faa6 	bl	8000bbc <HAL_GPIO_Init>


}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40020000 	.word	0x40020000
 8000680:	40020800 	.word	0x40020800
 8000684:	40021400 	.word	0x40021400

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	; 0x58
 800068c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef  ret = HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	4b30      	ldr	r3, [pc, #192]	; (8000758 <SystemClock_Config+0xd0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a2f      	ldr	r2, [pc, #188]	; (8000758 <SystemClock_Config+0xd0>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <SystemClock_Config+0xd0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <SystemClock_Config+0xd4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a2a      	ldr	r2, [pc, #168]	; (800075c <SystemClock_Config+0xd4>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <SystemClock_Config+0xd4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006d8:	2319      	movs	r3, #25
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006dc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80006e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006e6:	2309      	movs	r3, #9
 80006e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 7;
 80006ea:	2307      	movs	r3, #7
 80006ec:	63fb      	str	r3, [r7, #60]	; 0x3c

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fc9a 	bl	800102c <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 80006fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000702:	2b00      	cmp	r3, #0
 8000704:	d000      	beq.n	8000708 <SystemClock_Config+0x80>
  {
	while(1) { ; }
 8000706:	e7fe      	b.n	8000706 <SystemClock_Config+0x7e>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8000708:	f000 fc40 	bl	8000f8c <HAL_PWREx_EnableOverDrive>
 800070c:	4603      	mov	r3, r0
 800070e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8000712:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000716:	2b00      	cmp	r3, #0
 8000718:	d000      	beq.n	800071c <SystemClock_Config+0x94>
  {
	while(1) { ; }
 800071a:	e7fe      	b.n	800071a <SystemClock_Config+0x92>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800071c:	230f      	movs	r3, #15
 800071e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	653b      	str	r3, [r7, #80]	; 0x50

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000734:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000738:	2107      	movs	r1, #7
 800073a:	4618      	mov	r0, r3
 800073c:	f000 ff24 	bl	8001588 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8000746:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800074a:	2b00      	cmp	r3, #0
 800074c:	d000      	beq.n	8000750 <SystemClock_Config+0xc8>
  {
	while(1) { ; }
 800074e:	e7fe      	b.n	800074e <SystemClock_Config+0xc6>
  }
}
 8000750:	bf00      	nop
 8000752:	3758      	adds	r7, #88	; 0x58
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <mainTask>:

/* USER CODE BEGIN 4 */

void mainTask(void *argument)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  keypadLockState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000768:	2140      	movs	r1, #64	; 0x40
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <mainTask+0x54>)
 800076c:	f000 fbd2 	bl	8000f14 <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <mainTask+0x58>)
 8000776:	701a      	strb	r2, [r3, #0]
	  rfidLockState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000778:	2110      	movs	r1, #16
 800077a:	480e      	ldr	r0, [pc, #56]	; (80007b4 <mainTask+0x54>)
 800077c:	f000 fbca 	bl	8000f14 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <mainTask+0x5c>)
 8000786:	701a      	strb	r2, [r3, #0]
	  buttonsCombLockState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000788:	2104      	movs	r1, #4
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <mainTask+0x60>)
 800078c:	f000 fbc2 	bl	8000f14 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <mainTask+0x64>)
 8000796:	701a      	strb	r2, [r3, #0]
	  pirSensorState = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8000798:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <mainTask+0x68>)
 800079e:	f000 fbb9 	bl	8000f14 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <mainTask+0x6c>)
 80007a8:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(5);
 80007aa:	2005      	movs	r0, #5
 80007ac:	f000 f8fc 	bl	80009a8 <HAL_Delay>
	  keypadLockState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 80007b0:	e7da      	b.n	8000768 <mainTask+0x8>
 80007b2:	bf00      	nop
 80007b4:	40020000 	.word	0x40020000
 80007b8:	2000002c 	.word	0x2000002c
 80007bc:	2000002d 	.word	0x2000002d
 80007c0:	40020800 	.word	0x40020800
 80007c4:	2000002e 	.word	0x2000002e
 80007c8:	40021400 	.word	0x40021400
 80007cc:	2000002f 	.word	0x2000002f

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <HAL_MspInit+0x4c>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	210f      	movs	r1, #15
 800080a:	f06f 0001 	mvn.w	r0, #1
 800080e:	f000 f9ac 	bl	8000b6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f88a 	bl	8000968 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000854:	f002 fd4c 	bl	80032f0 <xTaskGetSchedulerState>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d001      	beq.n	8000862 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800085e:	f003 fb2b 	bl	8003eb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}

08000866 <EXTI15_10_IRQHandler>:
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI15_10_IRQHandler(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(TS_INT_PIN); // Reset the GPIO_PIN_13 Interrupt - Touch Screen
 800086a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800086e:	f000 fb69 	bl	8000f44 <HAL_GPIO_EXTI_IRQHandler>

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SystemInit+0x20>)
 800087e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <SystemInit+0x20>)
 8000884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008a2:	490e      	ldr	r1, [pc, #56]	; (80008dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008a4:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008b8:	4c0b      	ldr	r4, [pc, #44]	; (80008e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008c6:	f7ff ffd7 	bl	8000878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ca:	f003 fd6f 	bl	80043ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ce:	f7ff fe33 	bl	8000538 <main>
  bx  lr    
 80008d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008d4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008e0:	080044a0 	.word	0x080044a0
  ldr r2, =_sbss
 80008e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008e8:	20004980 	.word	0x20004980

080008ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC_IRQHandler>

080008ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f2:	2003      	movs	r0, #3
 80008f4:	f000 f92e 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f8:	200f      	movs	r0, #15
 80008fa:	f000 f805 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fe:	f7ff ff67 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	bd80      	pop	{r7, pc}

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_InitTick+0x54>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_InitTick+0x58>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f93b 	bl	8000ba2 <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e00e      	b.n	8000954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d80a      	bhi.n	8000952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000944:	f000 f911 	bl	8000b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_InitTick+0x5c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000000 	.word	0x20000000
 8000960:	20000008 	.word	0x20000008
 8000964:	20000004 	.word	0x20000004

08000968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008
 800098c:	2000493c 	.word	0x2000493c

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	2000493c 	.word	0x2000493c

080009a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b0:	f7ff ffee 	bl	8000990 <HAL_GetTick>
 80009b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009c0:	d005      	beq.n	80009ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_Delay+0x44>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ce:	bf00      	nop
 80009d0:	f7ff ffde 	bl	8000990 <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d8f7      	bhi.n	80009d0 <HAL_Delay+0x28>
  {
  }
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <__NVIC_SetPriorityGrouping+0x40>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <__NVIC_SetPriorityGrouping+0x40>)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00
 8000a34:	05fa0000 	.word	0x05fa0000

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b20:	d301      	bcc.n	8000b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00f      	b.n	8000b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <SysTick_Config+0x40>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2e:	210f      	movs	r1, #15
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b34:	f7ff ff8e 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SysTick_Config+0x40>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SysTick_Config+0x40>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff47 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7c:	f7ff ff5c 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f7ff ff8e 	bl	8000aa8 <NVIC_EncodePriority>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff5d 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffb0 	bl	8000b10 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
 8000bda:	e175      	b.n	8000ec8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000bdc:	2201      	movs	r2, #1
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f040 8164 	bne.w	8000ec2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d005      	beq.n	8000c12 <HAL_GPIO_Init+0x56>
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d130      	bne.n	8000c74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4013      	ands	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	68da      	ldr	r2, [r3, #12]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	091b      	lsrs	r3, r3, #4
 8000c5e:	f003 0201 	and.w	r2, r3, #1
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d017      	beq.n	8000cb0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d123      	bne.n	8000d04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	08da      	lsrs	r2, r3, #3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3208      	adds	r2, #8
 8000cfe:	69b9      	ldr	r1, [r7, #24]
 8000d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0203 	and.w	r2, r3, #3
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 80be 	beq.w	8000ec2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b66      	ldr	r3, [pc, #408]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a65      	ldr	r2, [pc, #404]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b63      	ldr	r3, [pc, #396]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000d5e:	4a61      	ldr	r2, [pc, #388]	; (8000ee4 <HAL_GPIO_Init+0x328>)
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	220f      	movs	r2, #15
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a58      	ldr	r2, [pc, #352]	; (8000ee8 <HAL_GPIO_Init+0x32c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d037      	beq.n	8000dfa <HAL_GPIO_Init+0x23e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a57      	ldr	r2, [pc, #348]	; (8000eec <HAL_GPIO_Init+0x330>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d031      	beq.n	8000df6 <HAL_GPIO_Init+0x23a>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a56      	ldr	r2, [pc, #344]	; (8000ef0 <HAL_GPIO_Init+0x334>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d02b      	beq.n	8000df2 <HAL_GPIO_Init+0x236>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a55      	ldr	r2, [pc, #340]	; (8000ef4 <HAL_GPIO_Init+0x338>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d025      	beq.n	8000dee <HAL_GPIO_Init+0x232>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a54      	ldr	r2, [pc, #336]	; (8000ef8 <HAL_GPIO_Init+0x33c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01f      	beq.n	8000dea <HAL_GPIO_Init+0x22e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a53      	ldr	r2, [pc, #332]	; (8000efc <HAL_GPIO_Init+0x340>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d019      	beq.n	8000de6 <HAL_GPIO_Init+0x22a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a52      	ldr	r2, [pc, #328]	; (8000f00 <HAL_GPIO_Init+0x344>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d013      	beq.n	8000de2 <HAL_GPIO_Init+0x226>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a51      	ldr	r2, [pc, #324]	; (8000f04 <HAL_GPIO_Init+0x348>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d00d      	beq.n	8000dde <HAL_GPIO_Init+0x222>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a50      	ldr	r2, [pc, #320]	; (8000f08 <HAL_GPIO_Init+0x34c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d007      	beq.n	8000dda <HAL_GPIO_Init+0x21e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4f      	ldr	r2, [pc, #316]	; (8000f0c <HAL_GPIO_Init+0x350>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d101      	bne.n	8000dd6 <HAL_GPIO_Init+0x21a>
 8000dd2:	2309      	movs	r3, #9
 8000dd4:	e012      	b.n	8000dfc <HAL_GPIO_Init+0x240>
 8000dd6:	230a      	movs	r3, #10
 8000dd8:	e010      	b.n	8000dfc <HAL_GPIO_Init+0x240>
 8000dda:	2308      	movs	r3, #8
 8000ddc:	e00e      	b.n	8000dfc <HAL_GPIO_Init+0x240>
 8000dde:	2307      	movs	r3, #7
 8000de0:	e00c      	b.n	8000dfc <HAL_GPIO_Init+0x240>
 8000de2:	2306      	movs	r3, #6
 8000de4:	e00a      	b.n	8000dfc <HAL_GPIO_Init+0x240>
 8000de6:	2305      	movs	r3, #5
 8000de8:	e008      	b.n	8000dfc <HAL_GPIO_Init+0x240>
 8000dea:	2304      	movs	r3, #4
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x240>
 8000dee:	2303      	movs	r3, #3
 8000df0:	e004      	b.n	8000dfc <HAL_GPIO_Init+0x240>
 8000df2:	2302      	movs	r3, #2
 8000df4:	e002      	b.n	8000dfc <HAL_GPIO_Init+0x240>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <HAL_GPIO_Init+0x240>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	69fa      	ldr	r2, [r7, #28]
 8000dfe:	f002 0203 	and.w	r2, r2, #3
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	4093      	lsls	r3, r2
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e0c:	4935      	ldr	r1, [pc, #212]	; (8000ee4 <HAL_GPIO_Init+0x328>)
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1a:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <HAL_GPIO_Init+0x354>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e3e:	4a34      	ldr	r2, [pc, #208]	; (8000f10 <HAL_GPIO_Init+0x354>)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <HAL_GPIO_Init+0x354>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e68:	4a29      	ldr	r2, [pc, #164]	; (8000f10 <HAL_GPIO_Init+0x354>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e6e:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <HAL_GPIO_Init+0x354>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e92:	4a1f      	ldr	r2, [pc, #124]	; (8000f10 <HAL_GPIO_Init+0x354>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_GPIO_Init+0x354>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <HAL_GPIO_Init+0x354>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	2b0f      	cmp	r3, #15
 8000ecc:	f67f ae86 	bls.w	8000bdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40021400 	.word	0x40021400
 8000f00:	40021800 	.word	0x40021800
 8000f04:	40021c00 	.word	0x40021c00
 8000f08:	40022000 	.word	0x40022000
 8000f0c:	40022400 	.word	0x40022400
 8000f10:	40013c00 	.word	0x40013c00

08000f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e001      	b.n	8000f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f806 	bl	8000f74 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40013c00 	.word	0x40013c00

08000f74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <HAL_PWREx_EnableOverDrive+0x98>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a22      	ldr	r2, [pc, #136]	; (8001024 <HAL_PWREx_EnableOverDrive+0x98>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fba:	f7ff fce9 	bl	8000990 <HAL_GetTick>
 8000fbe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fc0:	e009      	b.n	8000fd6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000fc2:	f7ff fce5 	bl	8000990 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fd0:	d901      	bls.n	8000fd6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e022      	b.n	800101c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe2:	d1ee      	bne.n	8000fc2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ff0:	f7ff fcce 	bl	8000990 <HAL_GetTick>
 8000ff4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ff6:	e009      	b.n	800100c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ff8:	f7ff fcca 	bl	8000990 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001006:	d901      	bls.n	800100c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e007      	b.n	800101c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_PWREx_EnableOverDrive+0x9c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001018:	d1ee      	bne.n	8000ff8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e29b      	b.n	800157a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8087 	beq.w	800115e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001050:	4b96      	ldr	r3, [pc, #600]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 030c 	and.w	r3, r3, #12
 8001058:	2b04      	cmp	r3, #4
 800105a:	d00c      	beq.n	8001076 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800105c:	4b93      	ldr	r3, [pc, #588]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b08      	cmp	r3, #8
 8001066:	d112      	bne.n	800108e <HAL_RCC_OscConfig+0x62>
 8001068:	4b90      	ldr	r3, [pc, #576]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001074:	d10b      	bne.n	800108e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001076:	4b8d      	ldr	r3, [pc, #564]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d06c      	beq.n	800115c <HAL_RCC_OscConfig+0x130>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d168      	bne.n	800115c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e275      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x7a>
 8001098:	4b84      	ldr	r3, [pc, #528]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a83      	ldr	r2, [pc, #524]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 800109e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	e02e      	b.n	8001104 <HAL_RCC_OscConfig+0xd8>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x9c>
 80010ae:	4b7f      	ldr	r3, [pc, #508]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a7e      	ldr	r2, [pc, #504]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80010b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b7c      	ldr	r3, [pc, #496]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a7b      	ldr	r2, [pc, #492]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80010c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e01d      	b.n	8001104 <HAL_RCC_OscConfig+0xd8>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d0:	d10c      	bne.n	80010ec <HAL_RCC_OscConfig+0xc0>
 80010d2:	4b76      	ldr	r3, [pc, #472]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a75      	ldr	r2, [pc, #468]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80010d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4b73      	ldr	r3, [pc, #460]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a72      	ldr	r2, [pc, #456]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e00b      	b.n	8001104 <HAL_RCC_OscConfig+0xd8>
 80010ec:	4b6f      	ldr	r3, [pc, #444]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a6e      	ldr	r2, [pc, #440]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80010f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b6c      	ldr	r3, [pc, #432]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a6b      	ldr	r2, [pc, #428]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80010fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d013      	beq.n	8001134 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110c:	f7ff fc40 	bl	8000990 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fc3c 	bl	8000990 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e229      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	4b61      	ldr	r3, [pc, #388]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0f0      	beq.n	8001114 <HAL_RCC_OscConfig+0xe8>
 8001132:	e014      	b.n	800115e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001134:	f7ff fc2c 	bl	8000990 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fc28 	bl	8000990 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e215      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	4b57      	ldr	r3, [pc, #348]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x110>
 800115a:	e000      	b.n	800115e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d069      	beq.n	800123e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800116a:	4b50      	ldr	r3, [pc, #320]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001176:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b08      	cmp	r3, #8
 8001180:	d11c      	bne.n	80011bc <HAL_RCC_OscConfig+0x190>
 8001182:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d116      	bne.n	80011bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d005      	beq.n	80011a6 <HAL_RCC_OscConfig+0x17a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d001      	beq.n	80011a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e1e9      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	493d      	ldr	r1, [pc, #244]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ba:	e040      	b.n	800123e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d023      	beq.n	800120c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c4:	4b39      	ldr	r3, [pc, #228]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a38      	ldr	r2, [pc, #224]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fbde 	bl	8000990 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d8:	f7ff fbda 	bl	8000990 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1c7      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4929      	ldr	r1, [pc, #164]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
 800120a:	e018      	b.n	800123e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a26      	ldr	r2, [pc, #152]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 8001212:	f023 0301 	bic.w	r3, r3, #1
 8001216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001218:	f7ff fbba 	bl	8000990 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001220:	f7ff fbb6 	bl	8000990 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e1a3      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d038      	beq.n	80012bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d019      	beq.n	8001286 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 8001254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001256:	4a15      	ldr	r2, [pc, #84]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125e:	f7ff fb97 	bl	8000990 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001266:	f7ff fb93 	bl	8000990 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e180      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 800127a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x23a>
 8001284:	e01a      	b.n	80012bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 8001288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_RCC_OscConfig+0x280>)
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001292:	f7ff fb7d 	bl	8000990 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001298:	e00a      	b.n	80012b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800129a:	f7ff fb79 	bl	8000990 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d903      	bls.n	80012b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e166      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
 80012ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b0:	4b92      	ldr	r3, [pc, #584]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 80012b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1ee      	bne.n	800129a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80a4 	beq.w	8001412 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ca:	4b8c      	ldr	r3, [pc, #560]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10d      	bne.n	80012f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	4b89      	ldr	r3, [pc, #548]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a88      	ldr	r2, [pc, #544]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b86      	ldr	r3, [pc, #536]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ee:	2301      	movs	r3, #1
 80012f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f2:	4b83      	ldr	r3, [pc, #524]	; (8001500 <HAL_RCC_OscConfig+0x4d4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d118      	bne.n	8001330 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80012fe:	4b80      	ldr	r3, [pc, #512]	; (8001500 <HAL_RCC_OscConfig+0x4d4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a7f      	ldr	r2, [pc, #508]	; (8001500 <HAL_RCC_OscConfig+0x4d4>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130a:	f7ff fb41 	bl	8000990 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001312:	f7ff fb3d 	bl	8000990 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b64      	cmp	r3, #100	; 0x64
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e12a      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001324:	4b76      	ldr	r3, [pc, #472]	; (8001500 <HAL_RCC_OscConfig+0x4d4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0x31a>
 8001338:	4b70      	ldr	r3, [pc, #448]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 800133a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133c:	4a6f      	ldr	r2, [pc, #444]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6713      	str	r3, [r2, #112]	; 0x70
 8001344:	e02d      	b.n	80013a2 <HAL_RCC_OscConfig+0x376>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x33c>
 800134e:	4b6b      	ldr	r3, [pc, #428]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001352:	4a6a      	ldr	r2, [pc, #424]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	6713      	str	r3, [r2, #112]	; 0x70
 800135a:	4b68      	ldr	r3, [pc, #416]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135e:	4a67      	ldr	r2, [pc, #412]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001360:	f023 0304 	bic.w	r3, r3, #4
 8001364:	6713      	str	r3, [r2, #112]	; 0x70
 8001366:	e01c      	b.n	80013a2 <HAL_RCC_OscConfig+0x376>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b05      	cmp	r3, #5
 800136e:	d10c      	bne.n	800138a <HAL_RCC_OscConfig+0x35e>
 8001370:	4b62      	ldr	r3, [pc, #392]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001374:	4a61      	ldr	r2, [pc, #388]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	6713      	str	r3, [r2, #112]	; 0x70
 800137c:	4b5f      	ldr	r3, [pc, #380]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a5e      	ldr	r2, [pc, #376]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	e00b      	b.n	80013a2 <HAL_RCC_OscConfig+0x376>
 800138a:	4b5c      	ldr	r3, [pc, #368]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 800138c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138e:	4a5b      	ldr	r2, [pc, #364]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	6713      	str	r3, [r2, #112]	; 0x70
 8001396:	4b59      	ldr	r3, [pc, #356]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139a:	4a58      	ldr	r2, [pc, #352]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 800139c:	f023 0304 	bic.w	r3, r3, #4
 80013a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d015      	beq.n	80013d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013aa:	f7ff faf1 	bl	8000990 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f7ff faed 	bl	8000990 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e0d8      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c8:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0ee      	beq.n	80013b2 <HAL_RCC_OscConfig+0x386>
 80013d4:	e014      	b.n	8001400 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d6:	f7ff fadb 	bl	8000990 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff fad7 	bl	8000990 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e0c2      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f4:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1ee      	bne.n	80013de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d105      	bne.n	8001412 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a3c      	ldr	r2, [pc, #240]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 800140c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 80ae 	beq.w	8001578 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800141c:	4b37      	ldr	r3, [pc, #220]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b08      	cmp	r3, #8
 8001426:	d06d      	beq.n	8001504 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d14b      	bne.n	80014c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a31      	ldr	r2, [pc, #196]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800143a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff faa8 	bl	8000990 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff faa4 	bl	8000990 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e091      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69da      	ldr	r2, [r3, #28]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	019b      	lsls	r3, r3, #6
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	085b      	lsrs	r3, r3, #1
 800147a:	3b01      	subs	r3, #1
 800147c:	041b      	lsls	r3, r3, #16
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	061b      	lsls	r3, r3, #24
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	071b      	lsls	r3, r3, #28
 800148e:	491b      	ldr	r1, [pc, #108]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001494:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a18      	ldr	r2, [pc, #96]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 800149a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fa76 	bl	8000990 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff fa72 	bl	8000990 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e05f      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x47c>
 80014c6:	e057      	b.n	8001578 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 80014ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fa5c 	bl	8000990 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff fa58 	bl	8000990 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e045      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ee:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_RCC_OscConfig+0x4d0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x4b0>
 80014fa:	e03d      	b.n	8001578 <HAL_RCC_OscConfig+0x54c>
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <HAL_RCC_OscConfig+0x558>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d030      	beq.n	8001574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d129      	bne.n	8001574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d122      	bne.n	8001574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001534:	4013      	ands	r3, r2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800153a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800153c:	4293      	cmp	r3, r2
 800153e:	d119      	bne.n	8001574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	3b01      	subs	r3, #1
 800154e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001550:	429a      	cmp	r2, r3
 8001552:	d10f      	bne.n	8001574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d107      	bne.n	8001574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0d0      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015a0:	4b6a      	ldr	r3, [pc, #424]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d910      	bls.n	80015d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b67      	ldr	r3, [pc, #412]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 020f 	bic.w	r2, r3, #15
 80015b6:	4965      	ldr	r1, [pc, #404]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b63      	ldr	r3, [pc, #396]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0b8      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d020      	beq.n	800161e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e8:	4b59      	ldr	r3, [pc, #356]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a58      	ldr	r2, [pc, #352]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 80015ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001600:	4b53      	ldr	r3, [pc, #332]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 8001606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800160a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160c:	4b50      	ldr	r3, [pc, #320]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	494d      	ldr	r1, [pc, #308]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d040      	beq.n	80016ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b47      	ldr	r3, [pc, #284]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d115      	bne.n	800166a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e07f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164a:	4b41      	ldr	r3, [pc, #260]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d109      	bne.n	800166a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e073      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165a:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e06b      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166a:	4b39      	ldr	r3, [pc, #228]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f023 0203 	bic.w	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4936      	ldr	r1, [pc, #216]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800167c:	f7ff f988 	bl	8000990 <HAL_GetTick>
 8001680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	e00a      	b.n	800169a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001684:	f7ff f984 	bl	8000990 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e053      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 020c 	and.w	r2, r3, #12
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d1eb      	bne.n	8001684 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d210      	bcs.n	80016dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 020f 	bic.w	r2, r3, #15
 80016c2:	4922      	ldr	r1, [pc, #136]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e032      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4916      	ldr	r1, [pc, #88]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d009      	beq.n	800171a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	490e      	ldr	r1, [pc, #56]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800171a:	f000 f821 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 800171e:	4602      	mov	r2, r0
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	490a      	ldr	r1, [pc, #40]	; (8001754 <HAL_RCC_ClockConfig+0x1cc>)
 800172c:	5ccb      	ldrb	r3, [r1, r3]
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <HAL_RCC_ClockConfig+0x1d0>)
 8001734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_RCC_ClockConfig+0x1d4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f8e4 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00
 8001750:	40023800 	.word	0x40023800
 8001754:	08004480 	.word	0x08004480
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001766:	2100      	movs	r1, #0
 8001768:	6079      	str	r1, [r7, #4]
 800176a:	2100      	movs	r1, #0
 800176c:	60f9      	str	r1, [r7, #12]
 800176e:	2100      	movs	r1, #0
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001772:	2100      	movs	r1, #0
 8001774:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001776:	4952      	ldr	r1, [pc, #328]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001778:	6889      	ldr	r1, [r1, #8]
 800177a:	f001 010c 	and.w	r1, r1, #12
 800177e:	2908      	cmp	r1, #8
 8001780:	d00d      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x3e>
 8001782:	2908      	cmp	r1, #8
 8001784:	f200 8094 	bhi.w	80018b0 <HAL_RCC_GetSysClockFreq+0x150>
 8001788:	2900      	cmp	r1, #0
 800178a:	d002      	beq.n	8001792 <HAL_RCC_GetSysClockFreq+0x32>
 800178c:	2904      	cmp	r1, #4
 800178e:	d003      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x38>
 8001790:	e08e      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001792:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001794:	60bb      	str	r3, [r7, #8]
      break;
 8001796:	e08e      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001798:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x168>)
 800179a:	60bb      	str	r3, [r7, #8]
      break;
 800179c:	e08b      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800179e:	4948      	ldr	r1, [pc, #288]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80017a0:	6849      	ldr	r1, [r1, #4]
 80017a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80017a6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80017a8:	4945      	ldr	r1, [pc, #276]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80017aa:	6849      	ldr	r1, [r1, #4]
 80017ac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80017b0:	2900      	cmp	r1, #0
 80017b2:	d024      	beq.n	80017fe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b4:	4942      	ldr	r1, [pc, #264]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80017b6:	6849      	ldr	r1, [r1, #4]
 80017b8:	0989      	lsrs	r1, r1, #6
 80017ba:	4608      	mov	r0, r1
 80017bc:	f04f 0100 	mov.w	r1, #0
 80017c0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80017c4:	f04f 0500 	mov.w	r5, #0
 80017c8:	ea00 0204 	and.w	r2, r0, r4
 80017cc:	ea01 0305 	and.w	r3, r1, r5
 80017d0:	493d      	ldr	r1, [pc, #244]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x168>)
 80017d2:	fb01 f003 	mul.w	r0, r1, r3
 80017d6:	2100      	movs	r1, #0
 80017d8:	fb01 f102 	mul.w	r1, r1, r2
 80017dc:	1844      	adds	r4, r0, r1
 80017de:	493a      	ldr	r1, [pc, #232]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x168>)
 80017e0:	fba2 0101 	umull	r0, r1, r2, r1
 80017e4:	1863      	adds	r3, r4, r1
 80017e6:	4619      	mov	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	461a      	mov	r2, r3
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	f7fe fd26 	bl	8000240 <__aeabi_uldivmod>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4613      	mov	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e04a      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fe:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	099b      	lsrs	r3, r3, #6
 8001804:	461a      	mov	r2, r3
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800180e:	f04f 0100 	mov.w	r1, #0
 8001812:	ea02 0400 	and.w	r4, r2, r0
 8001816:	ea03 0501 	and.w	r5, r3, r1
 800181a:	4620      	mov	r0, r4
 800181c:	4629      	mov	r1, r5
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	014b      	lsls	r3, r1, #5
 8001828:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800182c:	0142      	lsls	r2, r0, #5
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	1b00      	subs	r0, r0, r4
 8001834:	eb61 0105 	sbc.w	r1, r1, r5
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	018b      	lsls	r3, r1, #6
 8001842:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001846:	0182      	lsls	r2, r0, #6
 8001848:	1a12      	subs	r2, r2, r0
 800184a:	eb63 0301 	sbc.w	r3, r3, r1
 800184e:	f04f 0000 	mov.w	r0, #0
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	00d9      	lsls	r1, r3, #3
 8001858:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800185c:	00d0      	lsls	r0, r2, #3
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	1912      	adds	r2, r2, r4
 8001864:	eb45 0303 	adc.w	r3, r5, r3
 8001868:	f04f 0000 	mov.w	r0, #0
 800186c:	f04f 0100 	mov.w	r1, #0
 8001870:	0299      	lsls	r1, r3, #10
 8001872:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001876:	0290      	lsls	r0, r2, #10
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	461a      	mov	r2, r3
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	f7fe fcda 	bl	8000240 <__aeabi_uldivmod>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4613      	mov	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	0c1b      	lsrs	r3, r3, #16
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	3301      	adds	r3, #1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	60bb      	str	r3, [r7, #8]
      break;
 80018ae:	e002      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x164>)
 80018b2:	60bb      	str	r3, [r7, #8]
      break;
 80018b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b6:	68bb      	ldr	r3, [r7, #8]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bdb0      	pop	{r4, r5, r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	00f42400 	.word	0x00f42400
 80018c8:	017d7840 	.word	0x017d7840

080018cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018e2:	f3ef 8305 	mrs	r3, IPSR
 80018e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80018e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10f      	bne.n	800190e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018ee:	f3ef 8310 	mrs	r3, PRIMASK
 80018f2:	607b      	str	r3, [r7, #4]
  return(result);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018fa:	f3ef 8311 	mrs	r3, BASEPRI
 80018fe:	603b      	str	r3, [r7, #0]
  return(result);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <osKernelInitialize+0x3a>
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <osKernelInitialize+0x64>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d103      	bne.n	8001916 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800190e:	f06f 0305 	mvn.w	r3, #5
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	e00c      	b.n	8001930 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <osKernelInitialize+0x64>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d105      	bne.n	800192a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <osKernelInitialize+0x64>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e002      	b.n	8001930 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001930:	68fb      	ldr	r3, [r7, #12]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000030 	.word	0x20000030

08001944 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800194a:	f3ef 8305 	mrs	r3, IPSR
 800194e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001950:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10f      	bne.n	8001976 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001956:	f3ef 8310 	mrs	r3, PRIMASK
 800195a:	607b      	str	r3, [r7, #4]
  return(result);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d105      	bne.n	800196e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001962:	f3ef 8311 	mrs	r3, BASEPRI
 8001966:	603b      	str	r3, [r7, #0]
  return(result);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d007      	beq.n	800197e <osKernelStart+0x3a>
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <osKernelStart+0x68>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d103      	bne.n	800197e <osKernelStart+0x3a>
    stat = osErrorISR;
 8001976:	f06f 0305 	mvn.w	r3, #5
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e010      	b.n	80019a0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <osKernelStart+0x68>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d109      	bne.n	800199a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001986:	f7ff ffa1 	bl	80018cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <osKernelStart+0x68>)
 800198c:	2202      	movs	r2, #2
 800198e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001990:	f001 f850 	bl	8002a34 <vTaskStartScheduler>
      stat = osOK;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e002      	b.n	80019a0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800199e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80019a0:	68fb      	ldr	r3, [r7, #12]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000030 	.word	0x20000030

080019b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b090      	sub	sp, #64	; 0x40
 80019b4:	af04      	add	r7, sp, #16
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019c0:	f3ef 8305 	mrs	r3, IPSR
 80019c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80019c6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f040 808f 	bne.w	8001aec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019ce:	f3ef 8310 	mrs	r3, PRIMASK
 80019d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d105      	bne.n	80019e6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019da:	f3ef 8311 	mrs	r3, BASEPRI
 80019de:	617b      	str	r3, [r7, #20]
  return(result);
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <osThreadNew+0x3e>
 80019e6:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <osThreadNew+0x148>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d07e      	beq.n	8001aec <osThreadNew+0x13c>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d07b      	beq.n	8001aec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80019f8:	2318      	movs	r3, #24
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d045      	beq.n	8001a98 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <osThreadNew+0x6a>
        name = attr->name;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d008      	beq.n	8001a40 <osThreadNew+0x90>
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	2b38      	cmp	r3, #56	; 0x38
 8001a32:	d805      	bhi.n	8001a40 <osThreadNew+0x90>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <osThreadNew+0x94>
        return (NULL);
 8001a40:	2300      	movs	r3, #0
 8001a42:	e054      	b.n	8001aee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	089b      	lsrs	r3, r3, #2
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00e      	beq.n	8001a7a <osThreadNew+0xca>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b5b      	cmp	r3, #91	; 0x5b
 8001a62:	d90a      	bls.n	8001a7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <osThreadNew+0xca>
        mem = 1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	623b      	str	r3, [r7, #32]
 8001a78:	e010      	b.n	8001a9c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <osThreadNew+0xec>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d108      	bne.n	8001a9c <osThreadNew+0xec>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d104      	bne.n	8001a9c <osThreadNew+0xec>
          mem = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	e001      	b.n	8001a9c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d110      	bne.n	8001ac4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001aaa:	9202      	str	r2, [sp, #8]
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 fe11 	bl	80026e0 <xTaskCreateStatic>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	e013      	b.n	8001aec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d110      	bne.n	8001aec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 fe62 	bl	80027a6 <xTaskCreate>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d001      	beq.n	8001aec <osThreadNew+0x13c>
          hTask = NULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001aec:	693b      	ldr	r3, [r7, #16]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3730      	adds	r7, #48	; 0x30
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000030 	.word	0x20000030

08001afc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <vApplicationGetIdleTaskMemory+0x30>)
 8001b12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000034 	.word	0x20000034
 8001b2c:	20000090 	.word	0x20000090

08001b30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <vApplicationGetTimerTaskMemory+0x2c>)
 8001b40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <vApplicationGetTimerTaskMemory+0x30>)
 8001b46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	20000290 	.word	0x20000290
 8001b60:	200002ec 	.word	0x200002ec

08001b64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f103 0208 	add.w	r2, r3, #8
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f103 0208 	add.w	r2, r3, #8
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f103 0208 	add.w	r2, r3, #8
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	601a      	str	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c06:	b480      	push	{r7}
 8001c08:	b085      	sub	sp, #20
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c1c:	d103      	bne.n	8001c26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	e00c      	b.n	8001c40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3308      	adds	r3, #8
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	e002      	b.n	8001c34 <vListInsert+0x2e>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d2f6      	bcs.n	8001c2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	601a      	str	r2, [r3, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6892      	ldr	r2, [r2, #8]
 8001c8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6852      	ldr	r2, [r2, #4]
 8001c98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d103      	bne.n	8001cac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	1e5a      	subs	r2, r3, #1
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10c      	bne.n	8001cfa <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce4:	b672      	cpsid	i
 8001ce6:	f383 8811 	msr	BASEPRI, r3
 8001cea:	f3bf 8f6f 	isb	sy
 8001cee:	f3bf 8f4f 	dsb	sy
 8001cf2:	b662      	cpsie	i
 8001cf4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001cf6:	bf00      	nop
 8001cf8:	e7fe      	b.n	8001cf8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8001cfa:	f002 f847 	bl	8003d8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d06:	68f9      	ldr	r1, [r7, #12]
 8001d08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	441a      	add	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	68f9      	ldr	r1, [r7, #12]
 8001d2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	441a      	add	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	22ff      	movs	r2, #255	; 0xff
 8001d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	22ff      	movs	r2, #255	; 0xff
 8001d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d114      	bne.n	8001d7a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01a      	beq.n	8001d8e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3310      	adds	r3, #16
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 f901 	bl	8002f64 <xTaskRemoveFromEventList>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d012      	beq.n	8001d8e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <xQueueGenericReset+0xd0>)
 8001d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	e009      	b.n	8001d8e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3310      	adds	r3, #16
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fef0 	bl	8001b64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3324      	adds	r3, #36	; 0x24
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff feeb 	bl	8001b64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001d8e:	f002 f831 	bl	8003df4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	e000ed04 	.word	0xe000ed04

08001da0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08e      	sub	sp, #56	; 0x38
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10c      	bne.n	8001dce <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8001db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db8:	b672      	cpsid	i
 8001dba:	f383 8811 	msr	BASEPRI, r3
 8001dbe:	f3bf 8f6f 	isb	sy
 8001dc2:	f3bf 8f4f 	dsb	sy
 8001dc6:	b662      	cpsie	i
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001dca:	bf00      	nop
 8001dcc:	e7fe      	b.n	8001dcc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10c      	bne.n	8001dee <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8001dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd8:	b672      	cpsid	i
 8001dda:	f383 8811 	msr	BASEPRI, r3
 8001dde:	f3bf 8f6f 	isb	sy
 8001de2:	f3bf 8f4f 	dsb	sy
 8001de6:	b662      	cpsie	i
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001dea:	bf00      	nop
 8001dec:	e7fe      	b.n	8001dec <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <xQueueGenericCreateStatic+0x5a>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <xQueueGenericCreateStatic+0x5e>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <xQueueGenericCreateStatic+0x60>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10c      	bne.n	8001e1e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8001e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e08:	b672      	cpsid	i
 8001e0a:	f383 8811 	msr	BASEPRI, r3
 8001e0e:	f3bf 8f6f 	isb	sy
 8001e12:	f3bf 8f4f 	dsb	sy
 8001e16:	b662      	cpsie	i
 8001e18:	623b      	str	r3, [r7, #32]
}
 8001e1a:	bf00      	nop
 8001e1c:	e7fe      	b.n	8001e1c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <xQueueGenericCreateStatic+0x8a>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <xQueueGenericCreateStatic+0x8e>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <xQueueGenericCreateStatic+0x90>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10c      	bne.n	8001e4e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8001e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e38:	b672      	cpsid	i
 8001e3a:	f383 8811 	msr	BASEPRI, r3
 8001e3e:	f3bf 8f6f 	isb	sy
 8001e42:	f3bf 8f4f 	dsb	sy
 8001e46:	b662      	cpsie	i
 8001e48:	61fb      	str	r3, [r7, #28]
}
 8001e4a:	bf00      	nop
 8001e4c:	e7fe      	b.n	8001e4c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e4e:	2350      	movs	r3, #80	; 0x50
 8001e50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b50      	cmp	r3, #80	; 0x50
 8001e56:	d00c      	beq.n	8001e72 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8001e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5c:	b672      	cpsid	i
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	b662      	cpsie	i
 8001e6c:	61bb      	str	r3, [r7, #24]
}
 8001e6e:	bf00      	nop
 8001e70:	e7fe      	b.n	8001e70 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001e72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68b9      	ldr	r1, [r7, #8]
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f805 	bl	8001ea4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3730      	adds	r7, #48	; 0x30
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d103      	bne.n	8001ec0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e002      	b.n	8001ec6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	69b8      	ldr	r0, [r7, #24]
 8001ed6:	f7ff fef9 	bl	8001ccc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08e      	sub	sp, #56	; 0x38
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001efa:	2300      	movs	r3, #0
 8001efc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10c      	bne.n	8001f22 <xQueueGenericSend+0x36>
	__asm volatile
 8001f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0c:	b672      	cpsid	i
 8001f0e:	f383 8811 	msr	BASEPRI, r3
 8001f12:	f3bf 8f6f 	isb	sy
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	b662      	cpsie	i
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001f1e:	bf00      	nop
 8001f20:	e7fe      	b.n	8001f20 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d103      	bne.n	8001f30 <xQueueGenericSend+0x44>
 8001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <xQueueGenericSend+0x48>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <xQueueGenericSend+0x4a>
 8001f34:	2300      	movs	r3, #0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <xQueueGenericSend+0x68>
	__asm volatile
 8001f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3e:	b672      	cpsid	i
 8001f40:	f383 8811 	msr	BASEPRI, r3
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	f3bf 8f4f 	dsb	sy
 8001f4c:	b662      	cpsie	i
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f50:	bf00      	nop
 8001f52:	e7fe      	b.n	8001f52 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d103      	bne.n	8001f62 <xQueueGenericSend+0x76>
 8001f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <xQueueGenericSend+0x7a>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <xQueueGenericSend+0x7c>
 8001f66:	2300      	movs	r3, #0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10c      	bne.n	8001f86 <xQueueGenericSend+0x9a>
	__asm volatile
 8001f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f70:	b672      	cpsid	i
 8001f72:	f383 8811 	msr	BASEPRI, r3
 8001f76:	f3bf 8f6f 	isb	sy
 8001f7a:	f3bf 8f4f 	dsb	sy
 8001f7e:	b662      	cpsie	i
 8001f80:	623b      	str	r3, [r7, #32]
}
 8001f82:	bf00      	nop
 8001f84:	e7fe      	b.n	8001f84 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f86:	f001 f9b3 	bl	80032f0 <xTaskGetSchedulerState>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <xQueueGenericSend+0xaa>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <xQueueGenericSend+0xae>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <xQueueGenericSend+0xb0>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10c      	bne.n	8001fba <xQueueGenericSend+0xce>
	__asm volatile
 8001fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa4:	b672      	cpsid	i
 8001fa6:	f383 8811 	msr	BASEPRI, r3
 8001faa:	f3bf 8f6f 	isb	sy
 8001fae:	f3bf 8f4f 	dsb	sy
 8001fb2:	b662      	cpsie	i
 8001fb4:	61fb      	str	r3, [r7, #28]
}
 8001fb6:	bf00      	nop
 8001fb8:	e7fe      	b.n	8001fb8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001fba:	f001 fee7 	bl	8003d8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d302      	bcc.n	8001fd0 <xQueueGenericSend+0xe4>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d129      	bne.n	8002024 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fd6:	f000 fa15 	bl	8002404 <prvCopyDataToQueue>
 8001fda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe6:	3324      	adds	r3, #36	; 0x24
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 ffbb 	bl	8002f64 <xTaskRemoveFromEventList>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001ff4:	4b3f      	ldr	r3, [pc, #252]	; (80020f4 <xQueueGenericSend+0x208>)
 8001ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	f3bf 8f6f 	isb	sy
 8002004:	e00a      	b.n	800201c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800200c:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <xQueueGenericSend+0x208>)
 800200e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800201c:	f001 feea 	bl	8003df4 <vPortExitCritical>
				return pdPASS;
 8002020:	2301      	movs	r3, #1
 8002022:	e063      	b.n	80020ec <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d103      	bne.n	8002032 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800202a:	f001 fee3 	bl	8003df4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800202e:	2300      	movs	r3, #0
 8002030:	e05c      	b.n	80020ec <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fff7 	bl	8003030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002042:	2301      	movs	r3, #1
 8002044:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002046:	f001 fed5 	bl	8003df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800204a:	f000 fd5d 	bl	8002b08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800204e:	f001 fe9d 	bl	8003d8c <vPortEnterCritical>
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002058:	b25b      	sxtb	r3, r3
 800205a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800205e:	d103      	bne.n	8002068 <xQueueGenericSend+0x17c>
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800206e:	b25b      	sxtb	r3, r3
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002074:	d103      	bne.n	800207e <xQueueGenericSend+0x192>
 8002076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800207e:	f001 feb9 	bl	8003df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002082:	1d3a      	adds	r2, r7, #4
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f000 ffe6 	bl	800305c <xTaskCheckForTimeOut>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d124      	bne.n	80020e0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002098:	f000 faac 	bl	80025f4 <prvIsQueueFull>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d018      	beq.n	80020d4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80020a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a4:	3310      	adds	r3, #16
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 ff06 	bl	8002ebc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80020b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020b2:	f000 fa37 	bl	8002524 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80020b6:	f000 fd35 	bl	8002b24 <xTaskResumeAll>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f47f af7c 	bne.w	8001fba <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <xQueueGenericSend+0x208>)
 80020c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	f3bf 8f6f 	isb	sy
 80020d2:	e772      	b.n	8001fba <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80020d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020d6:	f000 fa25 	bl	8002524 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80020da:	f000 fd23 	bl	8002b24 <xTaskResumeAll>
 80020de:	e76c      	b.n	8001fba <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80020e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020e2:	f000 fa1f 	bl	8002524 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020e6:	f000 fd1d 	bl	8002b24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80020ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3738      	adds	r7, #56	; 0x38
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	e000ed04 	.word	0xe000ed04

080020f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08e      	sub	sp, #56	; 0x38
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10c      	bne.n	800212a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8002110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002114:	b672      	cpsid	i
 8002116:	f383 8811 	msr	BASEPRI, r3
 800211a:	f3bf 8f6f 	isb	sy
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	b662      	cpsie	i
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002126:	bf00      	nop
 8002128:	e7fe      	b.n	8002128 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d103      	bne.n	8002138 <xQueueGenericSendFromISR+0x40>
 8002130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <xQueueGenericSendFromISR+0x44>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <xQueueGenericSendFromISR+0x46>
 800213c:	2300      	movs	r3, #0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10c      	bne.n	800215c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8002142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002146:	b672      	cpsid	i
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	b662      	cpsie	i
 8002156:	623b      	str	r3, [r7, #32]
}
 8002158:	bf00      	nop
 800215a:	e7fe      	b.n	800215a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d103      	bne.n	800216a <xQueueGenericSendFromISR+0x72>
 8002162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <xQueueGenericSendFromISR+0x76>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <xQueueGenericSendFromISR+0x78>
 800216e:	2300      	movs	r3, #0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10c      	bne.n	800218e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8002174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002178:	b672      	cpsid	i
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	b662      	cpsie	i
 8002188:	61fb      	str	r3, [r7, #28]
}
 800218a:	bf00      	nop
 800218c:	e7fe      	b.n	800218c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800218e:	f001 fee5 	bl	8003f5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002192:	f3ef 8211 	mrs	r2, BASEPRI
 8002196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219a:	b672      	cpsid	i
 800219c:	f383 8811 	msr	BASEPRI, r3
 80021a0:	f3bf 8f6f 	isb	sy
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	b662      	cpsie	i
 80021aa:	61ba      	str	r2, [r7, #24]
 80021ac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80021ae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <xQueueGenericSendFromISR+0xcc>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d12c      	bne.n	800221e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021d4:	f000 f916 	bl	8002404 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80021d8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e0:	d112      	bne.n	8002208 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d016      	beq.n	8002218 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ec:	3324      	adds	r3, #36	; 0x24
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 feb8 	bl	8002f64 <xTaskRemoveFromEventList>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00e      	beq.n	8002218 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00b      	beq.n	8002218 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	e007      	b.n	8002218 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002208:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800220c:	3301      	adds	r3, #1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	b25a      	sxtb	r2, r3
 8002212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002218:	2301      	movs	r3, #1
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800221c:	e001      	b.n	8002222 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800221e:	2300      	movs	r3, #0
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
 8002222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002224:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800222c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002230:	4618      	mov	r0, r3
 8002232:	3738      	adds	r7, #56	; 0x38
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	; 0x30
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002244:	2300      	movs	r3, #0
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <xQueueReceive+0x34>
	__asm volatile
 8002252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002256:	b672      	cpsid	i
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	b662      	cpsie	i
 8002266:	623b      	str	r3, [r7, #32]
}
 8002268:	bf00      	nop
 800226a:	e7fe      	b.n	800226a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d103      	bne.n	800227a <xQueueReceive+0x42>
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <xQueueReceive+0x46>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <xQueueReceive+0x48>
 800227e:	2300      	movs	r3, #0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10c      	bne.n	800229e <xQueueReceive+0x66>
	__asm volatile
 8002284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002288:	b672      	cpsid	i
 800228a:	f383 8811 	msr	BASEPRI, r3
 800228e:	f3bf 8f6f 	isb	sy
 8002292:	f3bf 8f4f 	dsb	sy
 8002296:	b662      	cpsie	i
 8002298:	61fb      	str	r3, [r7, #28]
}
 800229a:	bf00      	nop
 800229c:	e7fe      	b.n	800229c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800229e:	f001 f827 	bl	80032f0 <xTaskGetSchedulerState>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <xQueueReceive+0x76>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <xQueueReceive+0x7a>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <xQueueReceive+0x7c>
 80022b2:	2300      	movs	r3, #0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10c      	bne.n	80022d2 <xQueueReceive+0x9a>
	__asm volatile
 80022b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022bc:	b672      	cpsid	i
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	b662      	cpsie	i
 80022cc:	61bb      	str	r3, [r7, #24]
}
 80022ce:	bf00      	nop
 80022d0:	e7fe      	b.n	80022d0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022d2:	f001 fd5b 	bl	8003d8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01f      	beq.n	8002322 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022e6:	f000 f8f7 	bl	80024d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00f      	beq.n	800231a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	3310      	adds	r3, #16
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fe30 	bl	8002f64 <xTaskRemoveFromEventList>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800230a:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <xQueueReceive+0x1c8>)
 800230c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f3bf 8f4f 	dsb	sy
 8002316:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800231a:	f001 fd6b 	bl	8003df4 <vPortExitCritical>
				return pdPASS;
 800231e:	2301      	movs	r3, #1
 8002320:	e069      	b.n	80023f6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d103      	bne.n	8002330 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002328:	f001 fd64 	bl	8003df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800232c:	2300      	movs	r3, #0
 800232e:	e062      	b.n	80023f6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002332:	2b00      	cmp	r3, #0
 8002334:	d106      	bne.n	8002344 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fe78 	bl	8003030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002340:	2301      	movs	r3, #1
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002344:	f001 fd56 	bl	8003df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002348:	f000 fbde 	bl	8002b08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800234c:	f001 fd1e 	bl	8003d8c <vPortEnterCritical>
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002356:	b25b      	sxtb	r3, r3
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800235c:	d103      	bne.n	8002366 <xQueueReceive+0x12e>
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800236c:	b25b      	sxtb	r3, r3
 800236e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002372:	d103      	bne.n	800237c <xQueueReceive+0x144>
 8002374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800237c:	f001 fd3a 	bl	8003df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002380:	1d3a      	adds	r2, r7, #4
 8002382:	f107 0310 	add.w	r3, r7, #16
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fe67 	bl	800305c <xTaskCheckForTimeOut>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d123      	bne.n	80023dc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002396:	f000 f917 	bl	80025c8 <prvIsQueueEmpty>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d017      	beq.n	80023d0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	3324      	adds	r3, #36	; 0x24
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fd87 	bl	8002ebc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023b0:	f000 f8b8 	bl	8002524 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023b4:	f000 fbb6 	bl	8002b24 <xTaskResumeAll>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d189      	bne.n	80022d2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <xQueueReceive+0x1c8>)
 80023c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	e780      	b.n	80022d2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023d2:	f000 f8a7 	bl	8002524 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023d6:	f000 fba5 	bl	8002b24 <xTaskResumeAll>
 80023da:	e77a      	b.n	80022d2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80023dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023de:	f000 f8a1 	bl	8002524 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023e2:	f000 fb9f 	bl	8002b24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023e8:	f000 f8ee 	bl	80025c8 <prvIsQueueEmpty>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f43f af6f 	beq.w	80022d2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80023f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3730      	adds	r7, #48	; 0x30
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000ed04 	.word	0xe000ed04

08002404 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10d      	bne.n	800243e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d14d      	bne.n	80024c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 ff7c 	bl	800332c <xTaskPriorityDisinherit>
 8002434:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	e043      	b.n	80024c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d119      	bne.n	8002478 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6858      	ldr	r0, [r3, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	461a      	mov	r2, r3
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	f001 ffd0 	bl	80043f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	441a      	add	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	429a      	cmp	r2, r3
 800246c:	d32b      	bcc.n	80024c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	e026      	b.n	80024c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68d8      	ldr	r0, [r3, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	461a      	mov	r2, r3
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	f001 ffb6 	bl	80043f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	425b      	negs	r3, r3
 8002492:	441a      	add	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d207      	bcs.n	80024b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	425b      	negs	r3, r3
 80024ae:	441a      	add	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d105      	bne.n	80024c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80024ce:	697b      	ldr	r3, [r7, #20]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d018      	beq.n	800251c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	441a      	add	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	429a      	cmp	r2, r3
 8002502:	d303      	bcc.n	800250c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68d9      	ldr	r1, [r3, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	461a      	mov	r2, r3
 8002516:	6838      	ldr	r0, [r7, #0]
 8002518:	f001 ff6c 	bl	80043f4 <memcpy>
	}
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800252c:	f001 fc2e 	bl	8003d8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002536:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002538:	e011      	b.n	800255e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	2b00      	cmp	r3, #0
 8002540:	d012      	beq.n	8002568 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3324      	adds	r3, #36	; 0x24
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fd0c 	bl	8002f64 <xTaskRemoveFromEventList>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002552:	f000 fde9 	bl	8003128 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	3b01      	subs	r3, #1
 800255a:	b2db      	uxtb	r3, r3
 800255c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800255e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002562:	2b00      	cmp	r3, #0
 8002564:	dce9      	bgt.n	800253a <prvUnlockQueue+0x16>
 8002566:	e000      	b.n	800256a <prvUnlockQueue+0x46>
					break;
 8002568:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	22ff      	movs	r2, #255	; 0xff
 800256e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002572:	f001 fc3f 	bl	8003df4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002576:	f001 fc09 	bl	8003d8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002580:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002582:	e011      	b.n	80025a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d012      	beq.n	80025b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3310      	adds	r3, #16
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fce7 	bl	8002f64 <xTaskRemoveFromEventList>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800259c:	f000 fdc4 	bl	8003128 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80025a0:	7bbb      	ldrb	r3, [r7, #14]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	dce9      	bgt.n	8002584 <prvUnlockQueue+0x60>
 80025b0:	e000      	b.n	80025b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80025b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	22ff      	movs	r2, #255	; 0xff
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80025bc:	f001 fc1a 	bl	8003df4 <vPortExitCritical>
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025d0:	f001 fbdc 	bl	8003d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80025dc:	2301      	movs	r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	e001      	b.n	80025e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80025e6:	f001 fc05 	bl	8003df4 <vPortExitCritical>

	return xReturn;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025fc:	f001 fbc6 	bl	8003d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002608:	429a      	cmp	r2, r3
 800260a:	d102      	bne.n	8002612 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800260c:	2301      	movs	r3, #1
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	e001      	b.n	8002616 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002616:	f001 fbed 	bl	8003df4 <vPortExitCritical>

	return xReturn;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	e014      	b.n	800265e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002634:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <vQueueAddToRegistry+0x50>)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10b      	bne.n	8002658 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002640:	490c      	ldr	r1, [pc, #48]	; (8002674 <vQueueAddToRegistry+0x50>)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800264a:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <vQueueAddToRegistry+0x50>)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002656:	e006      	b.n	8002666 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3301      	adds	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b07      	cmp	r3, #7
 8002662:	d9e7      	bls.n	8002634 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20004940 	.word	0x20004940

08002678 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002688:	f001 fb80 	bl	8003d8c <vPortEnterCritical>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002692:	b25b      	sxtb	r3, r3
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002698:	d103      	bne.n	80026a2 <vQueueWaitForMessageRestricted+0x2a>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026a8:	b25b      	sxtb	r3, r3
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ae:	d103      	bne.n	80026b8 <vQueueWaitForMessageRestricted+0x40>
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026b8:	f001 fb9c 	bl	8003df4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3324      	adds	r3, #36	; 0x24
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fc1b 	bl	8002f08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f7ff ff26 	bl	8002524 <prvUnlockQueue>
	}
 80026d8:	bf00      	nop
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08e      	sub	sp, #56	; 0x38
 80026e4:	af04      	add	r7, sp, #16
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10c      	bne.n	800270e <xTaskCreateStatic+0x2e>
	__asm volatile
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	b672      	cpsid	i
 80026fa:	f383 8811 	msr	BASEPRI, r3
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	b662      	cpsie	i
 8002708:	623b      	str	r3, [r7, #32]
}
 800270a:	bf00      	nop
 800270c:	e7fe      	b.n	800270c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10c      	bne.n	800272e <xTaskCreateStatic+0x4e>
	__asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	b672      	cpsid	i
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	b662      	cpsie	i
 8002728:	61fb      	str	r3, [r7, #28]
}
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800272e:	235c      	movs	r3, #92	; 0x5c
 8002730:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	2b5c      	cmp	r3, #92	; 0x5c
 8002736:	d00c      	beq.n	8002752 <xTaskCreateStatic+0x72>
	__asm volatile
 8002738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273c:	b672      	cpsid	i
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	b662      	cpsie	i
 800274c:	61bb      	str	r3, [r7, #24]
}
 800274e:	bf00      	nop
 8002750:	e7fe      	b.n	8002750 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002752:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	2b00      	cmp	r3, #0
 8002758:	d01e      	beq.n	8002798 <xTaskCreateStatic+0xb8>
 800275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01b      	beq.n	8002798 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002768:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	2202      	movs	r2, #2
 800276e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002772:	2300      	movs	r3, #0
 8002774:	9303      	str	r3, [sp, #12]
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f850 	bl	8002830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002792:	f000 f8df 	bl	8002954 <prvAddNewTaskToReadyList>
 8002796:	e001      	b.n	800279c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800279c:	697b      	ldr	r3, [r7, #20]
	}
 800279e:	4618      	mov	r0, r3
 80027a0:	3728      	adds	r7, #40	; 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b08c      	sub	sp, #48	; 0x30
 80027aa:	af04      	add	r7, sp, #16
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 fc12 	bl	8003fe4 <pvPortMalloc>
 80027c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00e      	beq.n	80027e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027c8:	205c      	movs	r0, #92	; 0x5c
 80027ca:	f001 fc0b 	bl	8003fe4 <pvPortMalloc>
 80027ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
 80027dc:	e005      	b.n	80027ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f001 fcca 	bl	8004178 <vPortFree>
 80027e4:	e001      	b.n	80027ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d017      	beq.n	8002820 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	2300      	movs	r3, #0
 80027fc:	9303      	str	r3, [sp, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	9302      	str	r3, [sp, #8]
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f80e 	bl	8002830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002814:	69f8      	ldr	r0, [r7, #28]
 8002816:	f000 f89d 	bl	8002954 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800281a:	2301      	movs	r3, #1
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e002      	b.n	8002826 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002824:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002826:	69bb      	ldr	r3, [r7, #24]
	}
 8002828:	4618      	mov	r0, r3
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	461a      	mov	r2, r3
 8002848:	21a5      	movs	r1, #165	; 0xa5
 800284a:	f001 fde1 	bl	8004410 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002858:	440b      	add	r3, r1
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f023 0307 	bic.w	r3, r3, #7
 8002866:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00c      	beq.n	800288c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	b672      	cpsid	i
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	b662      	cpsie	i
 8002886:	617b      	str	r3, [r7, #20]
}
 8002888:	bf00      	nop
 800288a:	e7fe      	b.n	800288a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01f      	beq.n	80028d2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	e012      	b.n	80028be <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	4413      	add	r3, r2
 800289e:	7819      	ldrb	r1, [r3, #0]
 80028a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	4413      	add	r3, r2
 80028a6:	3334      	adds	r3, #52	; 0x34
 80028a8:	460a      	mov	r2, r1
 80028aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	4413      	add	r3, r2
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d006      	beq.n	80028c6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	3301      	adds	r3, #1
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	2b0f      	cmp	r3, #15
 80028c2:	d9e9      	bls.n	8002898 <prvInitialiseNewTask+0x68>
 80028c4:	e000      	b.n	80028c8 <prvInitialiseNewTask+0x98>
			{
				break;
 80028c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028d0:	e003      	b.n	80028da <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	2b37      	cmp	r3, #55	; 0x37
 80028de:	d901      	bls.n	80028e4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028e0:	2337      	movs	r3, #55	; 0x37
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	2200      	movs	r2, #0
 80028f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	3304      	adds	r3, #4
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f952 	bl	8001ba4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	3318      	adds	r3, #24
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff f94d 	bl	8001ba4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800290e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	2200      	movs	r2, #0
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	68f9      	ldr	r1, [r7, #12]
 8002932:	69b8      	ldr	r0, [r7, #24]
 8002934:	f001 f91c 	bl	8003b70 <pxPortInitialiseStack>
 8002938:	4602      	mov	r2, r0
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002948:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800294a:	bf00      	nop
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800295c:	f001 fa16 	bl	8003d8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002960:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <prvAddNewTaskToReadyList+0xc4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3301      	adds	r3, #1
 8002966:	4a2c      	ldr	r2, [pc, #176]	; (8002a18 <prvAddNewTaskToReadyList+0xc4>)
 8002968:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800296a:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <prvAddNewTaskToReadyList+0xc8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002972:	4a2a      	ldr	r2, [pc, #168]	; (8002a1c <prvAddNewTaskToReadyList+0xc8>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <prvAddNewTaskToReadyList+0xc4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d110      	bne.n	80029a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002980:	f000 fbf6 	bl	8003170 <prvInitialiseTaskLists>
 8002984:	e00d      	b.n	80029a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <prvAddNewTaskToReadyList+0xcc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800298e:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <prvAddNewTaskToReadyList+0xc8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	429a      	cmp	r2, r3
 800299a:	d802      	bhi.n	80029a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800299c:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <prvAddNewTaskToReadyList+0xc8>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <prvAddNewTaskToReadyList+0xd0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3301      	adds	r3, #1
 80029a8:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <prvAddNewTaskToReadyList+0xd0>)
 80029aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <prvAddNewTaskToReadyList+0xd0>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <prvAddNewTaskToReadyList+0xd4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d903      	bls.n	80029c8 <prvAddNewTaskToReadyList+0x74>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <prvAddNewTaskToReadyList+0xd4>)
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <prvAddNewTaskToReadyList+0xd8>)
 80029d6:	441a      	add	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f7ff f8ed 	bl	8001bbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029e4:	f001 fa06 	bl	8003df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029e8:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <prvAddNewTaskToReadyList+0xcc>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00e      	beq.n	8002a0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <prvAddNewTaskToReadyList+0xc8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d207      	bcs.n	8002a0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <prvAddNewTaskToReadyList+0xdc>)
 8002a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000bc0 	.word	0x20000bc0
 8002a1c:	200006ec 	.word	0x200006ec
 8002a20:	20000bcc 	.word	0x20000bcc
 8002a24:	20000bdc 	.word	0x20000bdc
 8002a28:	20000bc8 	.word	0x20000bc8
 8002a2c:	200006f0 	.word	0x200006f0
 8002a30:	e000ed04 	.word	0xe000ed04

08002a34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002a42:	463a      	mov	r2, r7
 8002a44:	1d39      	adds	r1, r7, #4
 8002a46:	f107 0308 	add.w	r3, r7, #8
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f856 	bl	8001afc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	9202      	str	r2, [sp, #8]
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	460a      	mov	r2, r1
 8002a62:	4923      	ldr	r1, [pc, #140]	; (8002af0 <vTaskStartScheduler+0xbc>)
 8002a64:	4823      	ldr	r0, [pc, #140]	; (8002af4 <vTaskStartScheduler+0xc0>)
 8002a66:	f7ff fe3b 	bl	80026e0 <xTaskCreateStatic>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <vTaskStartScheduler+0xc4>)
 8002a6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002a70:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <vTaskStartScheduler+0xc4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	e001      	b.n	8002a82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d102      	bne.n	8002a8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002a88:	f000 fd16 	bl	80034b8 <xTimerCreateTimerTask>
 8002a8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d118      	bne.n	8002ac6 <vTaskStartScheduler+0x92>
	__asm volatile
 8002a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a98:	b672      	cpsid	i
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	b662      	cpsie	i
 8002aa8:	613b      	str	r3, [r7, #16]
}
 8002aaa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <vTaskStartScheduler+0xc8>)
 8002aae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ab2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <vTaskStartScheduler+0xcc>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <vTaskStartScheduler+0xd0>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ac0:	f001 f8e6 	bl	8003c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ac4:	e010      	b.n	8002ae8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002acc:	d10c      	bne.n	8002ae8 <vTaskStartScheduler+0xb4>
	__asm volatile
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	b672      	cpsid	i
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	b662      	cpsie	i
 8002ae2:	60fb      	str	r3, [r7, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	e7fe      	b.n	8002ae6 <vTaskStartScheduler+0xb2>
}
 8002ae8:	bf00      	nop
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	08004444 	.word	0x08004444
 8002af4:	08003141 	.word	0x08003141
 8002af8:	20000be4 	.word	0x20000be4
 8002afc:	20000be0 	.word	0x20000be0
 8002b00:	20000bcc 	.word	0x20000bcc
 8002b04:	20000bc4 	.word	0x20000bc4

08002b08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <vTaskSuspendAll+0x18>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <vTaskSuspendAll+0x18>)
 8002b14:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002b16:	bf00      	nop
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	20000be8 	.word	0x20000be8

08002b24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b32:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <xTaskResumeAll+0x11c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10c      	bne.n	8002b54 <xTaskResumeAll+0x30>
	__asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	b672      	cpsid	i
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	b662      	cpsie	i
 8002b4e:	603b      	str	r3, [r7, #0]
}
 8002b50:	bf00      	nop
 8002b52:	e7fe      	b.n	8002b52 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b54:	f001 f91a 	bl	8003d8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b58:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <xTaskResumeAll+0x11c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	4a38      	ldr	r2, [pc, #224]	; (8002c40 <xTaskResumeAll+0x11c>)
 8002b60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <xTaskResumeAll+0x11c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d162      	bne.n	8002c30 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b6a:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <xTaskResumeAll+0x120>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d05e      	beq.n	8002c30 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b72:	e02f      	b.n	8002bd4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b74:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <xTaskResumeAll+0x124>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3318      	adds	r3, #24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff f879 	bl	8001c78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff f874 	bl	8001c78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b94:	4b2d      	ldr	r3, [pc, #180]	; (8002c4c <xTaskResumeAll+0x128>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d903      	bls.n	8002ba4 <xTaskResumeAll+0x80>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	4a2a      	ldr	r2, [pc, #168]	; (8002c4c <xTaskResumeAll+0x128>)
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4a27      	ldr	r2, [pc, #156]	; (8002c50 <xTaskResumeAll+0x12c>)
 8002bb2:	441a      	add	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	f7fe ffff 	bl	8001bbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <xTaskResumeAll+0x130>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <xTaskResumeAll+0x134>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <xTaskResumeAll+0x124>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1cb      	bne.n	8002b74 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002be2:	f000 fb65 	bl	80032b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <xTaskResumeAll+0x138>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d010      	beq.n	8002c14 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002bf2:	f000 f847 	bl	8002c84 <xTaskIncrementTick>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <xTaskResumeAll+0x134>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f1      	bne.n	8002bf2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <xTaskResumeAll+0x138>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <xTaskResumeAll+0x134>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d009      	beq.n	8002c30 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <xTaskResumeAll+0x13c>)
 8002c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c30:	f001 f8e0 	bl	8003df4 <vPortExitCritical>

	return xAlreadyYielded;
 8002c34:	68bb      	ldr	r3, [r7, #8]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000be8 	.word	0x20000be8
 8002c44:	20000bc0 	.word	0x20000bc0
 8002c48:	20000b80 	.word	0x20000b80
 8002c4c:	20000bc8 	.word	0x20000bc8
 8002c50:	200006f0 	.word	0x200006f0
 8002c54:	200006ec 	.word	0x200006ec
 8002c58:	20000bd4 	.word	0x20000bd4
 8002c5c:	20000bd0 	.word	0x20000bd0
 8002c60:	e000ed04 	.word	0xe000ed04

08002c64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <xTaskGetTickCount+0x1c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002c70:	687b      	ldr	r3, [r7, #4]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000bc4 	.word	0x20000bc4

08002c84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c8e:	4b50      	ldr	r3, [pc, #320]	; (8002dd0 <xTaskIncrementTick+0x14c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 808b 	bne.w	8002dae <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c98:	4b4e      	ldr	r3, [pc, #312]	; (8002dd4 <xTaskIncrementTick+0x150>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ca0:	4a4c      	ldr	r2, [pc, #304]	; (8002dd4 <xTaskIncrementTick+0x150>)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d122      	bne.n	8002cf2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8002cac:	4b4a      	ldr	r3, [pc, #296]	; (8002dd8 <xTaskIncrementTick+0x154>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00c      	beq.n	8002cd0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	b672      	cpsid	i
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	b662      	cpsie	i
 8002cca:	603b      	str	r3, [r7, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	e7fe      	b.n	8002cce <xTaskIncrementTick+0x4a>
 8002cd0:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <xTaskIncrementTick+0x154>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <xTaskIncrementTick+0x158>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a3f      	ldr	r2, [pc, #252]	; (8002dd8 <xTaskIncrementTick+0x154>)
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4a3f      	ldr	r2, [pc, #252]	; (8002ddc <xTaskIncrementTick+0x158>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b3e      	ldr	r3, [pc, #248]	; (8002de0 <xTaskIncrementTick+0x15c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	4a3d      	ldr	r2, [pc, #244]	; (8002de0 <xTaskIncrementTick+0x15c>)
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	f000 fadf 	bl	80032b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002cf2:	4b3c      	ldr	r3, [pc, #240]	; (8002de4 <xTaskIncrementTick+0x160>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d349      	bcc.n	8002d90 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cfc:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <xTaskIncrementTick+0x154>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d06:	4b37      	ldr	r3, [pc, #220]	; (8002de4 <xTaskIncrementTick+0x160>)
 8002d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d0c:	601a      	str	r2, [r3, #0]
					break;
 8002d0e:	e03f      	b.n	8002d90 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d10:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <xTaskIncrementTick+0x154>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d203      	bcs.n	8002d30 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d28:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <xTaskIncrementTick+0x160>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d2e:	e02f      	b.n	8002d90 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	3304      	adds	r3, #4
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe ff9f 	bl	8001c78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	3318      	adds	r3, #24
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe ff96 	bl	8001c78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <xTaskIncrementTick+0x164>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d903      	bls.n	8002d60 <xTaskIncrementTick+0xdc>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <xTaskIncrementTick+0x164>)
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <xTaskIncrementTick+0x168>)
 8002d6e:	441a      	add	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	3304      	adds	r3, #4
 8002d74:	4619      	mov	r1, r3
 8002d76:	4610      	mov	r0, r2
 8002d78:	f7fe ff21 	bl	8001bbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <xTaskIncrementTick+0x16c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d3b8      	bcc.n	8002cfc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d8e:	e7b5      	b.n	8002cfc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d90:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <xTaskIncrementTick+0x16c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d96:	4915      	ldr	r1, [pc, #84]	; (8002dec <xTaskIncrementTick+0x168>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d907      	bls.n	8002db8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8002da8:	2301      	movs	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	e004      	b.n	8002db8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <xTaskIncrementTick+0x170>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <xTaskIncrementTick+0x170>)
 8002db6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <xTaskIncrementTick+0x174>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002dc4:	697b      	ldr	r3, [r7, #20]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000be8 	.word	0x20000be8
 8002dd4:	20000bc4 	.word	0x20000bc4
 8002dd8:	20000b78 	.word	0x20000b78
 8002ddc:	20000b7c 	.word	0x20000b7c
 8002de0:	20000bd8 	.word	0x20000bd8
 8002de4:	20000be0 	.word	0x20000be0
 8002de8:	20000bc8 	.word	0x20000bc8
 8002dec:	200006f0 	.word	0x200006f0
 8002df0:	200006ec 	.word	0x200006ec
 8002df4:	20000bd0 	.word	0x20000bd0
 8002df8:	20000bd4 	.word	0x20000bd4

08002dfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e02:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <vTaskSwitchContext+0xac>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e0a:	4b28      	ldr	r3, [pc, #160]	; (8002eac <vTaskSwitchContext+0xb0>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e10:	e043      	b.n	8002e9a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8002e12:	4b26      	ldr	r3, [pc, #152]	; (8002eac <vTaskSwitchContext+0xb0>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <vTaskSwitchContext+0xb4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	e012      	b.n	8002e46 <vTaskSwitchContext+0x4a>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10c      	bne.n	8002e40 <vTaskSwitchContext+0x44>
	__asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	b672      	cpsid	i
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	b662      	cpsie	i
 8002e3a:	607b      	str	r3, [r7, #4]
}
 8002e3c:	bf00      	nop
 8002e3e:	e7fe      	b.n	8002e3e <vTaskSwitchContext+0x42>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	491b      	ldr	r1, [pc, #108]	; (8002eb4 <vTaskSwitchContext+0xb8>)
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0e2      	beq.n	8002e20 <vTaskSwitchContext+0x24>
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4a13      	ldr	r2, [pc, #76]	; (8002eb4 <vTaskSwitchContext+0xb8>)
 8002e66:	4413      	add	r3, r2
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d104      	bne.n	8002e8a <vTaskSwitchContext+0x8e>
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <vTaskSwitchContext+0xbc>)
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	4a06      	ldr	r2, [pc, #24]	; (8002eb0 <vTaskSwitchContext+0xb4>)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6013      	str	r3, [r2, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000be8 	.word	0x20000be8
 8002eac:	20000bd4 	.word	0x20000bd4
 8002eb0:	20000bc8 	.word	0x20000bc8
 8002eb4:	200006f0 	.word	0x200006f0
 8002eb8:	200006ec 	.word	0x200006ec

08002ebc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10c      	bne.n	8002ee6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8002ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed0:	b672      	cpsid	i
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	b662      	cpsie	i
 8002ee0:	60fb      	str	r3, [r7, #12]
}
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <vTaskPlaceOnEventList+0x48>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3318      	adds	r3, #24
 8002eec:	4619      	mov	r1, r3
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe fe89 	bl	8001c06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	6838      	ldr	r0, [r7, #0]
 8002ef8:	f000 fa8a 	bl	8003410 <prvAddCurrentTaskToDelayedList>
}
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	200006ec 	.word	0x200006ec

08002f08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10c      	bne.n	8002f34 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	b672      	cpsid	i
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	b662      	cpsie	i
 8002f2e:	617b      	str	r3, [r7, #20]
}
 8002f30:	bf00      	nop
 8002f32:	e7fe      	b.n	8002f32 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f34:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <vTaskPlaceOnEventListRestricted+0x58>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3318      	adds	r3, #24
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f7fe fe3e 	bl	8001bbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8002f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68b8      	ldr	r0, [r7, #8]
 8002f52:	f000 fa5d 	bl	8003410 <prvAddCurrentTaskToDelayedList>
	}
 8002f56:	bf00      	nop
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200006ec 	.word	0x200006ec

08002f64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	b672      	cpsid	i
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	b662      	cpsie	i
 8002f8e:	60fb      	str	r3, [r7, #12]
}
 8002f90:	bf00      	nop
 8002f92:	e7fe      	b.n	8002f92 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	3318      	adds	r3, #24
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe fe6d 	bl	8001c78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <xTaskRemoveFromEventList+0xb4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d11d      	bne.n	8002fe2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe fe64 	bl	8001c78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <xTaskRemoveFromEventList+0xb8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d903      	bls.n	8002fc4 <xTaskRemoveFromEventList+0x60>
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	4a16      	ldr	r2, [pc, #88]	; (800301c <xTaskRemoveFromEventList+0xb8>)
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4a13      	ldr	r2, [pc, #76]	; (8003020 <xTaskRemoveFromEventList+0xbc>)
 8002fd2:	441a      	add	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7fe fdef 	bl	8001bbe <vListInsertEnd>
 8002fe0:	e005      	b.n	8002fee <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	3318      	adds	r3, #24
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	480e      	ldr	r0, [pc, #56]	; (8003024 <xTaskRemoveFromEventList+0xc0>)
 8002fea:	f7fe fde8 	bl	8001bbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <xTaskRemoveFromEventList+0xc4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d905      	bls.n	8003008 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <xTaskRemoveFromEventList+0xc8>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e001      	b.n	800300c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800300c:	697b      	ldr	r3, [r7, #20]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000be8 	.word	0x20000be8
 800301c:	20000bc8 	.word	0x20000bc8
 8003020:	200006f0 	.word	0x200006f0
 8003024:	20000b80 	.word	0x20000b80
 8003028:	200006ec 	.word	0x200006ec
 800302c:	20000bd4 	.word	0x20000bd4

08003030 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <vTaskInternalSetTimeOutState+0x24>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <vTaskInternalSetTimeOutState+0x28>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	605a      	str	r2, [r3, #4]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	20000bd8 	.word	0x20000bd8
 8003058:	20000bc4 	.word	0x20000bc4

0800305c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10c      	bne.n	8003086 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	b672      	cpsid	i
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	b662      	cpsie	i
 8003080:	613b      	str	r3, [r7, #16]
}
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10c      	bne.n	80030a6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003090:	b672      	cpsid	i
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	b662      	cpsie	i
 80030a0:	60fb      	str	r3, [r7, #12]
}
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80030a6:	f000 fe71 	bl	8003d8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <xTaskCheckForTimeOut+0xc4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c2:	d102      	bne.n	80030ca <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e023      	b.n	8003112 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <xTaskCheckForTimeOut+0xc8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d007      	beq.n	80030e6 <xTaskCheckForTimeOut+0x8a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d302      	bcc.n	80030e6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80030e0:	2301      	movs	r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	e015      	b.n	8003112 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d20b      	bcs.n	8003108 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	1ad2      	subs	r2, r2, r3
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ff97 	bl	8003030 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e004      	b.n	8003112 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800310e:	2301      	movs	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003112:	f000 fe6f 	bl	8003df4 <vPortExitCritical>

	return xReturn;
 8003116:	69fb      	ldr	r3, [r7, #28]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000bc4 	.word	0x20000bc4
 8003124:	20000bd8 	.word	0x20000bd8

08003128 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <vTaskMissedYield+0x14>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	20000bd4 	.word	0x20000bd4

08003140 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003148:	f000 f852 	bl	80031f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <prvIdleTask+0x28>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d9f9      	bls.n	8003148 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <prvIdleTask+0x2c>)
 8003156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003164:	e7f0      	b.n	8003148 <prvIdleTask+0x8>
 8003166:	bf00      	nop
 8003168:	200006f0 	.word	0x200006f0
 800316c:	e000ed04 	.word	0xe000ed04

08003170 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	e00c      	b.n	8003196 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <prvInitialiseTaskLists+0x60>)
 8003188:	4413      	add	r3, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fcea 	bl	8001b64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3301      	adds	r3, #1
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b37      	cmp	r3, #55	; 0x37
 800319a:	d9ef      	bls.n	800317c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800319c:	480d      	ldr	r0, [pc, #52]	; (80031d4 <prvInitialiseTaskLists+0x64>)
 800319e:	f7fe fce1 	bl	8001b64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031a2:	480d      	ldr	r0, [pc, #52]	; (80031d8 <prvInitialiseTaskLists+0x68>)
 80031a4:	f7fe fcde 	bl	8001b64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031a8:	480c      	ldr	r0, [pc, #48]	; (80031dc <prvInitialiseTaskLists+0x6c>)
 80031aa:	f7fe fcdb 	bl	8001b64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80031ae:	480c      	ldr	r0, [pc, #48]	; (80031e0 <prvInitialiseTaskLists+0x70>)
 80031b0:	f7fe fcd8 	bl	8001b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80031b4:	480b      	ldr	r0, [pc, #44]	; (80031e4 <prvInitialiseTaskLists+0x74>)
 80031b6:	f7fe fcd5 	bl	8001b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <prvInitialiseTaskLists+0x78>)
 80031bc:	4a05      	ldr	r2, [pc, #20]	; (80031d4 <prvInitialiseTaskLists+0x64>)
 80031be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031c0:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <prvInitialiseTaskLists+0x7c>)
 80031c2:	4a05      	ldr	r2, [pc, #20]	; (80031d8 <prvInitialiseTaskLists+0x68>)
 80031c4:	601a      	str	r2, [r3, #0]
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200006f0 	.word	0x200006f0
 80031d4:	20000b50 	.word	0x20000b50
 80031d8:	20000b64 	.word	0x20000b64
 80031dc:	20000b80 	.word	0x20000b80
 80031e0:	20000b94 	.word	0x20000b94
 80031e4:	20000bac 	.word	0x20000bac
 80031e8:	20000b78 	.word	0x20000b78
 80031ec:	20000b7c 	.word	0x20000b7c

080031f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031f6:	e019      	b.n	800322c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031f8:	f000 fdc8 	bl	8003d8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031fc:	4b10      	ldr	r3, [pc, #64]	; (8003240 <prvCheckTasksWaitingTermination+0x50>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe fd35 	bl	8001c78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <prvCheckTasksWaitingTermination+0x54>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3b01      	subs	r3, #1
 8003214:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <prvCheckTasksWaitingTermination+0x54>)
 8003216:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <prvCheckTasksWaitingTermination+0x58>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3b01      	subs	r3, #1
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <prvCheckTasksWaitingTermination+0x58>)
 8003220:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003222:	f000 fde7 	bl	8003df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f810 	bl	800324c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <prvCheckTasksWaitingTermination+0x58>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e1      	bne.n	80031f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000b94 	.word	0x20000b94
 8003244:	20000bc0 	.word	0x20000bc0
 8003248:	20000ba8 	.word	0x20000ba8

0800324c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800325a:	2b00      	cmp	r3, #0
 800325c:	d108      	bne.n	8003270 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4618      	mov	r0, r3
 8003264:	f000 ff88 	bl	8004178 <vPortFree>
				vPortFree( pxTCB );
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 ff85 	bl	8004178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800326e:	e01a      	b.n	80032a6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003276:	2b01      	cmp	r3, #1
 8003278:	d103      	bne.n	8003282 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 ff7c 	bl	8004178 <vPortFree>
	}
 8003280:	e011      	b.n	80032a6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003288:	2b02      	cmp	r3, #2
 800328a:	d00c      	beq.n	80032a6 <prvDeleteTCB+0x5a>
	__asm volatile
 800328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003290:	b672      	cpsid	i
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	b662      	cpsie	i
 80032a0:	60fb      	str	r3, [r7, #12]
}
 80032a2:	bf00      	nop
 80032a4:	e7fe      	b.n	80032a4 <prvDeleteTCB+0x58>
	}
 80032a6:	bf00      	nop
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <prvResetNextTaskUnblockTime+0x38>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <prvResetNextTaskUnblockTime+0x3c>)
 80032c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032c8:	e008      	b.n	80032dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <prvResetNextTaskUnblockTime+0x38>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4a04      	ldr	r2, [pc, #16]	; (80032ec <prvResetNextTaskUnblockTime+0x3c>)
 80032da:	6013      	str	r3, [r2, #0]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	20000b78 	.word	0x20000b78
 80032ec:	20000be0 	.word	0x20000be0

080032f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <xTaskGetSchedulerState+0x34>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032fe:	2301      	movs	r3, #1
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	e008      	b.n	8003316 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003304:	4b08      	ldr	r3, [pc, #32]	; (8003328 <xTaskGetSchedulerState+0x38>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800330c:	2302      	movs	r3, #2
 800330e:	607b      	str	r3, [r7, #4]
 8003310:	e001      	b.n	8003316 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003316:	687b      	ldr	r3, [r7, #4]
	}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	20000bcc 	.word	0x20000bcc
 8003328:	20000be8 	.word	0x20000be8

0800332c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d05a      	beq.n	80033f8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003342:	4b30      	ldr	r3, [pc, #192]	; (8003404 <xTaskPriorityDisinherit+0xd8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	429a      	cmp	r2, r3
 800334a:	d00c      	beq.n	8003366 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	b672      	cpsid	i
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	b662      	cpsie	i
 8003360:	60fb      	str	r3, [r7, #12]
}
 8003362:	bf00      	nop
 8003364:	e7fe      	b.n	8003364 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	b672      	cpsid	i
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	b662      	cpsie	i
 8003382:	60bb      	str	r3, [r7, #8]
}
 8003384:	bf00      	nop
 8003386:	e7fe      	b.n	8003386 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800338c:	1e5a      	subs	r2, r3, #1
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339a:	429a      	cmp	r2, r3
 800339c:	d02c      	beq.n	80033f8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d128      	bne.n	80033f8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	3304      	adds	r3, #4
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe fc64 	bl	8001c78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <xTaskPriorityDisinherit+0xdc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d903      	bls.n	80033d8 <xTaskPriorityDisinherit+0xac>
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	4a0c      	ldr	r2, [pc, #48]	; (8003408 <xTaskPriorityDisinherit+0xdc>)
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4a09      	ldr	r2, [pc, #36]	; (800340c <xTaskPriorityDisinherit+0xe0>)
 80033e6:	441a      	add	r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	3304      	adds	r3, #4
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f7fe fbe5 	bl	8001bbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80033f4:	2301      	movs	r3, #1
 80033f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80033f8:	697b      	ldr	r3, [r7, #20]
	}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	200006ec 	.word	0x200006ec
 8003408:	20000bc8 	.word	0x20000bc8
 800340c:	200006f0 	.word	0x200006f0

08003410 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800341a:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003420:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3304      	adds	r3, #4
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fc26 	bl	8001c78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003432:	d10a      	bne.n	800344a <prvAddCurrentTaskToDelayedList+0x3a>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800343a:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3304      	adds	r3, #4
 8003440:	4619      	mov	r1, r3
 8003442:	4819      	ldr	r0, [pc, #100]	; (80034a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003444:	f7fe fbbb 	bl	8001bbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003448:	e026      	b.n	8003498 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003452:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	429a      	cmp	r2, r3
 8003460:	d209      	bcs.n	8003476 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f7fe fbc9 	bl	8001c06 <vListInsert>
}
 8003474:	e010      	b.n	8003498 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3304      	adds	r3, #4
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f7fe fbbf 	bl	8001c06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d202      	bcs.n	8003498 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003492:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	6013      	str	r3, [r2, #0]
}
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000bc4 	.word	0x20000bc4
 80034a4:	200006ec 	.word	0x200006ec
 80034a8:	20000bac 	.word	0x20000bac
 80034ac:	20000b7c 	.word	0x20000b7c
 80034b0:	20000b78 	.word	0x20000b78
 80034b4:	20000be0 	.word	0x20000be0

080034b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80034c2:	f000 fb15 	bl	8003af0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80034c6:	4b1d      	ldr	r3, [pc, #116]	; (800353c <xTimerCreateTimerTask+0x84>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d021      	beq.n	8003512 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80034d6:	1d3a      	adds	r2, r7, #4
 80034d8:	f107 0108 	add.w	r1, r7, #8
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe fb25 	bl	8001b30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	9202      	str	r2, [sp, #8]
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	2302      	movs	r3, #2
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	2300      	movs	r3, #0
 80034f6:	460a      	mov	r2, r1
 80034f8:	4911      	ldr	r1, [pc, #68]	; (8003540 <xTimerCreateTimerTask+0x88>)
 80034fa:	4812      	ldr	r0, [pc, #72]	; (8003544 <xTimerCreateTimerTask+0x8c>)
 80034fc:	f7ff f8f0 	bl	80026e0 <xTaskCreateStatic>
 8003500:	4603      	mov	r3, r0
 8003502:	4a11      	ldr	r2, [pc, #68]	; (8003548 <xTimerCreateTimerTask+0x90>)
 8003504:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <xTimerCreateTimerTask+0x90>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800350e:	2301      	movs	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10c      	bne.n	8003532 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	b672      	cpsid	i
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	b662      	cpsie	i
 800352c:	613b      	str	r3, [r7, #16]
}
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8003532:	697b      	ldr	r3, [r7, #20]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000c1c 	.word	0x20000c1c
 8003540:	0800444c 	.word	0x0800444c
 8003544:	08003689 	.word	0x08003689
 8003548:	20000c20 	.word	0x20000c20

0800354c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800355a:	2300      	movs	r3, #0
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10c      	bne.n	800357e <xTimerGenericCommand+0x32>
	__asm volatile
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	b672      	cpsid	i
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	b662      	cpsie	i
 8003578:	623b      	str	r3, [r7, #32]
}
 800357a:	bf00      	nop
 800357c:	e7fe      	b.n	800357c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <xTimerGenericCommand+0x9c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d02a      	beq.n	80035dc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b05      	cmp	r3, #5
 8003596:	dc18      	bgt.n	80035ca <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003598:	f7ff feaa 	bl	80032f0 <xTaskGetSchedulerState>
 800359c:	4603      	mov	r3, r0
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d109      	bne.n	80035b6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <xTimerGenericCommand+0x9c>)
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	f107 0110 	add.w	r1, r7, #16
 80035aa:	2300      	movs	r3, #0
 80035ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ae:	f7fe fc9d 	bl	8001eec <xQueueGenericSend>
 80035b2:	6278      	str	r0, [r7, #36]	; 0x24
 80035b4:	e012      	b.n	80035dc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <xTimerGenericCommand+0x9c>)
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	f107 0110 	add.w	r1, r7, #16
 80035be:	2300      	movs	r3, #0
 80035c0:	2200      	movs	r2, #0
 80035c2:	f7fe fc93 	bl	8001eec <xQueueGenericSend>
 80035c6:	6278      	str	r0, [r7, #36]	; 0x24
 80035c8:	e008      	b.n	80035dc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <xTimerGenericCommand+0x9c>)
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	f107 0110 	add.w	r1, r7, #16
 80035d2:	2300      	movs	r3, #0
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	f7fe fd8f 	bl	80020f8 <xQueueGenericSendFromISR>
 80035da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3728      	adds	r7, #40	; 0x28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000c1c 	.word	0x20000c1c

080035ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f6:	4b23      	ldr	r3, [pc, #140]	; (8003684 <prvProcessExpiredTimer+0x98>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3304      	adds	r3, #4
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe fb37 	bl	8001c78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d024      	beq.n	8003662 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	699a      	ldr	r2, [r3, #24]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	18d1      	adds	r1, r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	6978      	ldr	r0, [r7, #20]
 8003626:	f000 f8d3 	bl	80037d0 <prvInsertTimerInActiveList>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d021      	beq.n	8003674 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003630:	2300      	movs	r3, #0
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	2300      	movs	r3, #0
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	2100      	movs	r1, #0
 800363a:	6978      	ldr	r0, [r7, #20]
 800363c:	f7ff ff86 	bl	800354c <xTimerGenericCommand>
 8003640:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d115      	bne.n	8003674 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	b672      	cpsid	i
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	b662      	cpsie	i
 800365c:	60fb      	str	r3, [r7, #12]
}
 800365e:	bf00      	nop
 8003660:	e7fe      	b.n	8003660 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	6978      	ldr	r0, [r7, #20]
 800367a:	4798      	blx	r3
}
 800367c:	bf00      	nop
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000c14 	.word	0x20000c14

08003688 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003690:	f107 0308 	add.w	r3, r7, #8
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f857 	bl	8003748 <prvGetNextExpireTime>
 800369a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4619      	mov	r1, r3
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f803 	bl	80036ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80036a6:	f000 f8d5 	bl	8003854 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036aa:	e7f1      	b.n	8003690 <prvTimerTask+0x8>

080036ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80036b6:	f7ff fa27 	bl	8002b08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036ba:	f107 0308 	add.w	r3, r7, #8
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f866 	bl	8003790 <prvSampleTimeNow>
 80036c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d130      	bne.n	800372e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <prvProcessTimerOrBlockTask+0x3c>
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d806      	bhi.n	80036e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80036da:	f7ff fa23 	bl	8002b24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80036de:	68f9      	ldr	r1, [r7, #12]
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff ff83 	bl	80035ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80036e6:	e024      	b.n	8003732 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80036ee:	4b13      	ldr	r3, [pc, #76]	; (800373c <prvProcessTimerOrBlockTask+0x90>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <prvProcessTimerOrBlockTask+0x50>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <prvProcessTimerOrBlockTask+0x52>
 80036fc:	2300      	movs	r3, #0
 80036fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003700:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <prvProcessTimerOrBlockTask+0x94>)
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	4619      	mov	r1, r3
 800370e:	f7fe ffb3 	bl	8002678 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003712:	f7ff fa07 	bl	8002b24 <xTaskResumeAll>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <prvProcessTimerOrBlockTask+0x98>)
 800371e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	f3bf 8f6f 	isb	sy
}
 800372c:	e001      	b.n	8003732 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800372e:	f7ff f9f9 	bl	8002b24 <xTaskResumeAll>
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20000c18 	.word	0x20000c18
 8003740:	20000c1c 	.word	0x20000c1c
 8003744:	e000ed04 	.word	0xe000ed04

08003748 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003750:	4b0e      	ldr	r3, [pc, #56]	; (800378c <prvGetNextExpireTime+0x44>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <prvGetNextExpireTime+0x16>
 800375a:	2201      	movs	r2, #1
 800375c:	e000      	b.n	8003760 <prvGetNextExpireTime+0x18>
 800375e:	2200      	movs	r2, #0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800376c:	4b07      	ldr	r3, [pc, #28]	; (800378c <prvGetNextExpireTime+0x44>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	e001      	b.n	800377c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800377c:	68fb      	ldr	r3, [r7, #12]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20000c14 	.word	0x20000c14

08003790 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003798:	f7ff fa64 	bl	8002c64 <xTaskGetTickCount>
 800379c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800379e:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <prvSampleTimeNow+0x3c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d205      	bcs.n	80037b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80037a8:	f000 f93c 	bl	8003a24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e002      	b.n	80037ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80037ba:	4a04      	ldr	r2, [pc, #16]	; (80037cc <prvSampleTimeNow+0x3c>)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80037c0:	68fb      	ldr	r3, [r7, #12]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20000c24 	.word	0x20000c24

080037d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d812      	bhi.n	800381c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	1ad2      	subs	r2, r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	429a      	cmp	r2, r3
 8003802:	d302      	bcc.n	800380a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003804:	2301      	movs	r3, #1
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	e01b      	b.n	8003842 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800380a:	4b10      	ldr	r3, [pc, #64]	; (800384c <prvInsertTimerInActiveList+0x7c>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3304      	adds	r3, #4
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f7fe f9f6 	bl	8001c06 <vListInsert>
 800381a:	e012      	b.n	8003842 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d206      	bcs.n	8003832 <prvInsertTimerInActiveList+0x62>
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d302      	bcc.n	8003832 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800382c:	2301      	movs	r3, #1
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e007      	b.n	8003842 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <prvInsertTimerInActiveList+0x80>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3304      	adds	r3, #4
 800383a:	4619      	mov	r1, r3
 800383c:	4610      	mov	r0, r2
 800383e:	f7fe f9e2 	bl	8001c06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003842:	697b      	ldr	r3, [r7, #20]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20000c18 	.word	0x20000c18
 8003850:	20000c14 	.word	0x20000c14

08003854 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08e      	sub	sp, #56	; 0x38
 8003858:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800385a:	e0d0      	b.n	80039fe <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	da1a      	bge.n	8003898 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	3304      	adds	r3, #4
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10c      	bne.n	8003888 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003872:	b672      	cpsid	i
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	b662      	cpsie	i
 8003882:	61fb      	str	r3, [r7, #28]
}
 8003884:	bf00      	nop
 8003886:	e7fe      	b.n	8003886 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800388e:	6850      	ldr	r0, [r2, #4]
 8003890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003892:	6892      	ldr	r2, [r2, #8]
 8003894:	4611      	mov	r1, r2
 8003896:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f2c0 80ae 	blt.w	80039fc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d004      	beq.n	80038b6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	3304      	adds	r3, #4
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fe f9e1 	bl	8001c78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038b6:	463b      	mov	r3, r7
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff69 	bl	8003790 <prvSampleTimeNow>
 80038be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b09      	cmp	r3, #9
 80038c4:	f200 809b 	bhi.w	80039fe <prvProcessReceivedCommands+0x1aa>
 80038c8:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <prvProcessReceivedCommands+0x7c>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	080038f9 	.word	0x080038f9
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	080038f9 	.word	0x080038f9
 80038dc:	08003971 	.word	0x08003971
 80038e0:	08003985 	.word	0x08003985
 80038e4:	080039d3 	.word	0x080039d3
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	080038f9 	.word	0x080038f9
 80038f0:	08003971 	.word	0x08003971
 80038f4:	08003985 	.word	0x08003985
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	b2da      	uxtb	r2, r3
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	18d1      	adds	r1, r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003918:	f7ff ff5a 	bl	80037d0 <prvInsertTimerInActiveList>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d06d      	beq.n	80039fe <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003928:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d062      	beq.n	80039fe <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	441a      	add	r2, r3
 8003940:	2300      	movs	r3, #0
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	2100      	movs	r1, #0
 8003948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800394a:	f7ff fdff 	bl	800354c <xTimerGenericCommand>
 800394e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d153      	bne.n	80039fe <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	b672      	cpsid	i
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	b662      	cpsie	i
 800396a:	61bb      	str	r3, [r7, #24]
}
 800396c:	bf00      	nop
 800396e:	e7fe      	b.n	800396e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	b2da      	uxtb	r2, r3
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003982:	e03c      	b.n	80039fe <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10c      	bne.n	80039be <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	b672      	cpsid	i
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	b662      	cpsie	i
 80039b8:	617b      	str	r3, [r7, #20]
}
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	18d1      	adds	r1, r2, r3
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039cc:	f7ff ff00 	bl	80037d0 <prvInsertTimerInActiveList>
					break;
 80039d0:	e015      	b.n	80039fe <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d103      	bne.n	80039e8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80039e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039e2:	f000 fbc9 	bl	8004178 <vPortFree>
 80039e6:	e00a      	b.n	80039fe <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80039fa:	e000      	b.n	80039fe <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80039fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <prvProcessReceivedCommands+0x1cc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	1d39      	adds	r1, r7, #4
 8003a04:	2200      	movs	r2, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fc16 	bl	8002238 <xQueueReceive>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f47f af24 	bne.w	800385c <prvProcessReceivedCommands+0x8>
	}
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop
 8003a18:	3730      	adds	r7, #48	; 0x30
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000c1c 	.word	0x20000c1c

08003a24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a2a:	e04a      	b.n	8003ac2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ae8 <prvSwitchTimerLists+0xc4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a36:	4b2c      	ldr	r3, [pc, #176]	; (8003ae8 <prvSwitchTimerLists+0xc4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe f917 	bl	8001c78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d030      	beq.n	8003ac2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4413      	add	r3, r2
 8003a68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d90e      	bls.n	8003a90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <prvSwitchTimerLists+0xc4>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3304      	adds	r3, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f7fe f8bc 	bl	8001c06 <vListInsert>
 8003a8e:	e018      	b.n	8003ac2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a90:	2300      	movs	r3, #0
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2300      	movs	r3, #0
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	2100      	movs	r1, #0
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f7ff fd56 	bl	800354c <xTimerGenericCommand>
 8003aa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10c      	bne.n	8003ac2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	b672      	cpsid	i
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	b662      	cpsie	i
 8003abc:	603b      	str	r3, [r7, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <prvSwitchTimerLists+0xc4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1af      	bne.n	8003a2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <prvSwitchTimerLists+0xc4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <prvSwitchTimerLists+0xc8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a04      	ldr	r2, [pc, #16]	; (8003ae8 <prvSwitchTimerLists+0xc4>)
 8003ad8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003ada:	4a04      	ldr	r2, [pc, #16]	; (8003aec <prvSwitchTimerLists+0xc8>)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	6013      	str	r3, [r2, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000c14 	.word	0x20000c14
 8003aec:	20000c18 	.word	0x20000c18

08003af0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003af6:	f000 f949 	bl	8003d8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <prvCheckForValidListAndQueue+0x60>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d120      	bne.n	8003b44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003b02:	4814      	ldr	r0, [pc, #80]	; (8003b54 <prvCheckForValidListAndQueue+0x64>)
 8003b04:	f7fe f82e 	bl	8001b64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003b08:	4813      	ldr	r0, [pc, #76]	; (8003b58 <prvCheckForValidListAndQueue+0x68>)
 8003b0a:	f7fe f82b 	bl	8001b64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <prvCheckForValidListAndQueue+0x6c>)
 8003b10:	4a10      	ldr	r2, [pc, #64]	; (8003b54 <prvCheckForValidListAndQueue+0x64>)
 8003b12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003b14:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <prvCheckForValidListAndQueue+0x70>)
 8003b16:	4a10      	ldr	r2, [pc, #64]	; (8003b58 <prvCheckForValidListAndQueue+0x68>)
 8003b18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <prvCheckForValidListAndQueue+0x74>)
 8003b20:	4a11      	ldr	r2, [pc, #68]	; (8003b68 <prvCheckForValidListAndQueue+0x78>)
 8003b22:	2110      	movs	r1, #16
 8003b24:	200a      	movs	r0, #10
 8003b26:	f7fe f93b 	bl	8001da0 <xQueueGenericCreateStatic>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4a08      	ldr	r2, [pc, #32]	; (8003b50 <prvCheckForValidListAndQueue+0x60>)
 8003b2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b30:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <prvCheckForValidListAndQueue+0x60>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <prvCheckForValidListAndQueue+0x60>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	490b      	ldr	r1, [pc, #44]	; (8003b6c <prvCheckForValidListAndQueue+0x7c>)
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe fd70 	bl	8002624 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b44:	f000 f956 	bl	8003df4 <vPortExitCritical>
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000c1c 	.word	0x20000c1c
 8003b54:	20000bec 	.word	0x20000bec
 8003b58:	20000c00 	.word	0x20000c00
 8003b5c:	20000c14 	.word	0x20000c14
 8003b60:	20000c18 	.word	0x20000c18
 8003b64:	20000cc8 	.word	0x20000cc8
 8003b68:	20000c28 	.word	0x20000c28
 8003b6c:	08004454 	.word	0x08004454

08003b70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3b04      	subs	r3, #4
 8003b80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3b04      	subs	r3, #4
 8003b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f023 0201 	bic.w	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3b04      	subs	r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ba0:	4a0c      	ldr	r2, [pc, #48]	; (8003bd4 <pxPortInitialiseStack+0x64>)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3b14      	subs	r3, #20
 8003baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3b04      	subs	r3, #4
 8003bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f06f 0202 	mvn.w	r2, #2
 8003bbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3b20      	subs	r3, #32
 8003bc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	08003bd9 	.word	0x08003bd9

08003bd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <prvTaskExitError+0x5c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bea:	d00c      	beq.n	8003c06 <prvTaskExitError+0x2e>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	b672      	cpsid	i
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	b662      	cpsie	i
 8003c00:	60fb      	str	r3, [r7, #12]
}
 8003c02:	bf00      	nop
 8003c04:	e7fe      	b.n	8003c04 <prvTaskExitError+0x2c>
	__asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0a:	b672      	cpsid	i
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	b662      	cpsie	i
 8003c1a:	60bb      	str	r3, [r7, #8]
}
 8003c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c1e:	bf00      	nop
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0fc      	beq.n	8003c20 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	2000000c 	.word	0x2000000c
	...

08003c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c40:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <pxCurrentTCBConst2>)
 8003c42:	6819      	ldr	r1, [r3, #0]
 8003c44:	6808      	ldr	r0, [r1, #0]
 8003c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4a:	f380 8809 	msr	PSP, r0
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f380 8811 	msr	BASEPRI, r0
 8003c5a:	4770      	bx	lr
 8003c5c:	f3af 8000 	nop.w

08003c60 <pxCurrentTCBConst2>:
 8003c60:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop

08003c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003c68:	4808      	ldr	r0, [pc, #32]	; (8003c8c <prvPortStartFirstTask+0x24>)
 8003c6a:	6800      	ldr	r0, [r0, #0]
 8003c6c:	6800      	ldr	r0, [r0, #0]
 8003c6e:	f380 8808 	msr	MSP, r0
 8003c72:	f04f 0000 	mov.w	r0, #0
 8003c76:	f380 8814 	msr	CONTROL, r0
 8003c7a:	b662      	cpsie	i
 8003c7c:	b661      	cpsie	f
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	df00      	svc	0
 8003c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c8a:	bf00      	nop
 8003c8c:	e000ed08 	.word	0xe000ed08

08003c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c96:	4b37      	ldr	r3, [pc, #220]	; (8003d74 <xPortStartScheduler+0xe4>)
 8003c98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	22ff      	movs	r2, #255	; 0xff
 8003ca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <xPortStartScheduler+0xe8>)
 8003cbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cbe:	4b2f      	ldr	r3, [pc, #188]	; (8003d7c <xPortStartScheduler+0xec>)
 8003cc0:	2207      	movs	r2, #7
 8003cc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cc4:	e009      	b.n	8003cda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003cc6:	4b2d      	ldr	r3, [pc, #180]	; (8003d7c <xPortStartScheduler+0xec>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	4a2b      	ldr	r2, [pc, #172]	; (8003d7c <xPortStartScheduler+0xec>)
 8003cce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b80      	cmp	r3, #128	; 0x80
 8003ce4:	d0ef      	beq.n	8003cc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ce6:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <xPortStartScheduler+0xec>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f1c3 0307 	rsb	r3, r3, #7
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d00c      	beq.n	8003d0c <xPortStartScheduler+0x7c>
	__asm volatile
 8003cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf6:	b672      	cpsid	i
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	b662      	cpsie	i
 8003d06:	60bb      	str	r3, [r7, #8]
}
 8003d08:	bf00      	nop
 8003d0a:	e7fe      	b.n	8003d0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <xPortStartScheduler+0xec>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	4a1a      	ldr	r2, [pc, #104]	; (8003d7c <xPortStartScheduler+0xec>)
 8003d14:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d16:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <xPortStartScheduler+0xec>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d1e:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <xPortStartScheduler+0xec>)
 8003d20:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <xPortStartScheduler+0xf0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <xPortStartScheduler+0xf0>)
 8003d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d34:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <xPortStartScheduler+0xf0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a11      	ldr	r2, [pc, #68]	; (8003d80 <xPortStartScheduler+0xf0>)
 8003d3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d40:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d42:	f000 f8dd 	bl	8003f00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <xPortStartScheduler+0xf4>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003d4c:	f000 f8fc 	bl	8003f48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d50:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <xPortStartScheduler+0xf8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0c      	ldr	r2, [pc, #48]	; (8003d88 <xPortStartScheduler+0xf8>)
 8003d56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003d5a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d5c:	f7ff ff84 	bl	8003c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d60:	f7ff f84c 	bl	8002dfc <vTaskSwitchContext>
	prvTaskExitError();
 8003d64:	f7ff ff38 	bl	8003bd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	e000e400 	.word	0xe000e400
 8003d78:	20000d18 	.word	0x20000d18
 8003d7c:	20000d1c 	.word	0x20000d1c
 8003d80:	e000ed20 	.word	0xe000ed20
 8003d84:	2000000c 	.word	0x2000000c
 8003d88:	e000ef34 	.word	0xe000ef34

08003d8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	b672      	cpsid	i
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	b662      	cpsie	i
 8003da6:	607b      	str	r3, [r7, #4]
}
 8003da8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <vPortEnterCritical+0x60>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	4a0e      	ldr	r2, [pc, #56]	; (8003dec <vPortEnterCritical+0x60>)
 8003db2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003db4:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <vPortEnterCritical+0x60>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d111      	bne.n	8003de0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <vPortEnterCritical+0x64>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00c      	beq.n	8003de0 <vPortEnterCritical+0x54>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	b672      	cpsid	i
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	b662      	cpsie	i
 8003dda:	603b      	str	r3, [r7, #0]
}
 8003ddc:	bf00      	nop
 8003dde:	e7fe      	b.n	8003dde <vPortEnterCritical+0x52>
	}
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	2000000c 	.word	0x2000000c
 8003df0:	e000ed04 	.word	0xe000ed04

08003df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003dfa:	4b13      	ldr	r3, [pc, #76]	; (8003e48 <vPortExitCritical+0x54>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10c      	bne.n	8003e1c <vPortExitCritical+0x28>
	__asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	b672      	cpsid	i
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	b662      	cpsie	i
 8003e16:	607b      	str	r3, [r7, #4]
}
 8003e18:	bf00      	nop
 8003e1a:	e7fe      	b.n	8003e1a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <vPortExitCritical+0x54>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <vPortExitCritical+0x54>)
 8003e24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e26:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <vPortExitCritical+0x54>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d105      	bne.n	8003e3a <vPortExitCritical+0x46>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f383 8811 	msr	BASEPRI, r3
}
 8003e38:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	2000000c 	.word	0x2000000c
 8003e4c:	00000000 	.word	0x00000000

08003e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e50:	f3ef 8009 	mrs	r0, PSP
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <pxCurrentTCBConst>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	f01e 0f10 	tst.w	lr, #16
 8003e60:	bf08      	it	eq
 8003e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e6a:	6010      	str	r0, [r2, #0]
 8003e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e74:	b672      	cpsid	i
 8003e76:	f380 8811 	msr	BASEPRI, r0
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	b662      	cpsie	i
 8003e84:	f7fe ffba 	bl	8002dfc <vTaskSwitchContext>
 8003e88:	f04f 0000 	mov.w	r0, #0
 8003e8c:	f380 8811 	msr	BASEPRI, r0
 8003e90:	bc09      	pop	{r0, r3}
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	6808      	ldr	r0, [r1, #0]
 8003e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9a:	f01e 0f10 	tst.w	lr, #16
 8003e9e:	bf08      	it	eq
 8003ea0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ea4:	f380 8809 	msr	PSP, r0
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop

08003eb0 <pxCurrentTCBConst>:
 8003eb0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop

08003eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	b672      	cpsid	i
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	b662      	cpsie	i
 8003ed2:	607b      	str	r3, [r7, #4]
}
 8003ed4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ed6:	f7fe fed5 	bl	8002c84 <xTaskIncrementTick>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ee0:	4b06      	ldr	r3, [pc, #24]	; (8003efc <xPortSysTickHandler+0x44>)
 8003ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f383 8811 	msr	BASEPRI, r3
}
 8003ef2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	e000ed04 	.word	0xe000ed04

08003f00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <vPortSetupTimerInterrupt+0x34>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <vPortSetupTimerInterrupt+0x38>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <vPortSetupTimerInterrupt+0x3c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <vPortSetupTimerInterrupt+0x40>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	099b      	lsrs	r3, r3, #6
 8003f1c:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <vPortSetupTimerInterrupt+0x44>)
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f22:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <vPortSetupTimerInterrupt+0x34>)
 8003f24:	2207      	movs	r2, #7
 8003f26:	601a      	str	r2, [r3, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	e000e010 	.word	0xe000e010
 8003f38:	e000e018 	.word	0xe000e018
 8003f3c:	20000000 	.word	0x20000000
 8003f40:	10624dd3 	.word	0x10624dd3
 8003f44:	e000e014 	.word	0xe000e014

08003f48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003f58 <vPortEnableVFP+0x10>
 8003f4c:	6801      	ldr	r1, [r0, #0]
 8003f4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f52:	6001      	str	r1, [r0, #0]
 8003f54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003f56:	bf00      	nop
 8003f58:	e000ed88 	.word	0xe000ed88

08003f5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003f62:	f3ef 8305 	mrs	r3, IPSR
 8003f66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	d916      	bls.n	8003f9c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f6e:	4a19      	ldr	r2, [pc, #100]	; (8003fd4 <vPortValidateInterruptPriority+0x78>)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f78:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <vPortValidateInterruptPriority+0x7c>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	7afa      	ldrb	r2, [r7, #11]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d20c      	bcs.n	8003f9c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	b672      	cpsid	i
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	b662      	cpsie	i
 8003f96:	607b      	str	r3, [r7, #4]
}
 8003f98:	bf00      	nop
 8003f9a:	e7fe      	b.n	8003f9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f9c:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <vPortValidateInterruptPriority+0x80>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <vPortValidateInterruptPriority+0x84>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d90c      	bls.n	8003fc6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	b672      	cpsid	i
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	b662      	cpsie	i
 8003fc0:	603b      	str	r3, [r7, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <vPortValidateInterruptPriority+0x68>
	}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e000e3f0 	.word	0xe000e3f0
 8003fd8:	20000d18 	.word	0x20000d18
 8003fdc:	e000ed0c 	.word	0xe000ed0c
 8003fe0:	20000d1c 	.word	0x20000d1c

08003fe4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ff0:	f7fe fd8a 	bl	8002b08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ff4:	4b5b      	ldr	r3, [pc, #364]	; (8004164 <pvPortMalloc+0x180>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ffc:	f000 f91a 	bl	8004234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004000:	4b59      	ldr	r3, [pc, #356]	; (8004168 <pvPortMalloc+0x184>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	f040 8092 	bne.w	8004132 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01f      	beq.n	8004054 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004014:	2208      	movs	r2, #8
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	2b00      	cmp	r3, #0
 8004024:	d016      	beq.n	8004054 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f023 0307 	bic.w	r3, r3, #7
 800402c:	3308      	adds	r3, #8
 800402e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <pvPortMalloc+0x70>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	b672      	cpsid	i
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	b662      	cpsie	i
 800404e:	617b      	str	r3, [r7, #20]
}
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d06b      	beq.n	8004132 <pvPortMalloc+0x14e>
 800405a:	4b44      	ldr	r3, [pc, #272]	; (800416c <pvPortMalloc+0x188>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d866      	bhi.n	8004132 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004064:	4b42      	ldr	r3, [pc, #264]	; (8004170 <pvPortMalloc+0x18c>)
 8004066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004068:	4b41      	ldr	r3, [pc, #260]	; (8004170 <pvPortMalloc+0x18c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800406e:	e004      	b.n	800407a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	d903      	bls.n	800408c <pvPortMalloc+0xa8>
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f1      	bne.n	8004070 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800408c:	4b35      	ldr	r3, [pc, #212]	; (8004164 <pvPortMalloc+0x180>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004092:	429a      	cmp	r2, r3
 8004094:	d04d      	beq.n	8004132 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2208      	movs	r2, #8
 800409c:	4413      	add	r3, r2
 800409e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	1ad2      	subs	r2, r2, r3
 80040b0:	2308      	movs	r3, #8
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d921      	bls.n	80040fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4413      	add	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00c      	beq.n	80040e4 <pvPortMalloc+0x100>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	b672      	cpsid	i
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	b662      	cpsie	i
 80040de:	613b      	str	r3, [r7, #16]
}
 80040e0:	bf00      	nop
 80040e2:	e7fe      	b.n	80040e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	1ad2      	subs	r2, r2, r3
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80040f6:	69b8      	ldr	r0, [r7, #24]
 80040f8:	f000 f8fe 	bl	80042f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040fc:	4b1b      	ldr	r3, [pc, #108]	; (800416c <pvPortMalloc+0x188>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	4a19      	ldr	r2, [pc, #100]	; (800416c <pvPortMalloc+0x188>)
 8004108:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800410a:	4b18      	ldr	r3, [pc, #96]	; (800416c <pvPortMalloc+0x188>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4b19      	ldr	r3, [pc, #100]	; (8004174 <pvPortMalloc+0x190>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d203      	bcs.n	800411e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004116:	4b15      	ldr	r3, [pc, #84]	; (800416c <pvPortMalloc+0x188>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a16      	ldr	r2, [pc, #88]	; (8004174 <pvPortMalloc+0x190>)
 800411c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	4b11      	ldr	r3, [pc, #68]	; (8004168 <pvPortMalloc+0x184>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	431a      	orrs	r2, r3
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004132:	f7fe fcf7 	bl	8002b24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00c      	beq.n	800415a <pvPortMalloc+0x176>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	b672      	cpsid	i
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	b662      	cpsie	i
 8004154:	60fb      	str	r3, [r7, #12]
}
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <pvPortMalloc+0x174>
	return pvReturn;
 800415a:	69fb      	ldr	r3, [r7, #28]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3728      	adds	r7, #40	; 0x28
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20004928 	.word	0x20004928
 8004168:	20004934 	.word	0x20004934
 800416c:	2000492c 	.word	0x2000492c
 8004170:	20004920 	.word	0x20004920
 8004174:	20004930 	.word	0x20004930

08004178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d04c      	beq.n	8004224 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800418a:	2308      	movs	r3, #8
 800418c:	425b      	negs	r3, r3
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4413      	add	r3, r2
 8004192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	4b23      	ldr	r3, [pc, #140]	; (800422c <vPortFree+0xb4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10c      	bne.n	80041c0 <vPortFree+0x48>
	__asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	b672      	cpsid	i
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	b662      	cpsie	i
 80041ba:	60fb      	str	r3, [r7, #12]
}
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00c      	beq.n	80041e2 <vPortFree+0x6a>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	b672      	cpsid	i
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	b662      	cpsie	i
 80041dc:	60bb      	str	r3, [r7, #8]
}
 80041de:	bf00      	nop
 80041e0:	e7fe      	b.n	80041e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <vPortFree+0xb4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d019      	beq.n	8004224 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d115      	bne.n	8004224 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <vPortFree+0xb4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004208:	f7fe fc7e 	bl	8002b08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	4b07      	ldr	r3, [pc, #28]	; (8004230 <vPortFree+0xb8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4413      	add	r3, r2
 8004216:	4a06      	ldr	r2, [pc, #24]	; (8004230 <vPortFree+0xb8>)
 8004218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800421a:	6938      	ldr	r0, [r7, #16]
 800421c:	f000 f86c 	bl	80042f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004220:	f7fe fc80 	bl	8002b24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004224:	bf00      	nop
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20004934 	.word	0x20004934
 8004230:	2000492c 	.word	0x2000492c

08004234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800423a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800423e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004240:	4b27      	ldr	r3, [pc, #156]	; (80042e0 <prvHeapInit+0xac>)
 8004242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00c      	beq.n	8004268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3307      	adds	r3, #7
 8004252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0307 	bic.w	r3, r3, #7
 800425a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	4a1f      	ldr	r2, [pc, #124]	; (80042e0 <prvHeapInit+0xac>)
 8004264:	4413      	add	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800426c:	4a1d      	ldr	r2, [pc, #116]	; (80042e4 <prvHeapInit+0xb0>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004272:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <prvHeapInit+0xb0>)
 8004274:	2200      	movs	r2, #0
 8004276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	4413      	add	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004280:	2208      	movs	r2, #8
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0307 	bic.w	r3, r3, #7
 800428e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4a15      	ldr	r2, [pc, #84]	; (80042e8 <prvHeapInit+0xb4>)
 8004294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <prvHeapInit+0xb4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <prvHeapInit+0xb4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	1ad2      	subs	r2, r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <prvHeapInit+0xb4>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <prvHeapInit+0xb8>)
 80042c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <prvHeapInit+0xbc>)
 80042ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <prvHeapInit+0xc0>)
 80042ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042d2:	601a      	str	r2, [r3, #0]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	20000d20 	.word	0x20000d20
 80042e4:	20004920 	.word	0x20004920
 80042e8:	20004928 	.word	0x20004928
 80042ec:	20004930 	.word	0x20004930
 80042f0:	2000492c 	.word	0x2000492c
 80042f4:	20004934 	.word	0x20004934

080042f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004300:	4b28      	ldr	r3, [pc, #160]	; (80043a4 <prvInsertBlockIntoFreeList+0xac>)
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	e002      	b.n	800430c <prvInsertBlockIntoFreeList+0x14>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	429a      	cmp	r2, r3
 8004314:	d8f7      	bhi.n	8004306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4413      	add	r3, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d108      	bne.n	800433a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	441a      	add	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	441a      	add	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d118      	bne.n	8004380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d00d      	beq.n	8004376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	441a      	add	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	e008      	b.n	8004388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e003      	b.n	8004388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	429a      	cmp	r2, r3
 800438e:	d002      	beq.n	8004396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20004920 	.word	0x20004920
 80043a8:	20004928 	.word	0x20004928

080043ac <__libc_init_array>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	4d0d      	ldr	r5, [pc, #52]	; (80043e4 <__libc_init_array+0x38>)
 80043b0:	4c0d      	ldr	r4, [pc, #52]	; (80043e8 <__libc_init_array+0x3c>)
 80043b2:	1b64      	subs	r4, r4, r5
 80043b4:	10a4      	asrs	r4, r4, #2
 80043b6:	2600      	movs	r6, #0
 80043b8:	42a6      	cmp	r6, r4
 80043ba:	d109      	bne.n	80043d0 <__libc_init_array+0x24>
 80043bc:	4d0b      	ldr	r5, [pc, #44]	; (80043ec <__libc_init_array+0x40>)
 80043be:	4c0c      	ldr	r4, [pc, #48]	; (80043f0 <__libc_init_array+0x44>)
 80043c0:	f000 f82e 	bl	8004420 <_init>
 80043c4:	1b64      	subs	r4, r4, r5
 80043c6:	10a4      	asrs	r4, r4, #2
 80043c8:	2600      	movs	r6, #0
 80043ca:	42a6      	cmp	r6, r4
 80043cc:	d105      	bne.n	80043da <__libc_init_array+0x2e>
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d4:	4798      	blx	r3
 80043d6:	3601      	adds	r6, #1
 80043d8:	e7ee      	b.n	80043b8 <__libc_init_array+0xc>
 80043da:	f855 3b04 	ldr.w	r3, [r5], #4
 80043de:	4798      	blx	r3
 80043e0:	3601      	adds	r6, #1
 80043e2:	e7f2      	b.n	80043ca <__libc_init_array+0x1e>
 80043e4:	08004498 	.word	0x08004498
 80043e8:	08004498 	.word	0x08004498
 80043ec:	08004498 	.word	0x08004498
 80043f0:	0800449c 	.word	0x0800449c

080043f4 <memcpy>:
 80043f4:	440a      	add	r2, r1
 80043f6:	4291      	cmp	r1, r2
 80043f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80043fc:	d100      	bne.n	8004400 <memcpy+0xc>
 80043fe:	4770      	bx	lr
 8004400:	b510      	push	{r4, lr}
 8004402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800440a:	4291      	cmp	r1, r2
 800440c:	d1f9      	bne.n	8004402 <memcpy+0xe>
 800440e:	bd10      	pop	{r4, pc}

08004410 <memset>:
 8004410:	4402      	add	r2, r0
 8004412:	4603      	mov	r3, r0
 8004414:	4293      	cmp	r3, r2
 8004416:	d100      	bne.n	800441a <memset+0xa>
 8004418:	4770      	bx	lr
 800441a:	f803 1b01 	strb.w	r1, [r3], #1
 800441e:	e7f9      	b.n	8004414 <memset+0x4>

08004420 <_init>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	bf00      	nop
 8004424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004426:	bc08      	pop	{r3}
 8004428:	469e      	mov	lr, r3
 800442a:	4770      	bx	lr

0800442c <_fini>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr
